
EndDevice_STM32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003844  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c4  080039c4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080039cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  2000006c  08003a38  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08003a38  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4b3  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e3c  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  00031388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000046d7  00000000  00000000  000325c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f366  00000000  00000000  00036c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068087  00000000  00000000  00045ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ae084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  000ae100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800393c 	.word	0x0800393c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800393c 	.word	0x0800393c

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b974 	b.w	8000450 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	468c      	mov	ip, r1
 8000186:	4604      	mov	r4, r0
 8000188:	9e08      	ldr	r6, [sp, #32]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d14b      	bne.n	8000226 <__udivmoddi4+0xa6>
 800018e:	428a      	cmp	r2, r1
 8000190:	4615      	mov	r5, r2
 8000192:	d967      	bls.n	8000264 <__udivmoddi4+0xe4>
 8000194:	fab2 f282 	clz	r2, r2
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0720 	rsb	r7, r2, #32
 800019e:	fa01 f302 	lsl.w	r3, r1, r2
 80001a2:	fa20 f707 	lsr.w	r7, r0, r7
 80001a6:	4095      	lsls	r5, r2
 80001a8:	ea47 0c03 	orr.w	ip, r7, r3
 80001ac:	4094      	lsls	r4, r2
 80001ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001b2:	fbbc f7fe 	udiv	r7, ip, lr
 80001b6:	fa1f f885 	uxth.w	r8, r5
 80001ba:	fb0e c317 	mls	r3, lr, r7, ip
 80001be:	fb07 f908 	mul.w	r9, r7, r8
 80001c2:	0c21      	lsrs	r1, r4, #16
 80001c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001c8:	4599      	cmp	r9, r3
 80001ca:	d909      	bls.n	80001e0 <__udivmoddi4+0x60>
 80001cc:	18eb      	adds	r3, r5, r3
 80001ce:	f107 31ff 	add.w	r1, r7, #4294967295
 80001d2:	f080 811c 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001d6:	4599      	cmp	r9, r3
 80001d8:	f240 8119 	bls.w	800040e <__udivmoddi4+0x28e>
 80001dc:	3f02      	subs	r7, #2
 80001de:	442b      	add	r3, r5
 80001e0:	eba3 0309 	sub.w	r3, r3, r9
 80001e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80001e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80001ec:	fb00 f108 	mul.w	r1, r0, r8
 80001f0:	b2a4      	uxth	r4, r4
 80001f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001f6:	42a1      	cmp	r1, r4
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x8e>
 80001fa:	192c      	adds	r4, r5, r4
 80001fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000200:	f080 8107 	bcs.w	8000412 <__udivmoddi4+0x292>
 8000204:	42a1      	cmp	r1, r4
 8000206:	f240 8104 	bls.w	8000412 <__udivmoddi4+0x292>
 800020a:	3802      	subs	r0, #2
 800020c:	442c      	add	r4, r5
 800020e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000212:	2700      	movs	r7, #0
 8000214:	1a64      	subs	r4, r4, r1
 8000216:	b11e      	cbz	r6, 8000220 <__udivmoddi4+0xa0>
 8000218:	2300      	movs	r3, #0
 800021a:	40d4      	lsrs	r4, r2
 800021c:	e9c6 4300 	strd	r4, r3, [r6]
 8000220:	4639      	mov	r1, r7
 8000222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000226:	428b      	cmp	r3, r1
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0xbe>
 800022a:	2e00      	cmp	r6, #0
 800022c:	f000 80ec 	beq.w	8000408 <__udivmoddi4+0x288>
 8000230:	2700      	movs	r7, #0
 8000232:	e9c6 0100 	strd	r0, r1, [r6]
 8000236:	4638      	mov	r0, r7
 8000238:	4639      	mov	r1, r7
 800023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023e:	fab3 f783 	clz	r7, r3
 8000242:	2f00      	cmp	r7, #0
 8000244:	d148      	bne.n	80002d8 <__udivmoddi4+0x158>
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__udivmoddi4+0xd0>
 800024a:	4282      	cmp	r2, r0
 800024c:	f200 80fb 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 8000250:	1a84      	subs	r4, r0, r2
 8000252:	eb61 0303 	sbc.w	r3, r1, r3
 8000256:	2001      	movs	r0, #1
 8000258:	469c      	mov	ip, r3
 800025a:	2e00      	cmp	r6, #0
 800025c:	d0e0      	beq.n	8000220 <__udivmoddi4+0xa0>
 800025e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000262:	e7dd      	b.n	8000220 <__udivmoddi4+0xa0>
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xe8>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	2a00      	cmp	r2, #0
 800026e:	f040 808f 	bne.w	8000390 <__udivmoddi4+0x210>
 8000272:	2701      	movs	r7, #1
 8000274:	1b49      	subs	r1, r1, r5
 8000276:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800027a:	fa1f f985 	uxth.w	r9, r5
 800027e:	fbb1 fef8 	udiv	lr, r1, r8
 8000282:	fb08 111e 	mls	r1, r8, lr, r1
 8000286:	fb09 f00e 	mul.w	r0, r9, lr
 800028a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800028e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000292:	4298      	cmp	r0, r3
 8000294:	d907      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10e 31ff 	add.w	r1, lr, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4298      	cmp	r0, r3
 80002a0:	f200 80cd 	bhi.w	800043e <__udivmoddi4+0x2be>
 80002a4:	468e      	mov	lr, r1
 80002a6:	1a1b      	subs	r3, r3, r0
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	fb09 f900 	mul.w	r9, r9, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x14e>
 80002be:	192c      	adds	r4, r5, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x14c>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f200 80b6 	bhi.w	8000438 <__udivmoddi4+0x2b8>
 80002cc:	4618      	mov	r0, r3
 80002ce:	eba4 0409 	sub.w	r4, r4, r9
 80002d2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002d6:	e79e      	b.n	8000216 <__udivmoddi4+0x96>
 80002d8:	f1c7 0520 	rsb	r5, r7, #32
 80002dc:	40bb      	lsls	r3, r7
 80002de:	fa22 fc05 	lsr.w	ip, r2, r5
 80002e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e6:	fa21 f405 	lsr.w	r4, r1, r5
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fbb4 f9fe 	udiv	r9, r4, lr
 80002f2:	fa1f f88c 	uxth.w	r8, ip
 80002f6:	fb0e 4419 	mls	r4, lr, r9, r4
 80002fa:	fa20 f305 	lsr.w	r3, r0, r5
 80002fe:	40b9      	lsls	r1, r7
 8000300:	fb09 fa08 	mul.w	sl, r9, r8
 8000304:	4319      	orrs	r1, r3
 8000306:	0c0b      	lsrs	r3, r1, #16
 8000308:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800030c:	45a2      	cmp	sl, r4
 800030e:	fa02 f207 	lsl.w	r2, r2, r7
 8000312:	fa00 f307 	lsl.w	r3, r0, r7
 8000316:	d90b      	bls.n	8000330 <__udivmoddi4+0x1b0>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000320:	f080 8088 	bcs.w	8000434 <__udivmoddi4+0x2b4>
 8000324:	45a2      	cmp	sl, r4
 8000326:	f240 8085 	bls.w	8000434 <__udivmoddi4+0x2b4>
 800032a:	f1a9 0902 	sub.w	r9, r9, #2
 800032e:	4464      	add	r4, ip
 8000330:	eba4 040a 	sub.w	r4, r4, sl
 8000334:	fbb4 f0fe 	udiv	r0, r4, lr
 8000338:	fb0e 4410 	mls	r4, lr, r0, r4
 800033c:	fb00 fa08 	mul.w	sl, r0, r8
 8000340:	b289      	uxth	r1, r1
 8000342:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000346:	45a2      	cmp	sl, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000352:	d26b      	bcs.n	800042c <__udivmoddi4+0x2ac>
 8000354:	45a2      	cmp	sl, r4
 8000356:	d969      	bls.n	800042c <__udivmoddi4+0x2ac>
 8000358:	3802      	subs	r0, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000360:	fba0 8902 	umull	r8, r9, r0, r2
 8000364:	eba4 040a 	sub.w	r4, r4, sl
 8000368:	454c      	cmp	r4, r9
 800036a:	4641      	mov	r1, r8
 800036c:	46ce      	mov	lr, r9
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d069      	beq.n	800044a <__udivmoddi4+0x2ca>
 8000376:	1a5a      	subs	r2, r3, r1
 8000378:	eb64 040e 	sbc.w	r4, r4, lr
 800037c:	fa04 f505 	lsl.w	r5, r4, r5
 8000380:	fa22 f307 	lsr.w	r3, r2, r7
 8000384:	40fc      	lsrs	r4, r7
 8000386:	431d      	orrs	r5, r3
 8000388:	e9c6 5400 	strd	r5, r4, [r6]
 800038c:	2700      	movs	r7, #0
 800038e:	e747      	b.n	8000220 <__udivmoddi4+0xa0>
 8000390:	4095      	lsls	r5, r2
 8000392:	f1c2 0320 	rsb	r3, r2, #32
 8000396:	fa21 f003 	lsr.w	r0, r1, r3
 800039a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800039e:	fbb0 f7f8 	udiv	r7, r0, r8
 80003a2:	fa1f f985 	uxth.w	r9, r5
 80003a6:	fb08 0017 	mls	r0, r8, r7, r0
 80003aa:	fa24 f303 	lsr.w	r3, r4, r3
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fb07 fc09 	mul.w	ip, r7, r9
 80003b4:	430b      	orrs	r3, r1
 80003b6:	0c19      	lsrs	r1, r3, #16
 80003b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003bc:	458c      	cmp	ip, r1
 80003be:	fa04 f402 	lsl.w	r4, r4, r2
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x254>
 80003c4:	1869      	adds	r1, r5, r1
 80003c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003ca:	d231      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 80003cc:	458c      	cmp	ip, r1
 80003ce:	d92f      	bls.n	8000430 <__udivmoddi4+0x2b0>
 80003d0:	3f02      	subs	r7, #2
 80003d2:	4429      	add	r1, r5
 80003d4:	eba1 010c 	sub.w	r1, r1, ip
 80003d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003dc:	fb08 1c10 	mls	ip, r8, r0, r1
 80003e0:	fb00 fe09 	mul.w	lr, r0, r9
 80003e4:	b299      	uxth	r1, r3
 80003e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x27e>
 80003ee:	1869      	adds	r1, r5, r1
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	d218      	bcs.n	8000428 <__udivmoddi4+0x2a8>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d916      	bls.n	8000428 <__udivmoddi4+0x2a8>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4429      	add	r1, r5
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4637      	mov	r7, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e708      	b.n	8000220 <__udivmoddi4+0xa0>
 800040e:	460f      	mov	r7, r1
 8000410:	e6e6      	b.n	80001e0 <__udivmoddi4+0x60>
 8000412:	4618      	mov	r0, r3
 8000414:	e6fb      	b.n	800020e <__udivmoddi4+0x8e>
 8000416:	4543      	cmp	r3, r8
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb8 0102 	subs.w	r1, r8, r2
 800041e:	eb69 020c 	sbc.w	r2, r9, ip
 8000422:	3801      	subs	r0, #1
 8000424:	4696      	mov	lr, r2
 8000426:	e7a4      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000428:	4618      	mov	r0, r3
 800042a:	e7e8      	b.n	80003fe <__udivmoddi4+0x27e>
 800042c:	4608      	mov	r0, r1
 800042e:	e795      	b.n	800035c <__udivmoddi4+0x1dc>
 8000430:	4607      	mov	r7, r0
 8000432:	e7cf      	b.n	80003d4 <__udivmoddi4+0x254>
 8000434:	4681      	mov	r9, r0
 8000436:	e77b      	b.n	8000330 <__udivmoddi4+0x1b0>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	e747      	b.n	80002ce <__udivmoddi4+0x14e>
 800043e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000442:	442b      	add	r3, r5
 8000444:	e72f      	b.n	80002a6 <__udivmoddi4+0x126>
 8000446:	4638      	mov	r0, r7
 8000448:	e707      	b.n	800025a <__udivmoddi4+0xda>
 800044a:	4637      	mov	r7, r6
 800044c:	e6e8      	b.n	8000220 <__udivmoddi4+0xa0>
 800044e:	bf00      	nop

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <__NVIC_GetPriorityGrouping+0x18>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	f003 0307 	and.w	r3, r3, #7
}
 8000462:	4618      	mov	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047e:	2b00      	cmp	r3, #0
 8000480:	db0b      	blt.n	800049a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 021f 	and.w	r2, r3, #31
 8000488:	4906      	ldr	r1, [pc, #24]	; (80004a4 <__NVIC_EnableIRQ+0x34>)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	2001      	movs	r0, #1
 8000492:	fa00 f202 	lsl.w	r2, r0, r2
 8000496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	e000e100 	.word	0xe000e100

080004a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	6039      	str	r1, [r7, #0]
 80004b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	db0a      	blt.n	80004d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	490c      	ldr	r1, [pc, #48]	; (80004f4 <__NVIC_SetPriority+0x4c>)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	0112      	lsls	r2, r2, #4
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	440b      	add	r3, r1
 80004cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d0:	e00a      	b.n	80004e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4908      	ldr	r1, [pc, #32]	; (80004f8 <__NVIC_SetPriority+0x50>)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	3b04      	subs	r3, #4
 80004e0:	0112      	lsls	r2, r2, #4
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	440b      	add	r3, r1
 80004e6:	761a      	strb	r2, [r3, #24]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000e100 	.word	0xe000e100
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b089      	sub	sp, #36	; 0x24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	f1c3 0307 	rsb	r3, r3, #7
 8000516:	2b04      	cmp	r3, #4
 8000518:	bf28      	it	cs
 800051a:	2304      	movcs	r3, #4
 800051c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	3304      	adds	r3, #4
 8000522:	2b06      	cmp	r3, #6
 8000524:	d902      	bls.n	800052c <NVIC_EncodePriority+0x30>
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	3b03      	subs	r3, #3
 800052a:	e000      	b.n	800052e <NVIC_EncodePriority+0x32>
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000530:	f04f 32ff 	mov.w	r2, #4294967295
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	43da      	mvns	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	401a      	ands	r2, r3
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43d9      	mvns	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000554:	4313      	orrs	r3, r2
         );
}
 8000556:	4618      	mov	r0, r3
 8000558:	3724      	adds	r7, #36	; 0x24
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_APB2_GRP1_EnableClock+0x2c>)
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_APB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000576:	699a      	ldr	r2, [r3, #24]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000590:	b490      	push	{r4, r7}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	461a      	mov	r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	0e1b      	lsrs	r3, r3, #24
 80005a4:	4413      	add	r3, r2
 80005a6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80005a8:	6822      	ldr	r2, [r4, #0]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	fa93 f3a3 	rbit	r3, r3
 80005b4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	fab3 f383 	clz	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	210f      	movs	r1, #15
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	401a      	ands	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	fa93 f3a3 	rbit	r3, r3
 80005d4:	61bb      	str	r3, [r7, #24]
  return result;
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	fab3 f383 	clz	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	6023      	str	r3, [r4, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc90      	pop	{r4, r7}
 80005f2:	4770      	bx	lr

080005f4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	611a      	str	r2, [r3, #16]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29a      	uxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	615a      	str	r2, [r3, #20]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <LL_GPIO_AF_SetEXTISource+0x58>)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3302      	adds	r3, #2
 8000642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	43db      	mvns	r3, r3
 800064c:	ea02 0103 	and.w	r1, r2, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	fa93 f3a3 	rbit	r3, r3
 800065c:	60bb      	str	r3, [r7, #8]
  return result;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	fab3 f383 	clz	r3, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	fa03 f202 	lsl.w	r2, r3, r2
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	430a      	orrs	r2, r1
 8000676:	3302      	adds	r3, #2
 8000678:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40010000 	.word	0x40010000

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80006aa:	2010      	movs	r0, #16
 80006ac:	f7ff ff58 	bl	8000560 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80006b0:	2020      	movs	r0, #32
 80006b2:	f7ff ff55 	bl	8000560 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80006b6:	2004      	movs	r0, #4
 80006b8:	f7ff ff52 	bl	8000560 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80006bc:	2008      	movs	r0, #8
 80006be:	f7ff ff4f 	bl	8000560 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(SX127x_NSS_GPIO_Port, SX127x_NSS_Pin);
 80006c2:	f240 1101 	movw	r1, #257	; 0x101
 80006c6:	4826      	ldr	r0, [pc, #152]	; (8000760 <MX_GPIO_Init+0xd4>)
 80006c8:	f7ff ff94 	bl	80005f4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SX127x_RESET_Pin|UART_RE_Pin);
 80006cc:	4925      	ldr	r1, [pc, #148]	; (8000764 <MX_GPIO_Init+0xd8>)
 80006ce:	4824      	ldr	r0, [pc, #144]	; (8000760 <MX_GPIO_Init+0xd4>)
 80006d0:	f7ff ff9f 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SX127x_NSS_Pin;
 80006d4:	f240 1301 	movw	r3, #257	; 0x101
 80006d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SX127x_NSS_GPIO_Port, &GPIO_InitStruct);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	481d      	ldr	r0, [pc, #116]	; (8000760 <MX_GPIO_Init+0xd4>)
 80006ec:	f000 ff80 	bl	80015f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SX127x_RESET_Pin|UART_RE_Pin;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_GPIO_Init+0xd8>)
 80006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <MX_GPIO_Init+0xd4>)
 8000706:	f000 ff73 	bl	80015f0 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 800070a:	4917      	ldr	r1, [pc, #92]	; (8000768 <MX_GPIO_Init+0xdc>)
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff8f 	bl	8000630 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000718:	2301      	movs	r3, #1
 800071a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800071c:	2300      	movs	r3, #0
 800071e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000720:	2301      	movs	r3, #1
 8000722:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe2d 	bl	8001388 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 800072e:	2204      	movs	r2, #4
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <MX_GPIO_Init+0xe0>)
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xd4>)
 8000734:	f7ff ff2c 	bl	8000590 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000738:	f7ff fe8c 	bl	8000454 <__NVIC_GetPriorityGrouping>
 800073c:	4603      	mov	r3, r0
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff feda 	bl	80004fc <NVIC_EncodePriority>
 8000748:	4603      	mov	r3, r0
 800074a:	4619      	mov	r1, r3
 800074c:	2028      	movs	r0, #40	; 0x28
 800074e:	f7ff feab 	bl	80004a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f7ff fe8c 	bl	8000470 <__NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010c00 	.word	0x40010c00
 8000764:	04082028 	.word	0x04082028
 8000768:	000f0003 	.word	0x000f0003
 800076c:	04100010 	.word	0x04100010

08000770 <__NVIC_SetPriorityGrouping>:
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <__NVIC_EnableIRQ+0x34>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <LL_RCC_HSE_Enable+0x18>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <LL_RCC_HSE_Enable+0x18>)
 80008ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40021000 	.word	0x40021000

080008e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LL_RCC_HSE_IsReady+0x20>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LL_RCC_SetSysClkSource+0x24>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f023 0203 	bic.w	r2, r3, #3
 8000914:	4904      	ldr	r1, [pc, #16]	; (8000928 <LL_RCC_SetSysClkSource+0x24>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	604b      	str	r3, [r1, #4]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <LL_RCC_GetSysClkSource+0x14>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 030c 	and.w	r3, r3, #12
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000

08000944 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <LL_RCC_SetAHBPrescaler+0x24>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000954:	4904      	ldr	r1, [pc, #16]	; (8000968 <LL_RCC_SetAHBPrescaler+0x24>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4313      	orrs	r3, r2
 800095a:	604b      	str	r3, [r1, #4]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800097c:	4904      	ldr	r1, [pc, #16]	; (8000990 <LL_RCC_SetAPB1Prescaler+0x24>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	604b      	str	r3, [r1, #4]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80009a4:	4904      	ldr	r1, [pc, #16]	; (80009b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	604b      	str	r3, [r1, #4]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_RCC_SetADCClockSource+0x24>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <LL_RCC_SetADCClockSource+0x24>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	604b      	str	r3, [r1, #4]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <LL_RCC_PLL_Enable+0x18>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <LL_RCC_PLL_Enable+0x18>)
 80009ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000

08000a00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <LL_RCC_PLL_IsReady+0x20>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000

08000a24 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	4903      	ldr	r1, [pc, #12]	; (8000a50 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_APB1_GRP1_EnableClock>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a6a:	69da      	ldr	r2, [r3, #28]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <LL_APB2_GRP1_EnableClock>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <LL_FLASH_SetLatency+0x24>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f023 0207 	bic.w	r2, r3, #7
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <LL_FLASH_SetLatency+0x24>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	600b      	str	r3, [r1, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <LL_FLASH_GetLatency+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40022000 	.word	0x40022000

08000af4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b02:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	6053      	str	r3, [r2, #4]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40010000 	.word	0x40010000

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ffaf 	bl	8000a84 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b2a:	f7ff ff93 	bl	8000a54 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f7ff fe1e 	bl	8000770 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  NVIC_SetPriority(RCC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b34:	f7ff fe40 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe8e 	bl	8000860 <NVIC_EncodePriority>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4619      	mov	r1, r3
 8000b48:	2005      	movs	r0, #5
 8000b4a:	f7ff fe5f 	bl	800080c <__NVIC_SetPriority>
  NVIC_EnableIRQ(RCC_IRQn);
 8000b4e:	2005      	movs	r0, #5
 8000b50:	f7ff fe40 	bl	80007d4 <__NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000b54:	f7ff ffce 	bl	8000af4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f804 	bl	8000b64 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  vInit();
 8000b5c:	f002 f928 	bl	8002db0 <vInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <main+0x44>
	...

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f7ff ffa3 	bl	8000ab4 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000b6e:	f7ff ffb5 	bl	8000adc <LL_FLASH_GetLatency>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x18>
  {
    Error_Handler();  
 8000b78:	f000 f838 	bl	8000bec <Error_Handler>
  }
  LL_RCC_HSE_Enable();
 8000b7c:	f7ff fea2 	bl	80008c4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000b80:	bf00      	nop
 8000b82:	f7ff fead 	bl	80008e0 <LL_RCC_HSE_IsReady>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d1fa      	bne.n	8000b82 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000b8c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000b90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b94:	f7ff ff46 	bl	8000a24 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b98:	f7ff ff24 	bl	80009e4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b9c:	bf00      	nop
 8000b9e:	f7ff ff2f 	bl	8000a00 <LL_RCC_PLL_IsReady>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d1fa      	bne.n	8000b9e <SystemClock_Config+0x3a>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fecb 	bl	8000944 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000bae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bb2:	f7ff fedb 	bl	800096c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff feec 	bl	8000994 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fea1 	bl	8000904 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff feb2 	bl	800092c <LL_RCC_GetSysClkSource>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d1fa      	bne.n	8000bc4 <SystemClock_Config+0x60>
  {
  
  }
  LL_Init1msTick(72000000);
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <SystemClock_Config+0x84>)
 8000bd0:	f000 fff8 	bl	8001bc4 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <SystemClock_Config+0x84>)
 8000bd6:	f001 f803 	bl	8001be0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bde:	f7ff feed 	bl	80009bc <LL_RCC_SetADCClockSource>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	044aa200 	.word	0x044aa200

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <__NVIC_GetPriorityGrouping>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <__NVIC_EnableIRQ+0x34>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <LL_APB2_GRP1_EnableClock>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d0e:	699a      	ldr	r2, [r3, #24]
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b090      	sub	sp, #64	; 0x40
 8000d38:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	2228      	movs	r2, #40	; 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 f9e0 	bl	8003108 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000d56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d5a:	f7ff ffd3 	bl	8000d04 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff ffd0 	bl	8000d04 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000d64:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d6a:	2309      	movs	r3, #9
 8000d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481e      	ldr	r0, [pc, #120]	; (8000df4 <MX_SPI1_Init+0xc0>)
 8000d7c:	f000 fc38 	bl	80015f0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000d80:	f244 0340 	movw	r3, #16448	; 0x4040
 8000d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d86:	2304      	movs	r3, #4
 8000d88:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4819      	ldr	r0, [pc, #100]	; (8000df4 <MX_SPI1_Init+0xc0>)
 8000d90:	f000 fc2e 	bl	80015f0 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d94:	f7ff ff30 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff7e 	bl	8000ca0 <NVIC_EncodePriority>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	2023      	movs	r0, #35	; 0x23
 8000daa:	f7ff ff4f 	bl	8000c4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8000dae:	2023      	movs	r0, #35	; 0x23
 8000db0:	f7ff ff30 	bl	8000c14 <__NVIC_EnableIRQ>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000db8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000dbc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 8000dd0:	2338      	movs	r3, #56	; 0x38
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000ddc:	230a      	movs	r3, #10
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_SPI1_Init+0xc4>)
 8000de8:	f000 fd91 	bl	800190e <LL_SPI_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3740      	adds	r7, #64	; 0x40
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40010800 	.word	0x40010800
 8000df8:	40013000 	.word	0x40013000

08000dfc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40010400 	.word	0x40010400

08000e28 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6153      	str	r3, [r2, #20]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40010400 	.word	0x40010400

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <HardFault_Handler+0x4>

08000e56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <MemManage_Handler+0x4>

08000e5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <BusFault_Handler+0x4>

08000e62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	vSysRunModeTick();
 8000e90:	f001 ffd6 	bl	8002e40 <vSysRunModeTick>
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END ADC1_2_IRQn 0 */
  
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	vSPI_IT_CallBack();
 8000eb4:	f001 fcd0 	bl	8002858 <vSPI_IT_CallBack>
  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	vUSART_ITCallBack();
 8000ec0:	f001 fe1c 	bl	8002afc <vUSART_ITCallBack>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8000ecc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ed0:	f7ff ff94 	bl	8000dfc <LL_EXTI_IsActiveFlag_0_31>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8000eda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ede:	f7ff ffa3 	bl	8000e28 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x50>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x16>
		heap_end = &end;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <_sbrk+0x50>)
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <_sbrk+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <_sbrk+0x50>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <_sbrk+0x50>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	466a      	mov	r2, sp
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d907      	bls.n	8000f22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f12:	f002 f8cf 	bl	80030b4 <__errno>
 8000f16:	4602      	mov	r2, r0
 8000f18:	230c      	movs	r3, #12
 8000f1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e006      	b.n	8000f30 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <_sbrk+0x50>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <_sbrk+0x50>)
 8000f2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000088 	.word	0x20000088
 8000f3c:	200005e8 	.word	0x200005e8

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <SystemInit+0x5c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <SystemInit+0x5c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <SystemInit+0x5c>)
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	4911      	ldr	r1, [pc, #68]	; (8000f9c <SystemInit+0x5c>)
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <SystemInit+0x60>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <SystemInit+0x5c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <SystemInit+0x5c>)
 8000f62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <SystemInit+0x5c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SystemInit+0x5c>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x5c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x5c>)
 8000f7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000f82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SystemInit+0x5c>)
 8000f86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SystemInit+0x64>)
 8000f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f92:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	f8ff0000 	.word	0xf8ff0000
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4906      	ldr	r1, [pc, #24]	; (8000ff8 <__NVIC_EnableIRQ+0x34>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <LL_APB2_GRP1_EnableClock>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010be:	699a      	ldr	r2, [r3, #24]
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	615a      	str	r2, [r3, #20]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <LL_GPIO_AF_EnableRemap_USART1>:
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8001136:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6053      	str	r3, [r2, #4]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40010000 	.word	0x40010000

0800114c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001174:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001178:	f7ff ff9c 	bl	80010b4 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800117c:	2008      	movs	r0, #8
 800117e:	f7ff ff99 	bl	80010b4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001182:	f244 0340 	movw	r3, #16448	; 0x4040
 8001186:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001188:	2309      	movs	r3, #9
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <MX_USART1_UART_Init+0xc8>)
 800119a:	f000 fa29 	bl	80015f0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800119e:	f248 0380 	movw	r3, #32896	; 0x8080
 80011a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80011a4:	2304      	movs	r3, #4
 80011a6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	4819      	ldr	r0, [pc, #100]	; (8001214 <MX_USART1_UART_Init+0xc8>)
 80011ae:	f000 fa1f 	bl	80015f0 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 80011b2:	f7ff ffbb 	bl	800112c <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011b6:	f7ff fef7 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff45 	bl	8001050 <NVIC_EncodePriority>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	2025      	movs	r0, #37	; 0x25
 80011cc:	f7ff ff16 	bl	8000ffc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80011d0:	2025      	movs	r0, #37	; 0x25
 80011d2:	f7ff fef7 	bl	8000fc4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80011d6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011da:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011e8:	230c      	movs	r3, #12
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <MX_USART1_UART_Init+0xcc>)
 80011fc:	f000 fc68 	bl	8001ad0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART1_UART_Init+0xcc>)
 8001202:	f7ff ff7e 	bl	8001102 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_USART1_UART_Init+0xcc>)
 8001208:	f7ff ff6c 	bl	80010e4 <LL_USART_Enable>

}
 800120c:	bf00      	nop
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010c00 	.word	0x40010c00
 8001218:	40013800 	.word	0x40013800

0800121c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800121c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800121e:	e003      	b.n	8001228 <LoopCopyDataInit>

08001220 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001222:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001224:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001226:	3104      	adds	r1, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800122c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800122e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001230:	d3f6      	bcc.n	8001220 <CopyDataInit>
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001234:	e002      	b.n	800123c <LoopFillZerobss>

08001236 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001238:	f842 3b04 	str.w	r3, [r2], #4

0800123c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800123e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001240:	d3f9      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001242:	f7ff fe7d 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f001 ff3b 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124a:	f7ff fc67 	bl	8000b1c <main>
  bx lr
 800124e:	4770      	bx	lr
  ldr r3, =_sidata
 8001250:	080039cc 	.word	0x080039cc
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001258:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 800125c:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8001260:	200005e4 	.word	0x200005e4

08001264 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <CAN1_RX1_IRQHandler>
	...

08001268 <LL_EXTI_EnableIT_0_31>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <LL_EXTI_EnableIT_0_31+0x20>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4904      	ldr	r1, [pc, #16]	; (8001288 <LL_EXTI_EnableIT_0_31+0x20>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40010400 	.word	0x40010400

0800128c <LL_EXTI_DisableIT_0_31>:
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LL_EXTI_DisableIT_0_31+0x20>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	43db      	mvns	r3, r3
 800129c:	4903      	ldr	r1, [pc, #12]	; (80012ac <LL_EXTI_DisableIT_0_31+0x20>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40010400 	.word	0x40010400

080012b0 <LL_EXTI_EnableEvent_0_31>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4904      	ldr	r1, [pc, #16]	; (80012d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40010400 	.word	0x40010400

080012d4 <LL_EXTI_DisableEvent_0_31>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4903      	ldr	r1, [pc, #12]	; (80012f4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40010400 	.word	0x40010400

080012f8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	4904      	ldr	r1, [pc, #16]	; (8001318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40010400 	.word	0x40010400

0800131c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	43db      	mvns	r3, r3
 800132c:	4903      	ldr	r1, [pc, #12]	; (800133c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800132e:	4013      	ands	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40010400 	.word	0x40010400

08001340 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40010400 	.word	0x40010400

08001364 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	43db      	mvns	r3, r3
 8001374:	4903      	ldr	r1, [pc, #12]	; (8001384 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001376:	4013      	ands	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40010400 	.word	0x40010400

08001388 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d060      	beq.n	800145e <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d067      	beq.n	8001474 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	795b      	ldrb	r3, [r3, #5]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d00e      	beq.n	80013ca <LL_EXTI_Init+0x42>
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d017      	beq.n	80013e0 <LL_EXTI_Init+0x58>
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d120      	bne.n	80013f6 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff8b 	bl	80012d4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff50 	bl	8001268 <LL_EXTI_EnableIT_0_31>
          break;
 80013c8:	e018      	b.n	80013fc <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff5c 	bl	800128c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff69 	bl	80012b0 <LL_EXTI_EnableEvent_0_31>
          break;
 80013de:	e00d      	b.n	80013fc <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff3f 	bl	8001268 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff5e 	bl	80012b0 <LL_EXTI_EnableEvent_0_31>
          break;
 80013f4:	e002      	b.n	80013fc <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
          break;
 80013fa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	799b      	ldrb	r3, [r3, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d037      	beq.n	8001474 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	799b      	ldrb	r3, [r3, #6]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d00e      	beq.n	800142a <LL_EXTI_Init+0xa2>
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <LL_EXTI_Init+0xb8>
 8001410:	2b01      	cmp	r3, #1
 8001412:	d120      	bne.n	8001456 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffa3 	bl	8001364 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff68 	bl	80012f8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001428:	e025      	b.n	8001476 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff74 	bl	800131c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff81 	bl	8001340 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800143e:	e01a      	b.n	8001476 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff57 	bl	80012f8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff76 	bl	8001340 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001454:	e00f      	b.n	8001476 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
            break;
 800145a:	bf00      	nop
 800145c:	e00b      	b.n	8001476 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff12 	bl	800128c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <LL_EXTI_DisableEvent_0_31>
 8001472:	e000      	b.n	8001476 <LL_EXTI_Init+0xee>
      }
 8001474:	bf00      	nop
  }
  return status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <LL_GPIO_SetPinMode>:
{
 8001480:	b490      	push	{r4, r7}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	461a      	mov	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	0e1b      	lsrs	r3, r3, #24
 8001494:	4413      	add	r3, r2
 8001496:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001498:	6822      	ldr	r2, [r4, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	613b      	str	r3, [r7, #16]
  return result;
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	210f      	movs	r1, #15
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	61bb      	str	r3, [r7, #24]
  return result;
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	6023      	str	r3, [r4, #0]
}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc90      	pop	{r4, r7}
 80014e2:	4770      	bx	lr

080014e4 <LL_GPIO_SetPinSpeed>:
{
 80014e4:	b490      	push	{r4, r7}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	0e1b      	lsrs	r3, r3, #24
 80014f8:	4413      	add	r3, r2
 80014fa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80014fc:	6822      	ldr	r2, [r4, #0]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	613b      	str	r3, [r7, #16]
  return result;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	2103      	movs	r1, #3
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	401a      	ands	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	61bb      	str	r3, [r7, #24]
  return result;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	6023      	str	r3, [r4, #0]
}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bc90      	pop	{r4, r7}
 8001546:	4770      	bx	lr

08001548 <LL_GPIO_SetPinOutputType>:
{
 8001548:	b490      	push	{r4, r7}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	0e1b      	lsrs	r3, r3, #24
 800155c:	4413      	add	r3, r2
 800155e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001560:	6822      	ldr	r2, [r4, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	613b      	str	r3, [r7, #16]
  return result;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	2104      	movs	r1, #4
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	61bb      	str	r3, [r7, #24]
  return result;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	fab3 f383 	clz	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	6023      	str	r3, [r4, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc90      	pop	{r4, r7}
 80015aa:	4770      	bx	lr

080015ac <LL_GPIO_SetPinPull>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	613b      	str	r3, [r7, #16]
  return result;
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	408b      	lsls	r3, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	60da      	str	r2, [r3, #12]
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	0c1b      	lsrs	r3, r3, #16
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	60fb      	str	r3, [r7, #12]
  return result;
 8001610:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800161a:	e040      	b.n	800169e <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	409a      	lsls	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d036      	beq.n	8001698 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b07      	cmp	r3, #7
 800162e:	d806      	bhi.n	800163e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001630:	f240 1201 	movw	r2, #257	; 0x101
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	e008      	b.n	8001650 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b08      	subs	r3, #8
 8001642:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800164e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	461a      	mov	r2, r3
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff11 	bl	8001480 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	461a      	mov	r2, r3
 8001664:	69b9      	ldr	r1, [r7, #24]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa0 	bl	80015ac <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d003      	beq.n	800167c <LL_GPIO_Init+0x8c>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b09      	cmp	r3, #9
 800167a:	d10d      	bne.n	8001698 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	461a      	mov	r2, r3
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff2d 	bl	80014e4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	461a      	mov	r2, r3
 8001690:	69b9      	ldr	r1, [r7, #24]
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff58 	bl	8001548 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	3301      	adds	r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1b8      	bne.n	800161c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <LL_RCC_GetSysClkSource>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <LL_RCC_GetSysClkSource+0x14>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000

080016cc <LL_RCC_GetAHBPrescaler>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <LL_RCC_GetAHBPrescaler+0x14>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000

080016e4 <LL_RCC_GetAPB1Prescaler>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <LL_RCC_GetAPB2Prescaler>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000

08001714 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <LL_RCC_PLL_GetMainSource+0x14>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000

08001744 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <LL_RCC_PLL_GetPrediv+0x18>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	0c5b      	lsrs	r3, r3, #17
 800174e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001768:	f000 f820 	bl	80017ac <RCC_GetSystemClockFreq>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f83a 	bl	80017f0 <RCC_GetHCLKClockFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f848 	bl	800181c <RCC_GetPCLK1ClockFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f854 	bl	8001844 <RCC_GetPCLK2ClockFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60da      	str	r2, [r3, #12]
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80017b6:	f7ff ff7d 	bl	80016b4 <LL_RCC_GetSysClkSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d006      	beq.n	80017ce <RCC_GetSystemClockFreq+0x22>
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d007      	beq.n	80017d4 <RCC_GetSystemClockFreq+0x28>
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <RCC_GetSystemClockFreq+0x40>)
 80017ca:	607b      	str	r3, [r7, #4]
      break;
 80017cc:	e009      	b.n	80017e2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <RCC_GetSystemClockFreq+0x40>)
 80017d0:	607b      	str	r3, [r7, #4]
      break;
 80017d2:	e006      	b.n	80017e2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80017d4:	f000 f84a 	bl	800186c <RCC_PLL_GetFreqDomain_SYS>
 80017d8:	6078      	str	r0, [r7, #4]
      break;
 80017da:	e002      	b.n	80017e2 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <RCC_GetSystemClockFreq+0x40>)
 80017de:	607b      	str	r3, [r7, #4]
      break;
 80017e0:	bf00      	nop
  }

  return frequency;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	007a1200 	.word	0x007a1200

080017f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80017f8:	f7ff ff68 	bl	80016cc <LL_RCC_GetAHBPrescaler>
 80017fc:	4603      	mov	r3, r0
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <RCC_GetHCLKClockFreq+0x28>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	40d3      	lsrs	r3, r2
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08003970 	.word	0x08003970

0800181c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001824:	f7ff ff5e 	bl	80016e4 <LL_RCC_GetAPB1Prescaler>
 8001828:	4603      	mov	r3, r0
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <RCC_GetPCLK1ClockFreq+0x24>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	40d3      	lsrs	r3, r2
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	08003980 	.word	0x08003980

08001844 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800184c:	f7ff ff56 	bl	80016fc <LL_RCC_GetAPB2Prescaler>
 8001850:	4603      	mov	r3, r0
 8001852:	0adb      	lsrs	r3, r3, #11
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <RCC_GetPCLK2ClockFreq+0x24>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	40d3      	lsrs	r3, r2
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	08003980 	.word	0x08003980

0800186c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800187a:	f7ff ff4b 	bl	8001714 <LL_RCC_PLL_GetMainSource>
 800187e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d003      	beq.n	8001894 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800188c:	e00b      	b.n	80018a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001890:	607b      	str	r3, [r7, #4]
      break;
 8001892:	e00b      	b.n	80018ac <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001894:	f7ff ff56 	bl	8001744 <LL_RCC_PLL_GetPrediv>
 8001898:	4603      	mov	r3, r0
 800189a:	3301      	adds	r3, #1
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	607b      	str	r3, [r7, #4]
      break;
 80018a4:	e002      	b.n	80018ac <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80018a8:	607b      	str	r3, [r7, #4]
      break;
 80018aa:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80018ac:	f7ff ff3e 	bl	800172c <LL_RCC_PLL_GetMultiplicator>
 80018b0:	4603      	mov	r3, r0
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3302      	adds	r3, #2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	003d0900 	.word	0x003d0900
 80018c8:	007a1200 	.word	0x007a1200

080018cc <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018dc:	2b40      	cmp	r3, #64	; 0x40
 80018de:	d101      	bne.n	80018e4 <LL_SPI_IsEnabled+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_SPI_IsEnabled+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffd5 	bl	80018cc <LL_SPI_IsEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d139      	bne.n	800199c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001930:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	6811      	ldr	r1, [r2, #0]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	6852      	ldr	r2, [r2, #4]
 800193c:	4311      	orrs	r1, r2
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	6892      	ldr	r2, [r2, #8]
 8001942:	4311      	orrs	r1, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	68d2      	ldr	r2, [r2, #12]
 8001948:	4311      	orrs	r1, r2
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	6912      	ldr	r2, [r2, #16]
 800194e:	4311      	orrs	r1, r2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	6952      	ldr	r2, [r2, #20]
 8001954:	4311      	orrs	r1, r2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6992      	ldr	r2, [r2, #24]
 800195a:	4311      	orrs	r1, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	69d2      	ldr	r2, [r2, #28]
 8001960:	4311      	orrs	r1, r2
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	6a12      	ldr	r2, [r2, #32]
 8001966:	430a      	orrs	r2, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 0204 	bic.w	r2, r3, #4
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198a:	d105      	bne.n	8001998 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffac 	bl	80018f0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <LL_USART_IsEnabled>:
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <LL_USART_SetStopBitsLength>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <LL_USART_SetHWFlowCtrl>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	615a      	str	r2, [r3, #20]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_USART_SetBaudRate>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	009a      	lsls	r2, r3, #2
 8001a2a:	441a      	add	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <LL_USART_SetBaudRate+0xb8>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	b299      	uxth	r1, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	009a      	lsls	r2, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <LL_USART_SetBaudRate+0xb8>)
 8001a58:	fba3 0302 	umull	r0, r3, r3, r2
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	2064      	movs	r0, #100	; 0x64
 8001a60:	fb00 f303 	mul.w	r3, r0, r3
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	3332      	adds	r3, #50	; 0x32
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <LL_USART_SetBaudRate+0xb8>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	441a      	add	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <LL_USART_SetBaudRate+0xb8>)
 8001a94:	fba3 0302 	umull	r0, r3, r3, r2
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	2064      	movs	r0, #100	; 0x64
 8001a9c:	fb00 f303 	mul.w	r3, r0, r3
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	3332      	adds	r3, #50	; 0x32
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <LL_USART_SetBaudRate+0xb8>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	095b      	lsrs	r3, r3, #5
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	51eb851f 	.word	0x51eb851f

08001ad0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff5f 	bl	80019a6 <LL_USART_IsEnabled>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d145      	bne.n	8001b7a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001af6:	f023 030c 	bic.w	r3, r3, #12
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	6851      	ldr	r1, [r2, #4]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	6912      	ldr	r2, [r2, #16]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff58 	bl	80019cc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff64 	bl	80019f0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe17 	bl	8001760 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <LL_USART_Init+0xb4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d102      	bne.n	8001b40 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e00c      	b.n	8001b5a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <LL_USART_Init+0xb8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d102      	bne.n	8001b4e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e005      	b.n	8001b5a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <LL_USART_Init+0xbc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff4d 	bl	8001a14 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	40004800 	.word	0x40004800

08001b90 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <LL_InitTick+0x30>)
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_InitTick+0x30>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_InitTick+0x30>)
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ffdd 	bl	8001b90 <LL_InitTick>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <LL_SetSystemCoreClock+0x18>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000000 	.word	0x20000000

08001bfc <vTheApp_Init>:

static bool bTheAppInit = false;
static uint16_t lu16_Delay;

void vTheApp_Init			(const void* configPtr)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	lu16_Delay = 0u;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <vTheApp_Init+0x20>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	801a      	strh	r2, [r3, #0]
	bTheAppInit = true;
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <vTheApp_Init+0x24>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
	(void)configPtr;
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	2000008e 	.word	0x2000008e
 8001c20:	2000008c 	.word	0x2000008c

08001c24 <vTheApp_MainFunction>:
{
	bTheAppInit = false;

}
void vTheApp_MainFunction	(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0c2      	sub	sp, #264	; 0x108
 8001c28:	af00      	add	r7, sp, #0

	uint16_t u16_len;
	uint8_t tmp_Buffer[MAX_PKT_LENGTH];

	if (bTheAppInit != true)
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <vTheApp_MainFunction+0x60>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d11d      	bne.n	8001c74 <vTheApp_MainFunction+0x50>
		return;
	}
	else
	{

		if (0u < lu16_Delay--)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <vTheApp_MainFunction+0x64>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	b291      	uxth	r1, r2
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <vTheApp_MainFunction+0x64>)
 8001c42:	8011      	strh	r1, [r2, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d117      	bne.n	8001c78 <vTheApp_MainFunction+0x54>
		{
			return;
		}
		else
		{
			HAL_USART_ReceiveBuffer(USART1, &tmp_Buffer[0], MAX_PKT_LENGTH, &u16_len);
 8001c48:	f507 7383 	add.w	r3, r7, #262	; 0x106
 8001c4c:	1d39      	adds	r1, r7, #4
 8001c4e:	22ff      	movs	r2, #255	; 0xff
 8001c50:	480e      	ldr	r0, [pc, #56]	; (8001c8c <vTheApp_MainFunction+0x68>)
 8001c52:	f001 f831 	bl	8002cb8 <HAL_USART_ReceiveBuffer>
			if (u16_len != 0u)
 8001c56:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <vTheApp_MainFunction+0x48>
			{
				vSX1278_SendBufer(&tmp_Buffer[0], u16_len);
 8001c5e:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fcfc 	bl	8002664 <vSX1278_SendBufer>

			}
			lu16_Delay = 10;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <vTheApp_MainFunction+0x64>)
 8001c6e:	220a      	movs	r2, #10
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	e002      	b.n	8001c7a <vTheApp_MainFunction+0x56>
		return;
 8001c74:	bf00      	nop
 8001c76:	e000      	b.n	8001c7a <vTheApp_MainFunction+0x56>
			return;
 8001c78:	bf00      	nop



	}

}
 8001c7a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000008c 	.word	0x2000008c
 8001c88:	2000008e 	.word	0x2000008e
 8001c8c:	40013800 	.word	0x40013800

08001c90 <LL_GPIO_TogglePin>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	405a      	eors	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60da      	str	r2, [r3, #12]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <vLed_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vLed_MainFunction(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0


	if (0 < u16_TimeOut--)
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <vLed_MainFunction+0x28>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	b291      	uxth	r1, r2
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <vLed_MainFunction+0x28>)
 8001cc2:	8011      	strh	r1, [r2, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <vLed_MainFunction+0x24>
	{
		return;
	}
	else
	{
		TOGGLE_LED();
 8001cc8:	4905      	ldr	r1, [pc, #20]	; (8001ce0 <vLed_MainFunction+0x2c>)
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <vLed_MainFunction+0x30>)
 8001ccc:	f7ff ffe0 	bl	8001c90 <LL_GPIO_TogglePin>
		u16_TimeOut = TIME_OUT_FOR_1S;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <vLed_MainFunction+0x28>)
 8001cd2:	2264      	movs	r2, #100	; 0x64
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	e000      	b.n	8001cda <vLed_MainFunction+0x26>
		return;
 8001cd8:	bf00      	nop
	}

}
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	04200020 	.word	0x04200020
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <vSX1278_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSX1278_Init(const void* configPtr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	vLL_SX1278_Init();
 8001cf0:	f000 fa1c 	bl	800212c <vLL_SX1278_Init>
	SET_RESET_PIN();
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <vSX1278_Init+0x3c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <vSX1278_Init+0x3c>)
 8001cfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cfe:	60d3      	str	r3, [r2, #12]
	enStateSX1278 = RESET_LOW;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <vSX1278_Init+0x40>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
	lu16_Delay = 0u;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <vSX1278_Init+0x44>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
	bSX1278Init = true;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <vSX1278_Init+0x48>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
	(void)configPtr;
	sDataBuffer.Len = 0u;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <vSX1278_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100

}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	20000091 	.word	0x20000091
 8001d2c:	20000092 	.word	0x20000092
 8001d30:	20000090 	.word	0x20000090
 8001d34:	2000009c 	.word	0x2000009c

08001d38 <vSX1278_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSX1278_MainFunction(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09c      	sub	sp, #112	; 0x70
 8001d3c:	af00      	add	r7, sp, #0
	static bool sb_IdleTriger = true;
	uint8_t u8_tmpData = 0u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	bool  bResponse;
	uint8_t rg_Buffer[100];
	uint16_t u16_tmpData;
	uint16_t u16_tmpData1;

	if (bSX1278Init != true)
 8001d44:	4bba      	ldr	r3, [pc, #744]	; (8002030 <vSX1278_MainFunction+0x2f8>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 81da 	bne.w	8002108 <vSX1278_MainFunction+0x3d0>
	{
		return;
	}
	else
	{
		if (0u < lu16_Delay--)
 8001d54:	4bb7      	ldr	r3, [pc, #732]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	b291      	uxth	r1, r2
 8001d5c:	4ab5      	ldr	r2, [pc, #724]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001d5e:	8011      	strh	r1, [r2, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 81d3 	bne.w	800210c <vSX1278_MainFunction+0x3d4>
		{
			return;
		}
		else
		{
		switch (enStateSX1278)
 8001d66:	4bb4      	ldr	r3, [pc, #720]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	f200 81d0 	bhi.w	8002110 <vSX1278_MainFunction+0x3d8>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <vSX1278_MainFunction+0x40>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001dc5 	.word	0x08001dc5
 8001d7c:	08001f07 	.word	0x08001f07
 8001d80:	08001f21 	.word	0x08001f21
 8001d84:	08001e21 	.word	0x08001e21
 8001d88:	08001f3b 	.word	0x08001f3b
 8001d8c:	08002111 	.word	0x08002111
 8001d90:	08001ffd 	.word	0x08001ffd
 8001d94:	08002111 	.word	0x08002111
 8001d98:	080020f3 	.word	0x080020f3
 8001d9c:	08001e53 	.word	0x08001e53
 8001da0:	08001e79 	.word	0x08001e79
 8001da4:	08001ee1 	.word	0x08001ee1
 8001da8:	08001e9d 	.word	0x08001e9d
 8001dac:	08001ebd 	.word	0x08001ebd
 8001db0:	08001fbd 	.word	0x08001fbd
 8001db4:	08002089 	.word	0x08002089
 8001db8:	080020cf 	.word	0x080020cf
 8001dbc:	08001fdd 	.word	0x08001fdd
 8001dc0:	0800205d 	.word	0x0800205d
		{

		case READ_VERSION:
			bResponse = bSX1278ReadRegister(REG_VERSION, &u8_tmpData);
 8001dc4:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2042      	movs	r0, #66	; 0x42
 8001dcc:	f000 f9cc 	bl	8002168 <bSX1278ReadRegister>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001dd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01c      	beq.n	8001e18 <vSX1278_MainFunction+0xe0>
			{
				if (u8_tmpData == 0x12u)
 8001dde:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d115      	bne.n	8001e12 <vSX1278_MainFunction+0xda>
				{
					u16_tmpData = sprintf((char*) &rg_Buffer[0], (char*)&"Version is :%x\n\r", u8_tmpData);
 8001de6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001dea:	461a      	mov	r2, r3
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4993      	ldr	r1, [pc, #588]	; (800203c <vSX1278_MainFunction+0x304>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 f991 	bl	8003118 <siprintf>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
					HAL_USART_SendBuffer(USART1, &rg_Buffer[0], u16_tmpData, &u16_tmpData1);
 8001dfc:	1cbb      	adds	r3, r7, #2
 8001dfe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001e02:	1d39      	adds	r1, r7, #4
 8001e04:	488e      	ldr	r0, [pc, #568]	; (8002040 <vSX1278_MainFunction+0x308>)
 8001e06:	f000 ff25 	bl	8002c54 <HAL_USART_SendBuffer>
					enStateSX1278 = SLEEP;
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e002      	b.n	8001e18 <vSX1278_MainFunction+0xe0>
				}
				else
				{
					enStateSX1278 = ERROR_HANDLER;
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001e14:	2208      	movs	r2, #8
 8001e16:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				;//do nothing
			}
			lu16_Delay = 0u;
 8001e18:	4b86      	ldr	r3, [pc, #536]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
			break;
 8001e1e:	e178      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case SLEEP:
			bResponse = bSX1278WriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 f9d2 	bl	80021cc <bSX1278WriteRegister>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001e2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <vSX1278_MainFunction+0x112>
			{
				if (sbInitDone == false)
 8001e36:	4b83      	ldr	r3, [pc, #524]	; (8002044 <vSX1278_MainFunction+0x30c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <vSX1278_MainFunction+0x112>
				{
					enStateSX1278 = SET_FREQUENCY;
 8001e44:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001e46:	2209      	movs	r2, #9
 8001e48:	701a      	strb	r2, [r3, #0]
				}
			}
			lu16_Delay = 0u;
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	801a      	strh	r2, [r3, #0]
			break;
 8001e50:	e15f      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case SET_FREQUENCY:
			bResponse = bSX1278_SetFrequency(433E6);
 8001e52:	a175      	add	r1, pc, #468	; (adr r1, 8002028 <vSX1278_MainFunction+0x2f0>)
 8001e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e58:	f000 f9ec 	bl	8002234 <bSX1278_SetFrequency>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if  (true == bResponse)
 8001e62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <vSX1278_MainFunction+0x138>
			{
				enStateSX1278 = DEVIDE_BUFFER;
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001e70:	4b70      	ldr	r3, [pc, #448]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	801a      	strh	r2, [r3, #0]
			break;
 8001e76:	e14c      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case DEVIDE_BUFFER:
			bResponse = bSX1278_DivideBuffer(0u, 0u);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 fa52 	bl	8002324 <bSX1278_DivideBuffer>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if  (true == bResponse)
 8001e86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <vSX1278_MainFunction+0x15c>
			{
				enStateSX1278 = CMD_BOOST_ON;
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001e90:	220c      	movs	r2, #12
 8001e92:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001e94:	4b67      	ldr	r3, [pc, #412]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	801a      	strh	r2, [r3, #0]
			break;
 8001e9a:	e13a      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case CMD_BOOST_ON:
			bResponse = bSX1278_EnBoost();
 8001e9c:	f000 fa7c 	bl	8002398 <bSX1278_EnBoost>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001ea6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <vSX1278_MainFunction+0x17c>
			{
				enStateSX1278 = CMD_EN_AUTO_GAIN_FOR_LNA;
 8001eae:	4b62      	ldr	r3, [pc, #392]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001eb0:	220d      	movs	r2, #13
 8001eb2:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001eb4:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	801a      	strh	r2, [r3, #0]
			break;
 8001eba:	e12a      	b.n	8002112 <vSX1278_MainFunction+0x3da>


		case CMD_EN_AUTO_GAIN_FOR_LNA:
			bResponse = bSX1278WriteRegister(REG_MODEM_CONFIG_3, 0x04u);
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	2026      	movs	r0, #38	; 0x26
 8001ec0:	f000 f984 	bl	80021cc <bSX1278WriteRegister>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001eca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <vSX1278_MainFunction+0x1a0>
			{
				enStateSX1278 = SET_TX_POWER;
 8001ed2:	4b59      	ldr	r3, [pc, #356]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001ed4:	220b      	movs	r2, #11
 8001ed6:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	801a      	strh	r2, [r3, #0]
			break;
 8001ede:	e118      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case SET_TX_POWER:
			//set max power;

			bResponse = bSX1278_SetTXPower();
 8001ee0:	f000 fb08 	bl	80024f4 <bSX1278_SetTXPower>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001eea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <vSX1278_MainFunction+0x1c6>
			{
				enStateSX1278 = IDLE;
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	701a      	strb	r2, [r3, #0]
				sbInitDone = true;
 8001ef8:	4b52      	ldr	r3, [pc, #328]	; (8002044 <vSX1278_MainFunction+0x30c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001efe:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	801a      	strh	r2, [r3, #0]
			break;
 8001f04:	e105      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case RESET_LOW:
			RESET_RESET_PIN();
 8001f06:	4b50      	ldr	r3, [pc, #320]	; (8002048 <vSX1278_MainFunction+0x310>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <vSX1278_MainFunction+0x310>)
 8001f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f10:	60d3      	str	r3, [r2, #12]
			lu16_Delay = 10u;
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001f14:	220a      	movs	r2, #10
 8001f16:	801a      	strh	r2, [r3, #0]
			enStateSX1278 = RESET_HIGH;
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	701a      	strb	r2, [r3, #0]
			break;
 8001f1e:	e0f8      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case RESET_HIGH:
			SET_RESET_PIN();
 8001f20:	4b49      	ldr	r3, [pc, #292]	; (8002048 <vSX1278_MainFunction+0x310>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a48      	ldr	r2, [pc, #288]	; (8002048 <vSX1278_MainFunction+0x310>)
 8001f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f2a:	60d3      	str	r3, [r2, #12]
			lu16_Delay = 10u;
 8001f2c:	4b41      	ldr	r3, [pc, #260]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001f2e:	220a      	movs	r2, #10
 8001f30:	801a      	strh	r2, [r3, #0]
			enStateSX1278 = READ_VERSION;
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
			break;
 8001f38:	e0eb      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case IDLE:
			if (sb_IdleTriger == true)
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <vSX1278_MainFunction+0x314>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00e      	beq.n	8001f60 <vSX1278_MainFunction+0x228>
			{
				bResponse = bSX1278WriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001f42:	2181      	movs	r1, #129	; 0x81
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 f941 	bl	80021cc <bSX1278WriteRegister>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if ( true == bResponse)
 8001f50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d02d      	beq.n	8001fb4 <vSX1278_MainFunction+0x27c>
				{
				sb_IdleTriger = false;
 8001f58:	4b3c      	ldr	r3, [pc, #240]	; (800204c <vSX1278_MainFunction+0x314>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e029      	b.n	8001fb4 <vSX1278_MainFunction+0x27c>
				}
			}
			else
			{
				if (sDataBuffer.Len > 0u)
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <vSX1278_MainFunction+0x318>)
 8001f62:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d024      	beq.n	8001fb4 <vSX1278_MainFunction+0x27c>
				{
					if ( false == sb_isTXModeCheckDone )
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <vSX1278_MainFunction+0x31c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <vSX1278_MainFunction+0x26a>
					{
						bResponse = bSX1278ReadRegister(REG_OP_MODE, &su8_ModemMode);
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <vSX1278_MainFunction+0x320>)
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f000 f8f4 	bl	8002168 <bSX1278ReadRegister>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (true == bResponse )
 8001f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <vSX1278_MainFunction+0x27c>
						{
							enStateSX1278 = IRQ_HANDLER;
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001f90:	220f      	movs	r2, #15
 8001f92:	701a      	strb	r2, [r3, #0]
							sb_isTXModeCheckDone = true;
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <vSX1278_MainFunction+0x31c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
							sb_IdleTriger = true;
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <vSX1278_MainFunction+0x314>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e008      	b.n	8001fb4 <vSX1278_MainFunction+0x27c>
							; //do nothing
						}
					}
					else
					{
							enStateSX1278 = CMD_SET_EXP_MOD;
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001fa4:	220e      	movs	r2, #14
 8001fa6:	701a      	strb	r2, [r3, #0]
							sb_isTXModeCheckDone = false;
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <vSX1278_MainFunction+0x31c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
							sb_IdleTriger = true;
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <vSX1278_MainFunction+0x314>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
				else
				{
					;//do nothing
				}
			}
			lu16_Delay = 0u;
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
			break;
 8001fba:	e0aa      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case CMD_SET_EXP_MOD:
			bResponse = bSX1278_SetExplicitHeaderMode();
 8001fbc:	f000 fa2a 	bl	8002414 <bSX1278_SetExplicitHeaderMode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001fc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <vSX1278_MainFunction+0x29c>
			{
				enStateSX1278 = RESET_FIFO;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001fd0:	2211      	movs	r2, #17
 8001fd2:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
			break;
 8001fda:	e09a      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case RESET_FIFO:
			bResponse = bSX1278_ResetFIFO();
 8001fdc:	f000 fa58 	bl	8002490 <bSX1278_ResetFIFO>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 8001fe6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <vSX1278_MainFunction+0x2bc>
			{
				enStateSX1278 = UPLOAD_TX_BUFFER;
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <vSX1278_MainFunction+0x300>)
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
			break;
 8001ffa:	e08a      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case UPLOAD_TX_BUFFER:
			bResponse = bSX1278_UploadTX_Buffer( &sDataBuffer.Data[0], sDataBuffer.Len);
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <vSX1278_MainFunction+0x318>)
 8001ffe:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002002:	4619      	mov	r1, r3
 8002004:	4812      	ldr	r0, [pc, #72]	; (8002050 <vSX1278_MainFunction+0x318>)
 8002006:	f000 fabb 	bl	8002580 <bSX1278_UploadTX_Buffer>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse )
 8002010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <vSX1278_MainFunction+0x2e6>
			{
				enStateSX1278 = SET_TX_MODE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <vSX1278_MainFunction+0x300>)
 800201a:	2212      	movs	r2, #18
 800201c:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <vSX1278_MainFunction+0x2fc>)
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
			break;
 8002024:	e075      	b.n	8002112 <vSX1278_MainFunction+0x3da>
 8002026:	bf00      	nop
 8002028:	19cf0e40 	.word	0x19cf0e40
 800202c:	00000000 	.word	0x00000000
 8002030:	20000090 	.word	0x20000090
 8002034:	20000092 	.word	0x20000092
 8002038:	20000091 	.word	0x20000091
 800203c:	08003954 	.word	0x08003954
 8002040:	40013800 	.word	0x40013800
 8002044:	20000097 	.word	0x20000097
 8002048:	40010c00 	.word	0x40010c00
 800204c:	20000006 	.word	0x20000006
 8002050:	2000009c 	.word	0x2000009c
 8002054:	20000098 	.word	0x20000098
 8002058:	20000094 	.word	0x20000094

		case SET_TX_MODE:
			bResponse = bSX1278WriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800205c:	2183      	movs	r1, #131	; 0x83
 800205e:	2001      	movs	r0, #1
 8002060:	f000 f8b4 	bl	80021cc <bSX1278WriteRegister>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse )
 800206a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <vSX1278_MainFunction+0x348>
			{
				enStateSX1278 = IRQ_HANDLER;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <vSX1278_MainFunction+0x3e0>)
 8002074:	220f      	movs	r2, #15
 8002076:	701a      	strb	r2, [r3, #0]
				sDataBuffer.Len = 0u;
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <vSX1278_MainFunction+0x3e4>)
 800207a:	2200      	movs	r2, #0
 800207c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
			}
			lu16_Delay = 0u;
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <vSX1278_MainFunction+0x3e8>)
 8002082:	2200      	movs	r2, #0
 8002084:	801a      	strh	r2, [r3, #0]
			break;
 8002086:	e044      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case IRQ_HANDLER:
			bResponse = bSX1278ReadRegister(REG_IRQ_FLAGS, &u8_tmpData);
 8002088:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800208c:	4619      	mov	r1, r3
 800208e:	2012      	movs	r0, #18
 8002090:	f000 f86a 	bl	8002168 <bSX1278ReadRegister>
 8002094:	4603      	mov	r3, r0
 8002096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse)
 800209a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d011      	beq.n	80020c6 <vSX1278_MainFunction+0x38e>
			{
				if ( (u8_tmpData & IRQ_TX_DONE_MASK) == IRQ_TX_DONE_MASK)
 80020a2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <vSX1278_MainFunction+0x37e>
				{
					enStateSX1278 = CLEAR_IRQ_FLAGS;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <vSX1278_MainFunction+0x3e0>)
 80020b0:	2210      	movs	r2, #16
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	e007      	b.n	80020c6 <vSX1278_MainFunction+0x38e>
				}
				else
				{
					if (sDataBuffer.Len > 0u)
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <vSX1278_MainFunction+0x3e4>)
 80020b8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <vSX1278_MainFunction+0x38e>
					{
						enStateSX1278 = IDLE;
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <vSX1278_MainFunction+0x3e0>)
 80020c2:	2204      	movs	r2, #4
 80020c4:	701a      	strb	r2, [r3, #0]
			else
			{
				;//do nothing
			}

			lu16_Delay = 0u;
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <vSX1278_MainFunction+0x3e8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	801a      	strh	r2, [r3, #0]
			break;
 80020cc:	e021      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case CLEAR_IRQ_FLAGS:
			bResponse = bSX1278WriteRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80020ce:	2108      	movs	r1, #8
 80020d0:	2012      	movs	r0, #18
 80020d2:	f000 f87b 	bl	80021cc <bSX1278WriteRegister>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (true == bResponse )
 80020dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <vSX1278_MainFunction+0x3b2>
			{
				enStateSX1278 = IDLE;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <vSX1278_MainFunction+0x3e0>)
 80020e6:	2204      	movs	r2, #4
 80020e8:	701a      	strb	r2, [r3, #0]
			}
			lu16_Delay = 0u;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <vSX1278_MainFunction+0x3e8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
			break;
 80020f0:	e00f      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		case ERROR_HANDLER:
			HAL_USART_SendBuffer(USART1,(uint8_t*) &"ERROR\n\r", 7u, &u16_tmpData1);
 80020f2:	1cbb      	adds	r3, r7, #2
 80020f4:	2207      	movs	r2, #7
 80020f6:	490b      	ldr	r1, [pc, #44]	; (8002124 <vSX1278_MainFunction+0x3ec>)
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <vSX1278_MainFunction+0x3f0>)
 80020fa:	f000 fdab 	bl	8002c54 <HAL_USART_SendBuffer>
			lu16_Delay = 10000u;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <vSX1278_MainFunction+0x3e8>)
 8002100:	f242 7210 	movw	r2, #10000	; 0x2710
 8002104:	801a      	strh	r2, [r3, #0]
			break;
 8002106:	e004      	b.n	8002112 <vSX1278_MainFunction+0x3da>
		return;
 8002108:	bf00      	nop
 800210a:	e002      	b.n	8002112 <vSX1278_MainFunction+0x3da>
			return;
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <vSX1278_MainFunction+0x3da>

		default:
			break;
 8002110:	bf00      	nop
		}
		}
	}

}
 8002112:	3770      	adds	r7, #112	; 0x70
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000091 	.word	0x20000091
 800211c:	2000009c 	.word	0x2000009c
 8002120:	20000092 	.word	0x20000092
 8002124:	08003968 	.word	0x08003968
 8002128:	40013800 	.word	0x40013800

0800212c <vLL_SX1278_Init>:


static void vLL_SX1278_Init(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA
	RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <vLL_SX1278_Init+0x30>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a09      	ldr	r2, [pc, #36]	; (800215c <vLL_SX1278_Init+0x30>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6193      	str	r3, [r2, #24]

	//Configured PIN
	GPIOB->CRH &= ~GPIO_CRH_CNF11;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <vLL_SX1278_Init+0x34>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <vLL_SX1278_Init+0x34>)
 8002142:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002146:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE11;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <vLL_SX1278_Init+0x38>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a05      	ldr	r2, [pc, #20]	; (8002164 <vLL_SX1278_Init+0x38>)
 800214e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002152:	6053      	str	r3, [r2, #4]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40010800 	.word	0x40010800

08002168 <bSX1278ReadRegister>:


static bool bSX1278ReadRegister(uint8_t Register, uint8_t* Data)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
	if (sbStateRdRg == false)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <bSX1278ReadRegister+0x5c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f083 0301 	eor.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00f      	beq.n	80021a2 <bSX1278ReadRegister+0x3a>
	{
		vSPI_SetCS(0u);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 fc20 	bl	80029c8 <vSPI_SetCS>
		SPI_SEND(Register & 0x7f);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	; (80021c8 <bSX1278ReadRegister+0x60>)
 8002194:	f000 fbb6 	bl	8002904 <HAL_SPI_SendChar>
		sbStateRdRg = true;
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <bSX1278ReadRegister+0x5c>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
		return false;
 800219e:	2300      	movs	r3, #0
 80021a0:	e00b      	b.n	80021ba <bSX1278ReadRegister+0x52>
	}
	else
	{
		SPI_SEND_RECIEVE((uint8_t) 0x00, Data);
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4808      	ldr	r0, [pc, #32]	; (80021c8 <bSX1278ReadRegister+0x60>)
 80021a8:	f000 fbda 	bl	8002960 <HAL_SPI_SendRecieveChar>
		vSPI_ResetCS(0u);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f000 fc1d 	bl	80029ec <vSPI_ResetCS>
		sbStateRdRg = false;
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <bSX1278ReadRegister+0x5c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
		return true;
 80021b8:	2301      	movs	r3, #1
	}
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000095 	.word	0x20000095
 80021c8:	40013000 	.word	0x40013000

080021cc <bSX1278WriteRegister>:

static bool bSX1278WriteRegister(uint8_t Register, uint8_t Data)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	71bb      	strb	r3, [r7, #6]
	if (sbStateWrRg == false)
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <bSX1278WriteRegister+0x60>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f083 0301 	eor.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00f      	beq.n	800220a <bSX1278WriteRegister+0x3e>
	{
		vSPI_SetCS(0u);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 fbec 	bl	80029c8 <vSPI_SetCS>
		SPI_SEND(Register | 0x80);
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <bSX1278WriteRegister+0x64>)
 80021fc:	f000 fb82 	bl	8002904 <HAL_SPI_SendChar>
		sbStateWrRg = true;
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <bSX1278WriteRegister+0x60>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
		return false;
 8002206:	2300      	movs	r3, #0
 8002208:	e00b      	b.n	8002222 <bSX1278WriteRegister+0x56>
	}
	else
	{
		SPI_SEND(Data);
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	4619      	mov	r1, r3
 800220e:	4808      	ldr	r0, [pc, #32]	; (8002230 <bSX1278WriteRegister+0x64>)
 8002210:	f000 fb78 	bl	8002904 <HAL_SPI_SendChar>
		vSPI_ResetCS(0u);
 8002214:	2000      	movs	r0, #0
 8002216:	f000 fbe9 	bl	80029ec <vSPI_ResetCS>
		sbStateWrRg = false;
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <bSX1278WriteRegister+0x60>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
		return true;
 8002220:	2301      	movs	r3, #1
	}
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000096 	.word	0x20000096
 8002230:	40013000 	.word	0x40013000

08002234 <bSX1278_SetFrequency>:



static bool bSX1278_SetFrequency(uint64_t frequency){
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	e9c7 0100 	strd	r0, r1, [r7]

	static uint8_t lu8_State = 0u;
	bool  bResponse;
	uint8_t u8_Data;
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800223e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002242:	f04f 0000 	mov.w	r0, #0
 8002246:	f04f 0100 	mov.w	r1, #0
 800224a:	04e1      	lsls	r1, r4, #19
 800224c:	ea41 3153 	orr.w	r1, r1, r3, lsr #13
 8002250:	04d8      	lsls	r0, r3, #19
 8002252:	4a32      	ldr	r2, [pc, #200]	; (800231c <bSX1278_SetFrequency+0xe8>)
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	f7fd ff7a 	bl	8000150 <__aeabi_uldivmod>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	e9c7 3404 	strd	r3, r4, [r7, #16]


	switch (lu8_State)
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <bSX1278_SetFrequency+0xec>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d01f      	beq.n	80022ac <bSX1278_SetFrequency+0x78>
 800226c:	2b02      	cmp	r3, #2
 800226e:	d039      	beq.n	80022e4 <bSX1278_SetFrequency+0xb0>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d14d      	bne.n	8002310 <bSX1278_SetFrequency+0xdc>
	{
	case 0:

		u8_Data = (uint8_t)(frf >> 16);
 8002274:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	0c0b      	lsrs	r3, r1, #16
 8002282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002286:	0c14      	lsrs	r4, r2, #16
 8002288:	73fb      	strb	r3, [r7, #15]
		bResponse = bSX1278WriteRegister(REG_FRF_MSB, u8_Data);
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	4619      	mov	r1, r3
 800228e:	2006      	movs	r0, #6
 8002290:	f7ff ff9c 	bl	80021cc <bSX1278WriteRegister>
 8002294:	4603      	mov	r3, r0
 8002296:	73bb      	strb	r3, [r7, #14]
		if (true == bResponse)
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d033      	beq.n	8002306 <bSX1278_SetFrequency+0xd2>
		{
			lu8_State++;
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <bSX1278_SetFrequency+0xec>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <bSX1278_SetFrequency+0xec>)
 80022a8:	701a      	strb	r2, [r3, #0]
		}

	break;
 80022aa:	e02c      	b.n	8002306 <bSX1278_SetFrequency+0xd2>

	case 1:

		u8_Data = (uint8_t)(frf >> 8);
 80022ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	0a0b      	lsrs	r3, r1, #8
 80022ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022be:	0a14      	lsrs	r4, r2, #8
 80022c0:	73fb      	strb	r3, [r7, #15]
		bResponse = bSX1278WriteRegister(REG_FRF_MID, u8_Data);
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	4619      	mov	r1, r3
 80022c6:	2007      	movs	r0, #7
 80022c8:	f7ff ff80 	bl	80021cc <bSX1278WriteRegister>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73bb      	strb	r3, [r7, #14]
		if (true == bResponse)
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <bSX1278_SetFrequency+0xd6>
		{
			lu8_State++;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <bSX1278_SetFrequency+0xec>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <bSX1278_SetFrequency+0xec>)
 80022e0:	701a      	strb	r2, [r3, #0]
		}

	break;
 80022e2:	e012      	b.n	800230a <bSX1278_SetFrequency+0xd6>

	case 2:

		u8_Data = (uint8_t)(frf >> 0);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	73fb      	strb	r3, [r7, #15]
		bResponse = bSX1278WriteRegister(REG_FRF_LSB, u8_Data);
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	4619      	mov	r1, r3
 80022ec:	2008      	movs	r0, #8
 80022ee:	f7ff ff6d 	bl	80021cc <bSX1278WriteRegister>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73bb      	strb	r3, [r7, #14]
		if (true == bResponse)
 80022f6:	7bbb      	ldrb	r3, [r7, #14]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <bSX1278_SetFrequency+0xda>
		{
			lu8_State = 0u;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <bSX1278_SetFrequency+0xec>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
			return true;
 8002302:	2301      	movs	r3, #1
 8002304:	e005      	b.n	8002312 <bSX1278_SetFrequency+0xde>
	break;
 8002306:	bf00      	nop
 8002308:	e002      	b.n	8002310 <bSX1278_SetFrequency+0xdc>
	break;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <bSX1278_SetFrequency+0xdc>
		}
		break;
 800230e:	bf00      	nop

	default:
		;
	  }
	return false;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	01e84800 	.word	0x01e84800
 8002320:	2000019e 	.word	0x2000019e

08002324 <bSX1278_DivideBuffer>:

static bool bSX1278_DivideBuffer(uint8_t TXBasAddr, uint8_t RXBasAdr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	4613      	mov	r3, r2
 8002332:	71bb      	strb	r3, [r7, #6]
	static uint8_t lu8_State = 0u;
	bool  bResponse;

	switch (lu8_State)
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <bSX1278_DivideBuffer+0x70>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <bSX1278_DivideBuffer+0x1e>
 800233c:	2b01      	cmp	r3, #1
 800233e:	d011      	beq.n	8002364 <bSX1278_DivideBuffer+0x40>
 8002340:	e022      	b.n	8002388 <bSX1278_DivideBuffer+0x64>
	{
	case 0:
		bResponse = bSX1278WriteRegister(REG_FIFO_TX_BASE_ADDR, TXBasAddr);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4619      	mov	r1, r3
 8002346:	200e      	movs	r0, #14
 8002348:	f7ff ff40 	bl	80021cc <bSX1278WriteRegister>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
			if (true == bResponse)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d015      	beq.n	8002382 <bSX1278_DivideBuffer+0x5e>
			{
				lu8_State++;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <bSX1278_DivideBuffer+0x70>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <bSX1278_DivideBuffer+0x70>)
 8002360:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002362:	e00e      	b.n	8002382 <bSX1278_DivideBuffer+0x5e>

	case 1:
		bResponse = bSX1278WriteRegister(REG_FIFO_RX_BASE_ADDR, RXBasAdr);
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	4619      	mov	r1, r3
 8002368:	200f      	movs	r0, #15
 800236a:	f7ff ff2f 	bl	80021cc <bSX1278WriteRegister>
 800236e:	4603      	mov	r3, r0
 8002370:	73fb      	strb	r3, [r7, #15]
			if (true == bResponse)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <bSX1278_DivideBuffer+0x62>
			{
				lu8_State = 0u;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <bSX1278_DivideBuffer+0x70>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
				return true;
 800237e:	2301      	movs	r3, #1
 8002380:	e003      	b.n	800238a <bSX1278_DivideBuffer+0x66>
		break;
 8002382:	bf00      	nop
 8002384:	e000      	b.n	8002388 <bSX1278_DivideBuffer+0x64>
			}
		break;
 8002386:	bf00      	nop

	default:
		;
	}

	return false;
 8002388:	2300      	movs	r3, #0

}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000019f 	.word	0x2000019f

08002398 <bSX1278_EnBoost>:


static bool bSX1278_EnBoost(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	static uint8_t lu8_State = 0u;
	static uint8_t lu8_response;
	bool  bResponse;

	switch (lu8_State)
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <bSX1278_EnBoost+0x74>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <bSX1278_EnBoost+0x14>
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d010      	beq.n	80023cc <bSX1278_EnBoost+0x34>
			}

	break;

	default:
		break;
 80023aa:	e029      	b.n	8002400 <bSX1278_EnBoost+0x68>
		bResponse = bSX1278ReadRegister(REG_LNA, &lu8_response);
 80023ac:	4918      	ldr	r1, [pc, #96]	; (8002410 <bSX1278_EnBoost+0x78>)
 80023ae:	200c      	movs	r0, #12
 80023b0:	f7ff feda 	bl	8002168 <bSX1278ReadRegister>
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
		if (true == bResponse)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01d      	beq.n	80023fa <bSX1278_EnBoost+0x62>
			lu8_State++;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <bSX1278_EnBoost+0x74>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <bSX1278_EnBoost+0x74>)
 80023c8:	701a      	strb	r2, [r3, #0]
		break;
 80023ca:	e016      	b.n	80023fa <bSX1278_EnBoost+0x62>
		lu8_response |= 0x03u;
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <bSX1278_EnBoost+0x78>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f043 0303 	orr.w	r3, r3, #3
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <bSX1278_EnBoost+0x78>)
 80023d8:	701a      	strb	r2, [r3, #0]
		bResponse = bSX1278WriteRegister(REG_LNA, lu8_response);
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <bSX1278_EnBoost+0x78>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	200c      	movs	r0, #12
 80023e2:	f7ff fef3 	bl	80021cc <bSX1278WriteRegister>
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
		if (true == bResponse)
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <bSX1278_EnBoost+0x66>
				lu8_State = 0u;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <bSX1278_EnBoost+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
				return true;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e003      	b.n	8002402 <bSX1278_EnBoost+0x6a>
		break;
 80023fa:	bf00      	nop
 80023fc:	e000      	b.n	8002400 <bSX1278_EnBoost+0x68>
	break;
 80023fe:	bf00      	nop
	}

	return false;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200001a0 	.word	0x200001a0
 8002410:	200001a1 	.word	0x200001a1

08002414 <bSX1278_SetExplicitHeaderMode>:


static bool bSX1278_SetExplicitHeaderMode(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0

	static uint8_t lu8_State = 0u;
	static uint8_t lu8_response;
	bool  bResponse;

	switch (lu8_State)
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <bSX1278_SetExplicitHeaderMode+0x74>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <bSX1278_SetExplicitHeaderMode+0x14>
 8002422:	2b01      	cmp	r3, #1
 8002424:	d010      	beq.n	8002448 <bSX1278_SetExplicitHeaderMode+0x34>
			}

	break;

	default:
		break;
 8002426:	e029      	b.n	800247c <bSX1278_SetExplicitHeaderMode+0x68>
		bResponse = bSX1278ReadRegister(REG_MODEM_CONFIG_1, &lu8_response);
 8002428:	4918      	ldr	r1, [pc, #96]	; (800248c <bSX1278_SetExplicitHeaderMode+0x78>)
 800242a:	201d      	movs	r0, #29
 800242c:	f7ff fe9c 	bl	8002168 <bSX1278ReadRegister>
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
		if (true == bResponse)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01d      	beq.n	8002476 <bSX1278_SetExplicitHeaderMode+0x62>
			lu8_State++;
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <bSX1278_SetExplicitHeaderMode+0x74>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <bSX1278_SetExplicitHeaderMode+0x74>)
 8002444:	701a      	strb	r2, [r3, #0]
		break;
 8002446:	e016      	b.n	8002476 <bSX1278_SetExplicitHeaderMode+0x62>
		lu8_response &= 0xFE;
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <bSX1278_SetExplicitHeaderMode+0x78>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <bSX1278_SetExplicitHeaderMode+0x78>)
 8002454:	701a      	strb	r2, [r3, #0]
		bResponse = bSX1278WriteRegister(REG_MODEM_CONFIG_1, lu8_response);
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <bSX1278_SetExplicitHeaderMode+0x78>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	201d      	movs	r0, #29
 800245e:	f7ff feb5 	bl	80021cc <bSX1278WriteRegister>
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
		if (true == bResponse)
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <bSX1278_SetExplicitHeaderMode+0x66>
				lu8_State = 0u;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <bSX1278_SetExplicitHeaderMode+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
				return true;
 8002472:	2301      	movs	r3, #1
 8002474:	e003      	b.n	800247e <bSX1278_SetExplicitHeaderMode+0x6a>
		break;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <bSX1278_SetExplicitHeaderMode+0x68>
	break;
 800247a:	bf00      	nop
	}

	return false;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200001a2 	.word	0x200001a2
 800248c:	200001a3 	.word	0x200001a3

08002490 <bSX1278_ResetFIFO>:

static bool bSX1278_ResetFIFO(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
	static uint8_t lu8_State = 0u;
	bool  bResponse;

	switch (lu8_State)
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <bSX1278_ResetFIFO+0x60>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <bSX1278_ResetFIFO+0x14>
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d010      	beq.n	80024c4 <bSX1278_ResetFIFO+0x34>
 80024a2:	e020      	b.n	80024e6 <bSX1278_ResetFIFO+0x56>
	{
	case 0:
		bResponse = bSX1278WriteRegister(REG_FIFO_ADDR_PTR, 0u);
 80024a4:	2100      	movs	r1, #0
 80024a6:	200d      	movs	r0, #13
 80024a8:	f7ff fe90 	bl	80021cc <bSX1278WriteRegister>
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
			if (true == bResponse)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <bSX1278_ResetFIFO+0x50>
			{
				lu8_State++;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <bSX1278_ResetFIFO+0x60>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <bSX1278_ResetFIFO+0x60>)
 80024c0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80024c2:	e00d      	b.n	80024e0 <bSX1278_ResetFIFO+0x50>

	case 1:
		bResponse = bSX1278WriteRegister(REG_PAYLOAD_LENGTH, 0u);
 80024c4:	2100      	movs	r1, #0
 80024c6:	2022      	movs	r0, #34	; 0x22
 80024c8:	f7ff fe80 	bl	80021cc <bSX1278WriteRegister>
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
			if (true == bResponse)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <bSX1278_ResetFIFO+0x54>
			{
				lu8_State = 0u;
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <bSX1278_ResetFIFO+0x60>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
				return true;
 80024dc:	2301      	movs	r3, #1
 80024de:	e003      	b.n	80024e8 <bSX1278_ResetFIFO+0x58>
		break;
 80024e0:	bf00      	nop
 80024e2:	e000      	b.n	80024e6 <bSX1278_ResetFIFO+0x56>
			}
		break;
 80024e4:	bf00      	nop

	default:
		;
	}

	return false;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200001a4 	.word	0x200001a4

080024f4 <bSX1278_SetTXPower>:

static bool bSX1278_SetTXPower(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
	static uint8_t lu8_State = 0u;
	bool  bResponse;

	switch (lu8_State)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <bSX1278_SetTXPower+0x88>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d013      	beq.n	800252a <bSX1278_SetTXPower+0x36>
 8002502:	2b02      	cmp	r3, #2
 8002504:	d021      	beq.n	800254a <bSX1278_SetTXPower+0x56>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d132      	bne.n	8002570 <bSX1278_SetTXPower+0x7c>
	{
	case 0:
		bResponse = bSX1278WriteRegister(REG_PA_DAC, 0x84u);
 800250a:	2184      	movs	r1, #132	; 0x84
 800250c:	204d      	movs	r0, #77	; 0x4d
 800250e:	f7ff fe5d 	bl	80021cc <bSX1278WriteRegister>
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
			if (true == bResponse)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d024      	beq.n	8002566 <bSX1278_SetTXPower+0x72>
			{
				lu8_State++;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <bSX1278_SetTXPower+0x88>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <bSX1278_SetTXPower+0x88>)
 8002526:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002528:	e01d      	b.n	8002566 <bSX1278_SetTXPower+0x72>

	case 1:
		bResponse = bSX1278WriteRegister(REG_OCP, 0x2Bu);
 800252a:	212b      	movs	r1, #43	; 0x2b
 800252c:	200b      	movs	r0, #11
 800252e:	f7ff fe4d 	bl	80021cc <bSX1278WriteRegister>
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
			if (true == bResponse)
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d016      	beq.n	800256a <bSX1278_SetTXPower+0x76>
			{
				lu8_State++;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <bSX1278_SetTXPower+0x88>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <bSX1278_SetTXPower+0x88>)
 8002546:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002548:	e00f      	b.n	800256a <bSX1278_SetTXPower+0x76>

	case 2:
		bResponse = bSX1278WriteRegister(REG_PA_CONFIG,  PA_BOOST | 15u);
 800254a:	218f      	movs	r1, #143	; 0x8f
 800254c:	2009      	movs	r0, #9
 800254e:	f7ff fe3d 	bl	80021cc <bSX1278WriteRegister>
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
			if (true == bResponse)
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <bSX1278_SetTXPower+0x7a>
			{
				lu8_State = 0u;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <bSX1278_SetTXPower+0x88>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
				return true;
 8002562:	2301      	movs	r3, #1
 8002564:	e005      	b.n	8002572 <bSX1278_SetTXPower+0x7e>
		break;
 8002566:	bf00      	nop
 8002568:	e002      	b.n	8002570 <bSX1278_SetTXPower+0x7c>
		break;
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <bSX1278_SetTXPower+0x7c>
			}
		break;
 800256e:	bf00      	nop

	default:
		;
	}

	return false;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200001a5 	.word	0x200001a5

08002580 <bSX1278_UploadTX_Buffer>:

static bool bSX1278_UploadTX_Buffer(uint8_t* Data, uint16_t Len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
	static uint16_t lu16_Len = 0u;
	uint16_t u16_CurPoz;
	bool  bResponse;


	switch (lu8_State)
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <bSX1278_UploadTX_Buffer+0xd8>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d013      	beq.n	80025bc <bSX1278_UploadTX_Buffer+0x3c>
 8002594:	2b02      	cmp	r3, #2
 8002596:	d03b      	beq.n	8002610 <bSX1278_UploadTX_Buffer+0x90>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d158      	bne.n	800264e <bSX1278_UploadTX_Buffer+0xce>
	{
		case 0:
			bResponse = bSX1278ReadRegister(REG_PAYLOAD_LENGTH, &lu8_PrevPoz);
 800259c:	492f      	ldr	r1, [pc, #188]	; (800265c <bSX1278_UploadTX_Buffer+0xdc>)
 800259e:	2022      	movs	r0, #34	; 0x22
 80025a0:	f7ff fde2 	bl	8002168 <bSX1278ReadRegister>
 80025a4:	4603      	mov	r3, r0
 80025a6:	737b      	strb	r3, [r7, #13]
				if (true == bResponse)
 80025a8:	7b7b      	ldrb	r3, [r7, #13]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d04a      	beq.n	8002644 <bSX1278_UploadTX_Buffer+0xc4>
				{
					lu8_State++;
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <bSX1278_UploadTX_Buffer+0xd8>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <bSX1278_UploadTX_Buffer+0xd8>)
 80025b8:	701a      	strb	r2, [r3, #0]
				}
			break;
 80025ba:	e043      	b.n	8002644 <bSX1278_UploadTX_Buffer+0xc4>

		case 1:

			bResponse = bSX1278WriteRegister(REG_FIFO, Data[lu16_Len]);
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff fdfe 	bl	80021cc <bSX1278WriteRegister>
 80025d0:	4603      	mov	r3, r0
 80025d2:	737b      	strb	r3, [r7, #13]
			if (true == bResponse)
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <bSX1278_UploadTX_Buffer+0xc8>
			{
				if ((Len > lu16_Len) && ((lu8_PrevPoz + lu16_Len ) < MAX_PKT_LENGTH))
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d90e      	bls.n	8002602 <bSX1278_UploadTX_Buffer+0x82>
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <bSX1278_UploadTX_Buffer+0xdc>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	2bfe      	cmp	r3, #254	; 0xfe
 80025f2:	dc06      	bgt.n	8002602 <bSX1278_UploadTX_Buffer+0x82>
				{
					lu16_Len++;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 80025fe:	801a      	strh	r2, [r3, #0]
			else
			{
				;//do nothing
			}

			break;
 8002600:	e022      	b.n	8002648 <bSX1278_UploadTX_Buffer+0xc8>
					lu8_State++;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <bSX1278_UploadTX_Buffer+0xd8>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <bSX1278_UploadTX_Buffer+0xd8>)
 800260c:	701a      	strb	r2, [r3, #0]
			break;
 800260e:	e01b      	b.n	8002648 <bSX1278_UploadTX_Buffer+0xc8>

		case 2:
			u16_CurPoz = lu16_Len + lu8_PrevPoz;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <bSX1278_UploadTX_Buffer+0xdc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b29a      	uxth	r2, r3
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	81fb      	strh	r3, [r7, #14]
			bResponse = bSX1278WriteRegister(REG_PAYLOAD_LENGTH, u16_CurPoz);
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	2022      	movs	r0, #34	; 0x22
 8002626:	f7ff fdd1 	bl	80021cc <bSX1278WriteRegister>
 800262a:	4603      	mov	r3, r0
 800262c:	737b      	strb	r3, [r7, #13]
			if (true == bResponse)
 800262e:	7b7b      	ldrb	r3, [r7, #13]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <bSX1278_UploadTX_Buffer+0xcc>
			{
				lu16_Len = 0u;
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <bSX1278_UploadTX_Buffer+0xe0>)
 8002636:	2200      	movs	r2, #0
 8002638:	801a      	strh	r2, [r3, #0]
				lu8_State = 0u;
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <bSX1278_UploadTX_Buffer+0xd8>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
				return true;
 8002640:	2301      	movs	r3, #1
 8002642:	e005      	b.n	8002650 <bSX1278_UploadTX_Buffer+0xd0>
			break;
 8002644:	bf00      	nop
 8002646:	e002      	b.n	800264e <bSX1278_UploadTX_Buffer+0xce>
			break;
 8002648:	bf00      	nop
 800264a:	e000      	b.n	800264e <bSX1278_UploadTX_Buffer+0xce>
			}
		break;
 800264c:	bf00      	nop

		default:
			;
	}

	return false;
 800264e:	2300      	movs	r3, #0

}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200001a6 	.word	0x200001a6
 800265c:	200001a7 	.word	0x200001a7
 8002660:	200001a8 	.word	0x200001a8

08002664 <vSX1278_SendBufer>:

void vSX1278_SendBufer(uint8_t* Data, uint16_t Len)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
	if (sDataBuffer.Len == 0u)
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <vSX1278_SendBufer+0x5c>)
 8002672:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11c      	bne.n	80026b4 <vSX1278_SendBufer+0x50>
	{
		uint16_t u16_Len = 0u;
 800267a:	2300      	movs	r3, #0
 800267c:	81fb      	strh	r3, [r7, #14]
		while ( (Len > u16_Len) && (u16_Len < MAX_PKT_LENGTH) )
 800267e:	e012      	b.n	80026a6 <vSX1278_SendBufer+0x42>
		{
			sDataBuffer.Data[u16_Len] = *Data ;
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	7811      	ldrb	r1, [r2, #0]
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <vSX1278_SendBufer+0x5c>)
 8002688:	54d1      	strb	r1, [r2, r3]
			sDataBuffer.Len++;
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <vSX1278_SendBufer+0x5c>)
 800268c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002690:	3301      	adds	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <vSX1278_SendBufer+0x5c>)
 8002696:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
			u16_Len++;
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	3301      	adds	r3, #1
 800269e:	81fb      	strh	r3, [r7, #14]
			Data++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3301      	adds	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
		while ( (Len > u16_Len) && (u16_Len < MAX_PKT_LENGTH) )
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d902      	bls.n	80026b4 <vSX1278_SendBufer+0x50>
 80026ae:	89fb      	ldrh	r3, [r7, #14]
 80026b0:	2bfe      	cmp	r3, #254	; 0xfe
 80026b2:	d9e5      	bls.n	8002680 <vSX1278_SendBufer+0x1c>
		}
	}
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000009c 	.word	0x2000009c

080026c4 <LL_SPI_Enable>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <LL_SPI_IsActiveFlag_RXNE+0x18>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d101      	bne.n	800271e <LL_SPI_IsActiveFlag_TXE+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <LL_SPI_IsActiveFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_IsActiveFlag_OVR
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d101      	bne.n	8002742 <LL_SPI_IsActiveFlag_OVR+0x18>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_SPI_IsActiveFlag_OVR+0x1a>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	605a      	str	r2, [r3, #4]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d101      	bne.n	8002784 <LL_SPI_IsEnabledIT_TXE+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_SPI_IsEnabledIT_TXE+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	b2db      	uxtb	r3, r3
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	330c      	adds	r3, #12
 80027b8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
	...

080027cc <vSPI_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSPI_Init(const void* configPtr())
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

	bSPIInit = true;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <vSPI_Init+0x34>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
	(void)configPtr();
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4798      	blx	r3
	memset(TX_Buffer.Buffer, 0, BUFFER_SIZE);
 80027de:	22ff      	movs	r2, #255	; 0xff
 80027e0:	2100      	movs	r1, #0
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <vSPI_Init+0x38>)
 80027e4:	f000 fc90 	bl	8003108 <memset>
	memset(RX_Buffer.Buffer, 0, BUFFER_SIZE);
 80027e8:	22ff      	movs	r2, #255	; 0xff
 80027ea:	2100      	movs	r1, #0
 80027ec:	4806      	ldr	r0, [pc, #24]	; (8002808 <vSPI_Init+0x3c>)
 80027ee:	f000 fc8b 	bl	8003108 <memset>
	vLL_SPI_Init();
 80027f2:	f000 f80b 	bl	800280c <vLL_SPI_Init>

}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200001aa 	.word	0x200001aa
 8002804:	200001ae 	.word	0x200001ae
 8002808:	200002b6 	.word	0x200002b6

0800280c <vLL_SPI_Init>:


}

static void vLL_SPI_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	//LL_SPI_EnableIT_TXE(SPI1);
	//LL_SPI_EnableIT_RXNE(SPI1);
	//LL_SPI_EnableIT_ERR(SPI1);
	LL_SPI_Enable(SPI1);
 8002810:	480e      	ldr	r0, [pc, #56]	; (800284c <vLL_SPI_Init+0x40>)
 8002812:	f7ff ff57 	bl	80026c4 <LL_SPI_Enable>

	//Enable clock for GPIOA
	RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <vLL_SPI_Init+0x44>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <vLL_SPI_Init+0x44>)
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	6193      	str	r3, [r2, #24]

	//Configured PIN
	RESET_CS();
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <vLL_SPI_Init+0x48>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <vLL_SPI_Init+0x48>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF0;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <vLL_SPI_Init+0x48>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a08      	ldr	r2, [pc, #32]	; (8002854 <vLL_SPI_Init+0x48>)
 8002834:	f023 030c 	bic.w	r3, r3, #12
 8002838:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <vLL_SPI_Init+0x48>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <vLL_SPI_Init+0x48>)
 8002840:	f043 0303 	orr.w	r3, r3, #3
 8002844:	6013      	str	r3, [r2, #0]
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40013000 	.word	0x40013000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010c00 	.word	0x40010c00

08002858 <vSPI_IT_CallBack>:


void vSPI_IT_CallBack(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0

	volatile uint8_t u8_Data = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]

	if (LL_SPI_IsActiveFlag_TXE(SPI1))
 8002862:	4824      	ldr	r0, [pc, #144]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 8002864:	f7ff ff4f 	bl	8002706 <LL_SPI_IsActiveFlag_TXE>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01a      	beq.n	80028a4 <vSPI_IT_CallBack+0x4c>
	{
		if (bCircularFIFOBuffer_getElement(&TX_Buffer, (uint8_t*) &u8_Data) == false )
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	4619      	mov	r1, r3
 8002872:	4821      	ldr	r0, [pc, #132]	; (80028f8 <vSPI_IT_CallBack+0xa0>)
 8002874:	f000 fbc3 	bl	8002ffe <bCircularFIFOBuffer_getElement>
 8002878:	4603      	mov	r3, r0
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <vSPI_IT_CallBack+0x40>
		{
			if (LL_SPI_IsEnabledIT_TXE(SPI1))
 8002884:	481b      	ldr	r0, [pc, #108]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 8002886:	f7ff ff71 	bl	800276c <LL_SPI_IsEnabledIT_TXE>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <vSPI_IT_CallBack+0x4c>
			{
				LL_SPI_DisableIT_TXE(SPI1);
 8002890:	4818      	ldr	r0, [pc, #96]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 8002892:	f7ff ff5c 	bl	800274e <LL_SPI_DisableIT_TXE>
 8002896:	e005      	b.n	80028a4 <vSPI_IT_CallBack+0x4c>
			}
		}
		else
		{
			LL_SPI_TransmitData8(SPI1, u8_Data);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	4815      	ldr	r0, [pc, #84]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028a0:	f7ff ff82 	bl	80027a8 <LL_SPI_TransmitData8>
		}



	}
	if (LL_SPI_IsActiveFlag_RXNE(SPI1))
 80028a4:	4813      	ldr	r0, [pc, #76]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028a6:	f7ff ff1c 	bl	80026e2 <LL_SPI_IsActiveFlag_RXNE>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d010      	beq.n	80028d2 <vSPI_IT_CallBack+0x7a>
	{
		if (vReceiveData == true)
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <vSPI_IT_CallBack+0xa4>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <vSPI_IT_CallBack+0x74>
		{
			bCircularFIFOBuffer_addElement(&RX_Buffer, LL_SPI_ReceiveData8(SPI1));
 80028ba:	480e      	ldr	r0, [pc, #56]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028bc:	f7ff ff68 	bl	8002790 <LL_SPI_ReceiveData8>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4619      	mov	r1, r3
 80028c4:	480e      	ldr	r0, [pc, #56]	; (8002900 <vSPI_IT_CallBack+0xa8>)
 80028c6:	f000 fbc8 	bl	800305a <bCircularFIFOBuffer_addElement>
 80028ca:	e002      	b.n	80028d2 <vSPI_IT_CallBack+0x7a>
		}
		else
		{
			LL_SPI_ReceiveData8(SPI1);
 80028cc:	4809      	ldr	r0, [pc, #36]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028ce:	f7ff ff5f 	bl	8002790 <LL_SPI_ReceiveData8>
		}

	}

	if(LL_SPI_IsActiveFlag_OVR(SPI1))
 80028d2:	4808      	ldr	r0, [pc, #32]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028d4:	f7ff ff29 	bl	800272a <LL_SPI_IsActiveFlag_OVR>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <vSPI_IT_CallBack+0x92>
	{

		LL_SPI_ReceiveData8(SPI1);
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028e0:	f7ff ff56 	bl	8002790 <LL_SPI_ReceiveData8>
		LL_SPI_IsActiveFlag_OVR(SPI1);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <vSPI_IT_CallBack+0x9c>)
 80028e6:	f7ff ff20 	bl	800272a <LL_SPI_IsActiveFlag_OVR>
	}
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40013000 	.word	0x40013000
 80028f8:	200001ac 	.word	0x200001ac
 80028fc:	200001ab 	.word	0x200001ab
 8002900:	200002b4 	.word	0x200002b4

08002904 <HAL_SPI_SendChar>:


TE_ERROR HAL_SPI_SendChar(TS_SPI* SPIx, uint8_t Data)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
	uint16_t u16_TimeOut;
	if (LL_SPI_IsActiveFlag_TXE(SPIx))
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fef8 	bl	8002706 <LL_SPI_IsActiveFlag_TXE>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01a      	beq.n	8002952 <HAL_SPI_SendChar+0x4e>
	{
		LL_SPI_TransmitData8(SPI1, Data);
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	4619      	mov	r1, r3
 8002920:	480e      	ldr	r0, [pc, #56]	; (800295c <HAL_SPI_SendChar+0x58>)
 8002922:	f7ff ff41 	bl	80027a8 <LL_SPI_TransmitData8>
		for (u16_TimeOut = 0u; u16_TimeOut <= 100u; u16_TimeOut++)
 8002926:	2300      	movs	r3, #0
 8002928:	81fb      	strh	r3, [r7, #14]
 800292a:	e00d      	b.n	8002948 <HAL_SPI_SendChar+0x44>
		{
			if (LL_SPI_IsActiveFlag_RXNE(SPIx))
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fed8 	bl	80026e2 <LL_SPI_IsActiveFlag_RXNE>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <HAL_SPI_SendChar+0x3e>
			{
				LL_SPI_ReceiveData8(SPIx);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <LL_SPI_ReceiveData8>
				return ERR_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e008      	b.n	8002954 <HAL_SPI_SendChar+0x50>
		for (u16_TimeOut = 0u; u16_TimeOut <= 100u; u16_TimeOut++)
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	3301      	adds	r3, #1
 8002946:	81fb      	strh	r3, [r7, #14]
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d9ee      	bls.n	800292c <HAL_SPI_SendChar+0x28>
			}
		}
		return ERR_TIMEOUT;
 800294e:	2304      	movs	r3, #4
 8002950:	e000      	b.n	8002954 <HAL_SPI_SendChar+0x50>
	}
	return ERR_BUFFER_FULL;
 8002952:	2302      	movs	r3, #2
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013000 	.word	0x40013000

08002960 <HAL_SPI_SendRecieveChar>:

TE_ERROR HAL_SPI_SendRecieveChar(TS_SPI* SPIx, uint8_t SData, uint8_t* RData)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	460b      	mov	r3, r1
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	72fb      	strb	r3, [r7, #11]
	uint16_t u16_TimeOut;
	if (LL_SPI_IsActiveFlag_TXE(SPIx))
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff fec9 	bl	8002706 <LL_SPI_IsActiveFlag_TXE>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01e      	beq.n	80029b8 <HAL_SPI_SendRecieveChar+0x58>
	{
		LL_SPI_TransmitData8(SPI1, SData);
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	4619      	mov	r1, r3
 800297e:	4811      	ldr	r0, [pc, #68]	; (80029c4 <HAL_SPI_SendRecieveChar+0x64>)
 8002980:	f7ff ff12 	bl	80027a8 <LL_SPI_TransmitData8>
		for (u16_TimeOut = 0u; u16_TimeOut <= 100u; u16_TimeOut++)
 8002984:	2300      	movs	r3, #0
 8002986:	82fb      	strh	r3, [r7, #22]
 8002988:	e011      	b.n	80029ae <HAL_SPI_SendRecieveChar+0x4e>
		{
			if (LL_SPI_IsActiveFlag_RXNE(SPIx))
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff fea9 	bl	80026e2 <LL_SPI_IsActiveFlag_RXNE>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_SPI_SendRecieveChar+0x48>
			{
				*RData = LL_SPI_ReceiveData8(SPIx);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff fefa 	bl	8002790 <LL_SPI_ReceiveData8>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	701a      	strb	r2, [r3, #0]
				return ERR_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e008      	b.n	80029ba <HAL_SPI_SendRecieveChar+0x5a>
		for (u16_TimeOut = 0u; u16_TimeOut <= 100u; u16_TimeOut++)
 80029a8:	8afb      	ldrh	r3, [r7, #22]
 80029aa:	3301      	adds	r3, #1
 80029ac:	82fb      	strh	r3, [r7, #22]
 80029ae:	8afb      	ldrh	r3, [r7, #22]
 80029b0:	2b64      	cmp	r3, #100	; 0x64
 80029b2:	d9ea      	bls.n	800298a <HAL_SPI_SendRecieveChar+0x2a>
			}
		}
		return ERR_TIMEOUT;
 80029b4:	2304      	movs	r3, #4
 80029b6:	e000      	b.n	80029ba <HAL_SPI_SendRecieveChar+0x5a>
	}
	return ERR_BUFFER_FULL;
 80029b8:	2302      	movs	r3, #2
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40013000 	.word	0x40013000

080029c8 <vSPI_SetCS>:
}



void vSPI_SetCS(uint8_t Chip)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	default:
		SET_CS();
	}

#else
	SET_CS();
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <vSPI_SetCS+0x20>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <vSPI_SetCS+0x20>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	60d3      	str	r3, [r2, #12]

#endif
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40010c00 	.word	0x40010c00

080029ec <vSPI_ResetCS>:

void vSPI_ResetCS(uint8_t Chip)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
	default:
		RESET_CS();
	}

#else
	RESET_CS();
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <vSPI_ResetCS+0x20>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <vSPI_ResetCS+0x20>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	60d3      	str	r3, [r2, #12]
#endif
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40010c00 	.word	0x40010c00

08002a10 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	b2db      	uxtb	r3, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	605a      	str	r2, [r3, #4]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
	...

08002aa0 <vUSART_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_Init(const void* configPtr())
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

	bUSARTInit = true;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <vUSART_Init+0x34>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
	(void)configPtr();
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4798      	blx	r3
	memset(TX_Buffer.Buffer, 0, BUFFER_SIZE);
 8002ab2:	22ff      	movs	r2, #255	; 0xff
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <vUSART_Init+0x38>)
 8002ab8:	f000 fb26 	bl	8003108 <memset>
	memset(RX_Buffer.Buffer, 0, BUFFER_SIZE);
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4806      	ldr	r0, [pc, #24]	; (8002adc <vUSART_Init+0x3c>)
 8002ac2:	f000 fb21 	bl	8003108 <memset>
	vLL_USART_Init();
 8002ac6:	f000 f85f 	bl	8002b88 <vLL_USART_Init>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200003ba 	.word	0x200003ba
 8002ad8:	200003be 	.word	0x200003be
 8002adc:	200004c6 	.word	0x200004c6

08002ae0 <vUSART_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_MainFunction(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0

	//uint16_t u16_len;
	//uint8_t tmp_Buffer[BUFFER_SIZE];

	if ( bUSARTInit == false)
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <vUSART_MainFunction+0x18>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f083 0301 	eor.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
		//}

	}


}
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200003ba 	.word	0x200003ba

08002afc <vUSART_ITCallBack>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_ITCallBack(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
	volatile uint8_t u8_Data = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]

	if ((USART1->SR & USART_SR_RXNE_Msk) == USART_SR_RXNE)
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <vUSART_ITCallBack+0x7c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d107      	bne.n	8002b22 <vUSART_ITCallBack+0x26>
	{
		bCircularFIFOBuffer_addElement(&RX_Buffer, LL_USART_ReceiveData8(USART1));
 8002b12:	4819      	ldr	r0, [pc, #100]	; (8002b78 <vUSART_ITCallBack+0x7c>)
 8002b14:	f7ff ffa9 	bl	8002a6a <LL_USART_ReceiveData8>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4817      	ldr	r0, [pc, #92]	; (8002b7c <vUSART_ITCallBack+0x80>)
 8002b1e:	f000 fa9c 	bl	800305a <bCircularFIFOBuffer_addElement>
	}


	if ((USART1->SR & USART_SR_TC_Msk) == USART_SR_TC)
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <vUSART_ITCallBack+0x7c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d120      	bne.n	8002b70 <vUSART_ITCallBack+0x74>
	{
		if (bCircularFIFOBuffer_getElement(&TX_Buffer, (uint8_t*) &u8_Data) == false )
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	4619      	mov	r1, r3
 8002b32:	4813      	ldr	r0, [pc, #76]	; (8002b80 <vUSART_ITCallBack+0x84>)
 8002b34:	f000 fa63 	bl	8002ffe <bCircularFIFOBuffer_getElement>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00f      	beq.n	8002b64 <vUSART_ITCallBack+0x68>
		{
			if ((USART1->CR1 & USART_CR1_TCIE_Msk) == USART_CR1_TCIE)
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <vUSART_ITCallBack+0x7c>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d10f      	bne.n	8002b70 <vUSART_ITCallBack+0x74>
			{
				LL_USART_DisableIT_TC(USART1);
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <vUSART_ITCallBack+0x7c>)
 8002b52:	f7ff ff7b 	bl	8002a4c <LL_USART_DisableIT_TC>
				RESET_RTS();
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <vUSART_ITCallBack+0x88>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <vUSART_ITCallBack+0x88>)
 8002b5c:	f023 0320 	bic.w	r3, r3, #32
 8002b60:	60d3      	str	r3, [r2, #12]
		}
	}



}
 8002b62:	e005      	b.n	8002b70 <vUSART_ITCallBack+0x74>
			LL_USART_TransmitData8(USART1, u8_Data);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4803      	ldr	r0, [pc, #12]	; (8002b78 <vUSART_ITCallBack+0x7c>)
 8002b6c:	f7ff ff89 	bl	8002a82 <LL_USART_TransmitData8>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	200004c4 	.word	0x200004c4
 8002b80:	200003bc 	.word	0x200003bc
 8002b84:	40010c00 	.word	0x40010c00

08002b88 <vLL_USART_Init>:

static void vLL_USART_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART1);
 8002b8c:	480b      	ldr	r0, [pc, #44]	; (8002bbc <vLL_USART_Init+0x34>)
 8002b8e:	f7ff ff3f 	bl	8002a10 <LL_USART_EnableIT_RXNE>

	//Enable clock for GPIOA
	RCC->APB2ENR |=  RCC_APB2ENR_IOPBEN;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <vLL_USART_Init+0x38>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <vLL_USART_Init+0x38>)
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	6193      	str	r3, [r2, #24]

	//Configured PIN
	GPIOB->CRL &= ~GPIO_CRL_CNF5;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <vLL_USART_Init+0x3c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <vLL_USART_Init+0x3c>)
 8002ba4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ba8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE5;
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <vLL_USART_Init+0x3c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <vLL_USART_Init+0x3c>)
 8002bb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002bb4:	6013      	str	r3, [r2, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40010c00 	.word	0x40010c00

08002bc8 <HAL_USART_GetChar>:



TE_ERROR HAL_USART_GetChar(TS_USART* USARTx, uint8_t* Data)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	uint8_t u8_Data = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
	if (bCircularFIFOBuffer_getElement(&RX_Buffer, (uint8_t*) &u8_Data) == true )
 8002bd6:	f107 030f 	add.w	r3, r7, #15
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4807      	ldr	r0, [pc, #28]	; (8002bfc <HAL_USART_GetChar+0x34>)
 8002bde:	f000 fa0e 	bl	8002ffe <bCircularFIFOBuffer_getElement>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_USART_GetChar+0x2a>
	{
		*Data = u8_Data;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	701a      	strb	r2, [r3, #0]
		return ERR_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_USART_GetChar+0x2c>
	}
	else
	{
		return ERR_NOK;
 8002bf2:	2301      	movs	r3, #1
	}


}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200004c4 	.word	0x200004c4

08002c00 <HAL_USART_SendChar>:


TE_ERROR HAL_USART_SendChar(TS_USART* USARTx, uint8_t Data)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]



	if (bCircularFIFOBuffer_addElement(&TX_Buffer, Data) == true )
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <HAL_USART_SendChar+0x48>)
 8002c12:	f000 fa22 	bl	800305a <bCircularFIFOBuffer_addElement>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_USART_SendChar+0x3e>
	{
		if ( (USART1->CR1 & USART_CR1_TCIE_Msk) != USART_CR1_TCIE )
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_USART_SendChar+0x4c>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d008      	beq.n	8002c3a <HAL_USART_SendChar+0x3a>
		{
			SET_RTS();
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_USART_SendChar+0x50>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_USART_SendChar+0x50>)
 8002c2e:	f043 0320 	orr.w	r3, r3, #32
 8002c32:	60d3      	str	r3, [r2, #12]
			LL_USART_EnableIT_TC(USART1);
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <HAL_USART_SendChar+0x4c>)
 8002c36:	f7ff fefa 	bl	8002a2e <LL_USART_EnableIT_TC>
		}
		return ERR_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_USART_SendChar+0x40>
	}
	else
	{
		return ERR_BUFFER_FULL;
 8002c3e:	2302      	movs	r3, #2
	}

}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200003bc 	.word	0x200003bc
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40010c00 	.word	0x40010c00

08002c54 <HAL_USART_SendBuffer>:



TE_ERROR HAL_USART_SendBuffer(TS_USART* USARTx, uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_Len = 0u;
 8002c64:	2300      	movs	r3, #0
 8002c66:	82fb      	strh	r3, [r7, #22]
	*RecievedLen = 0u;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	801a      	strh	r2, [r3, #0]

	while (Len > u16_Len)
 8002c6e:	e017      	b.n	8002ca0 <HAL_USART_SendBuffer+0x4c>
	{
		if (ERR_OK == HAL_USART_SendChar( USART1, *Data))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	480f      	ldr	r0, [pc, #60]	; (8002cb4 <HAL_USART_SendBuffer+0x60>)
 8002c78:	f7ff ffc2 	bl	8002c00 <HAL_USART_SendChar>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_USART_SendBuffer+0x48>
		{
			Data++;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
			u16_Len++;
 8002c88:	8afb      	ldrh	r3, [r7, #22]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	82fb      	strh	r3, [r7, #22]
			(*RecievedLen)++;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	801a      	strh	r2, [r3, #0]
 8002c9a:	e001      	b.n	8002ca0 <HAL_USART_SendBuffer+0x4c>
		}
		else
		{
			return ERR_BUFFER_FULL;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e004      	b.n	8002caa <HAL_USART_SendBuffer+0x56>
	while (Len > u16_Len)
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	8afb      	ldrh	r3, [r7, #22]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d8e3      	bhi.n	8002c70 <HAL_USART_SendBuffer+0x1c>
		}
	}

	return ERR_OK;
 8002ca8:	2300      	movs	r3, #0

}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40013800 	.word	0x40013800

08002cb8 <HAL_USART_ReceiveBuffer>:

TE_ERROR HAL_USART_ReceiveBuffer(TS_USART* USARTx, uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]


	uint16_t u16_Len = 0u;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	82fb      	strh	r3, [r7, #22]
	*RecievedLen = 0u;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]

	while (Len > u16_Len)
 8002cd2:	e015      	b.n	8002d00 <HAL_USART_ReceiveBuffer+0x48>
	{
		if (ERR_OK == HAL_USART_GetChar( USART1, Data))
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	480f      	ldr	r0, [pc, #60]	; (8002d14 <HAL_USART_ReceiveBuffer+0x5c>)
 8002cd8:	f7ff ff76 	bl	8002bc8 <HAL_USART_GetChar>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_USART_ReceiveBuffer+0x44>
		{
			Data++;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
			u16_Len++;
 8002ce8:	8afb      	ldrh	r3, [r7, #22]
 8002cea:	3301      	adds	r3, #1
 8002cec:	82fb      	strh	r3, [r7, #22]
			(*RecievedLen)++;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	e001      	b.n	8002d00 <HAL_USART_ReceiveBuffer+0x48>
		}
		else
		{
			return ERR_BUFFER_EMPTY;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e004      	b.n	8002d0a <HAL_USART_ReceiveBuffer+0x52>
	while (Len > u16_Len)
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	8afb      	ldrh	r3, [r7, #22]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8e5      	bhi.n	8002cd4 <HAL_USART_ReceiveBuffer+0x1c>
		}
	}

	return ERR_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800

08002d18 <__NVIC_SetPriority>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	; (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	; (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	d301      	bcc.n	8002d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00f      	b.n	8002da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <SysTick_Config+0x40>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f7ff ffc2 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <SysTick_Config+0x40>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <SysTick_Config+0x40>)
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <vInit>:
 * @brief:
 * Parameters:
 * Return:
 */
void vInit(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0

#ifdef USE_SYS
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002db6:	463b      	mov	r3, r7
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fcd1 	bl	8001760 <LL_RCC_GetSystemClocksFreq>
	vSys_Init((void*)SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <vInit+0x54>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ffcf 	bl	8002d6c <SysTick_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f81d 	bl	8002e10 <vSys_Init>
#endif

#ifdef USE_LED
	vLed_Init((void*)MX_GPIO_Init);
#else
	MX_GPIO_Init();
 8002dd6:	f7fd fc59 	bl	800068c <MX_GPIO_Init>
#endif


#ifdef USE_USART
	vUSART_Init((void*)MX_USART1_UART_Init);
 8002dda:	480b      	ldr	r0, [pc, #44]	; (8002e08 <vInit+0x58>)
 8002ddc:	f7ff fe60 	bl	8002aa0 <vUSART_Init>
#endif

#ifdef USE_SPI
	vSPI_Init((void*)MX_SPI1_Init);
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <vInit+0x5c>)
 8002de2:	f7ff fcf3 	bl	80027cc <vSPI_Init>
#endif

#ifdef USE_SX1278
	vSX1278_Init(NULL_PTR);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe ff7e 	bl	8001ce8 <vSX1278_Init>
#endif


#ifdef USE_THEAPP
	vTheApp_Init(NULL_PTR);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fe ff05 	bl	8001bfc <vTheApp_Init>
#endif

#ifdef USE_SCHM
	vSchM_Init(NULL_PTR);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f000 f832 	bl	8002e5c <vSchM_Init>
	vSchM_MainFunction();
 8002df8:	f000 f83e 	bl	8002e78 <vSchM_MainFunction>
	while (1)
		;
#endif


}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	10624dd3 	.word	0x10624dd3
 8002e08:	0800114d 	.word	0x0800114d
 8002e0c:	08000d35 	.word	0x08000d35

08002e10 <vSys_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSys_Init(const void* configPtr)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

	bSysInit = true;
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <vSys_Init+0x18>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
	(void)configPtr;
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	200005ca 	.word	0x200005ca

08002e2c <u32Sys_GetRunTime>:
 * @brief:
 * Parameters:
 * Return:
 */
uint32_t u32Sys_GetRunTime(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
	return u32_RunTime;
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <u32Sys_GetRunTime+0x10>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	200005cc 	.word	0x200005cc

08002e40 <vSysRunModeTick>:
 * @brief:
 * Parameters:
 * Return:
 */
volatile void vSysRunModeTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

	u32_RunTime++;
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <vSysRunModeTick+0x18>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <vSysRunModeTick+0x18>)
 8002e4c:	6013      	str	r3, [r2, #0]

}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200005cc 	.word	0x200005cc

08002e5c <vSchM_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_Init(const void* configPtr)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	bSchmInit = true;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <vSchM_Init+0x18>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]

	(void)configPtr;
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	200005d0 	.word	0x200005d0

08002e78 <vSchM_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_MainFunction(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0

	while (1)
	{
		if (bSchmInit == false)
 8002e7c:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <vSchM_MainFunction+0x90>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d13c      	bne.n	8002f04 <vSchM_MainFunction+0x8c>
		{
			return;
		}
		else
		{
			vSchM_IdleTask();
 8002e8a:	f000 f841 	bl	8002f10 <vSchM_IdleTask>
			if (Sys_GetRunTime() ^ u32_ScheduleCycle_Sample)
 8002e8e:	f7ff ffcd 	bl	8002e2c <u32Sys_GetRunTime>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d0ef      	beq.n	8002e7c <vSchM_MainFunction+0x4>
			{

				u32_ScheduleCycle_Sample = Sys_GetRunTime();
 8002e9c:	f7ff ffc6 	bl	8002e2c <u32Sys_GetRunTime>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002ea4:	601a      	str	r2, [r3, #0]
				vSchM_BaseRecurrenceTask();
 8002ea6:	f000 f839 	bl	8002f1c <vSchM_BaseRecurrenceTask>
				if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_2)
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <vSchM_MainFunction+0x44>
				{
					vSchM_BaseRecurrenceTaskDiv2();
 8002eb6:	f000 f83b 	bl	8002f30 <vSchM_BaseRecurrenceTaskDiv2>
 8002eba:	e7df      	b.n	8002e7c <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_4)
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <vSchM_MainFunction+0x56>
				{
					vSchM_BaseRecurrenceTaskDiv4();
 8002ec8:	f000 f838 	bl	8002f3c <vSchM_BaseRecurrenceTaskDiv4>
 8002ecc:	e7d6      	b.n	8002e7c <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_8)
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <vSchM_MainFunction+0x68>
				{
					vSchM_BaseRecurrenceTaskDiv8();
 8002eda:	f000 f835 	bl	8002f48 <vSchM_BaseRecurrenceTaskDiv8>
 8002ede:	e7cd      	b.n	8002e7c <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_16)
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <vSchM_MainFunction+0x7a>
				{
					vSchM_BaseRecurrenceTaskDiv16();
 8002eec:	f000 f832 	bl	8002f54 <vSchM_BaseRecurrenceTaskDiv16>
 8002ef0:	e7c4      	b.n	8002e7c <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_32)
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <vSchM_MainFunction+0x94>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0be      	beq.n	8002e7c <vSchM_MainFunction+0x4>
				{
					vSchM_BaseRecurrenceTaskDiv32();
 8002efe:	f000 f82f 	bl	8002f60 <vSchM_BaseRecurrenceTaskDiv32>
		if (bSchmInit == false)
 8002f02:	e7bb      	b.n	8002e7c <vSchM_MainFunction+0x4>
			return;
 8002f04:	bf00      	nop
					;
				}
			}
		}
	}
}
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200005d0 	.word	0x200005d0
 8002f0c:	200005d4 	.word	0x200005d4

08002f10 <vSchM_IdleTask>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_IdleTask(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <vSchM_BaseRecurrenceTask>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTask	(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	vTheApp_MainFunction();
 8002f20:	f7fe fe80 	bl	8001c24 <vTheApp_MainFunction>
	vLed_MainFunction();
 8002f24:	f7fe fec6 	bl	8001cb4 <vLed_MainFunction>
	vSX1278_MainFunction();
 8002f28:	f7fe ff06 	bl	8001d38 <vSX1278_MainFunction>

}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <vSchM_BaseRecurrenceTaskDiv2>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv2(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0


}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <vSchM_BaseRecurrenceTaskDiv4>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv4(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0


}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <vSchM_BaseRecurrenceTaskDiv8>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv8(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0


}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <vSchM_BaseRecurrenceTaskDiv16>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv16(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0


}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <vSchM_BaseRecurrenceTaskDiv32>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv32(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0

	vUSART_MainFunction();
 8002f64:	f7ff fdbc 	bl	8002ae0 <vUSART_MainFunction>


}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <CircularFIFOBuffer_isFull>:
static uint16_t CircularFIFOBuffer_getNumberOfElements(TS_CircularFIFOBuffer* rg_Buffer);




static uint8_t CircularFIFOBuffer_isFull(TS_CircularFIFOBuffer* rg_Buffer){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if (CircularFIFOBuffer_getNumberOfElements(rg_Buffer) == BUFFER_SIZE){
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f81e 	bl	8002fb6 <CircularFIFOBuffer_getNumberOfElements>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2bff      	cmp	r3, #255	; 0xff
 8002f7e:	d101      	bne.n	8002f84 <CircularFIFOBuffer_isFull+0x18>
    return true ;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <CircularFIFOBuffer_isFull+0x1a>
  }else{
    return false;
 8002f84:	2300      	movs	r3, #0
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <CircularFIFOBuffer_isEmpty>:

static uint8_t CircularFIFOBuffer_isEmpty(TS_CircularFIFOBuffer* rg_Buffer){
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]

  if ( rg_Buffer->next == rg_Buffer->first ){
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d101      	bne.n	8002faa <CircularFIFOBuffer_isEmpty+0x1c>
    return true ;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <CircularFIFOBuffer_isEmpty+0x1e>
  }else{
    return false;
 8002faa:	2300      	movs	r3, #0
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <CircularFIFOBuffer_getNumberOfElements>:



static uint16_t CircularFIFOBuffer_getNumberOfElements(TS_CircularFIFOBuffer* rg_Buffer){
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  if (rg_Buffer->next >= rg_Buffer->first){
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d308      	bcc.n	8002fe0 <CircularFIFOBuffer_getNumberOfElements+0x2a>
    return (uint16_t) (rg_Buffer->next - rg_Buffer->first);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	e009      	b.n	8002ff4 <CircularFIFOBuffer_getNumberOfElements+0x3e>
  }else{
    return (uint16_t) (BUFFER_SIZE - rg_Buffer->next + rg_Buffer->first);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	33ff      	adds	r3, #255	; 0xff
 8002ff2:	b29b      	uxth	r3, r3
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <bCircularFIFOBuffer_getElement>:
//***********************************************************************************************


// Get the first element from the FIFO queue
bool bCircularFIFOBuffer_getElement(TS_CircularFIFOBuffer* rg_Buffer, uint8_t* theElement)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
	  if ( CircularFIFOBuffer_isEmpty(rg_Buffer) != true){
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ffc0 	bl	8002f8e <CircularFIFOBuffer_isEmpty>
 800300e:	4603      	mov	r3, r0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d01b      	beq.n	800304c <bCircularFIFOBuffer_getElement+0x4e>
	    *theElement = rg_Buffer->Buffer[rg_Buffer->first];
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	789a      	ldrb	r2, [r3, #2]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	701a      	strb	r2, [r3, #0]
	    if ( rg_Buffer->first != BUFFER_SIZE ){
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d008      	beq.n	8003042 <bCircularFIFOBuffer_getElement+0x44>
	      rg_Buffer->first++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003036:	3301      	adds	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8003040:	e006      	b.n	8003050 <bCircularFIFOBuffer_getElement+0x52>
	    }else{
	      rg_Buffer->first = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800304a:	e001      	b.n	8003050 <bCircularFIFOBuffer_getElement+0x52>
	    }
	  }else{
	    return false;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <bCircularFIFOBuffer_getElement+0x54>
	  }

	  return true;// Return !0 always if it is not empty
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <bCircularFIFOBuffer_addElement>:

// Add an element to the FIFO queue
bool bCircularFIFOBuffer_addElement(TS_CircularFIFOBuffer* rg_Buffer, uint8_t data)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
	  if (CircularFIFOBuffer_isFull(rg_Buffer) != true){
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff80 	bl	8002f6c <CircularFIFOBuffer_isFull>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d01b      	beq.n	80030aa <bCircularFIFOBuffer_addElement+0x50>
	     rg_Buffer->Buffer[rg_Buffer->next] = data;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	709a      	strb	r2, [r3, #2]
	     if ( rg_Buffer->next != BUFFER_SIZE ){
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8003088:	2bff      	cmp	r3, #255	; 0xff
 800308a:	d008      	beq.n	800309e <bCircularFIFOBuffer_addElement+0x44>
	      rg_Buffer->next++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8003092:	3301      	adds	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800309c:	e003      	b.n	80030a6 <bCircularFIFOBuffer_addElement+0x4c>
	     }else{
	      rg_Buffer->next = 0;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	     }
	    return true;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <bCircularFIFOBuffer_addElement+0x52>
	  }else{
	    return false;
 80030aa:	2300      	movs	r3, #0
	  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <__errno>:
 80030b4:	4b01      	ldr	r3, [pc, #4]	; (80030bc <__errno+0x8>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000008 	.word	0x20000008

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	2500      	movs	r5, #0
 80030c4:	4e0c      	ldr	r6, [pc, #48]	; (80030f8 <__libc_init_array+0x38>)
 80030c6:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c8:	1ba4      	subs	r4, r4, r6
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	42a5      	cmp	r5, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	f000 fc34 	bl	800393c <_init>
 80030d4:	2500      	movs	r5, #0
 80030d6:	4e0a      	ldr	r6, [pc, #40]	; (8003100 <__libc_init_array+0x40>)
 80030d8:	4c0a      	ldr	r4, [pc, #40]	; (8003104 <__libc_init_array+0x44>)
 80030da:	1ba4      	subs	r4, r4, r6
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	42a5      	cmp	r5, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e8:	4798      	blx	r3
 80030ea:	3501      	adds	r5, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f2:	4798      	blx	r3
 80030f4:	3501      	adds	r5, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	080039c4 	.word	0x080039c4
 80030fc:	080039c4 	.word	0x080039c4
 8003100:	080039c4 	.word	0x080039c4
 8003104:	080039c8 	.word	0x080039c8

08003108 <memset>:
 8003108:	4603      	mov	r3, r0
 800310a:	4402      	add	r2, r0
 800310c:	4293      	cmp	r3, r2
 800310e:	d100      	bne.n	8003112 <memset+0xa>
 8003110:	4770      	bx	lr
 8003112:	f803 1b01 	strb.w	r1, [r3], #1
 8003116:	e7f9      	b.n	800310c <memset+0x4>

08003118 <siprintf>:
 8003118:	b40e      	push	{r1, r2, r3}
 800311a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800311e:	b500      	push	{lr}
 8003120:	b09c      	sub	sp, #112	; 0x70
 8003122:	ab1d      	add	r3, sp, #116	; 0x74
 8003124:	9002      	str	r0, [sp, #8]
 8003126:	9006      	str	r0, [sp, #24]
 8003128:	9107      	str	r1, [sp, #28]
 800312a:	9104      	str	r1, [sp, #16]
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <siprintf+0x38>)
 800312e:	4909      	ldr	r1, [pc, #36]	; (8003154 <siprintf+0x3c>)
 8003130:	f853 2b04 	ldr.w	r2, [r3], #4
 8003134:	9105      	str	r1, [sp, #20]
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	a902      	add	r1, sp, #8
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	f000 f866 	bl	800320c <_svfiprintf_r>
 8003140:	2200      	movs	r2, #0
 8003142:	9b02      	ldr	r3, [sp, #8]
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	b01c      	add	sp, #112	; 0x70
 8003148:	f85d eb04 	ldr.w	lr, [sp], #4
 800314c:	b003      	add	sp, #12
 800314e:	4770      	bx	lr
 8003150:	20000008 	.word	0x20000008
 8003154:	ffff0208 	.word	0xffff0208

08003158 <__ssputs_r>:
 8003158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315c:	688e      	ldr	r6, [r1, #8]
 800315e:	4682      	mov	sl, r0
 8003160:	429e      	cmp	r6, r3
 8003162:	460c      	mov	r4, r1
 8003164:	4690      	mov	r8, r2
 8003166:	4699      	mov	r9, r3
 8003168:	d837      	bhi.n	80031da <__ssputs_r+0x82>
 800316a:	898a      	ldrh	r2, [r1, #12]
 800316c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003170:	d031      	beq.n	80031d6 <__ssputs_r+0x7e>
 8003172:	2302      	movs	r3, #2
 8003174:	6825      	ldr	r5, [r4, #0]
 8003176:	6909      	ldr	r1, [r1, #16]
 8003178:	1a6f      	subs	r7, r5, r1
 800317a:	6965      	ldr	r5, [r4, #20]
 800317c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003180:	fb95 f5f3 	sdiv	r5, r5, r3
 8003184:	f109 0301 	add.w	r3, r9, #1
 8003188:	443b      	add	r3, r7
 800318a:	429d      	cmp	r5, r3
 800318c:	bf38      	it	cc
 800318e:	461d      	movcc	r5, r3
 8003190:	0553      	lsls	r3, r2, #21
 8003192:	d530      	bpl.n	80031f6 <__ssputs_r+0x9e>
 8003194:	4629      	mov	r1, r5
 8003196:	f000 fb37 	bl	8003808 <_malloc_r>
 800319a:	4606      	mov	r6, r0
 800319c:	b950      	cbnz	r0, 80031b4 <__ssputs_r+0x5c>
 800319e:	230c      	movs	r3, #12
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f8ca 3000 	str.w	r3, [sl]
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b4:	463a      	mov	r2, r7
 80031b6:	6921      	ldr	r1, [r4, #16]
 80031b8:	f000 fab6 	bl	8003728 <memcpy>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	6126      	str	r6, [r4, #16]
 80031ca:	443e      	add	r6, r7
 80031cc:	6026      	str	r6, [r4, #0]
 80031ce:	464e      	mov	r6, r9
 80031d0:	6165      	str	r5, [r4, #20]
 80031d2:	1bed      	subs	r5, r5, r7
 80031d4:	60a5      	str	r5, [r4, #8]
 80031d6:	454e      	cmp	r6, r9
 80031d8:	d900      	bls.n	80031dc <__ssputs_r+0x84>
 80031da:	464e      	mov	r6, r9
 80031dc:	4632      	mov	r2, r6
 80031de:	4641      	mov	r1, r8
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	f000 faac 	bl	800373e <memmove>
 80031e6:	68a3      	ldr	r3, [r4, #8]
 80031e8:	2000      	movs	r0, #0
 80031ea:	1b9b      	subs	r3, r3, r6
 80031ec:	60a3      	str	r3, [r4, #8]
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	441e      	add	r6, r3
 80031f2:	6026      	str	r6, [r4, #0]
 80031f4:	e7dc      	b.n	80031b0 <__ssputs_r+0x58>
 80031f6:	462a      	mov	r2, r5
 80031f8:	f000 fb60 	bl	80038bc <_realloc_r>
 80031fc:	4606      	mov	r6, r0
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1e2      	bne.n	80031c8 <__ssputs_r+0x70>
 8003202:	6921      	ldr	r1, [r4, #16]
 8003204:	4650      	mov	r0, sl
 8003206:	f000 fab3 	bl	8003770 <_free_r>
 800320a:	e7c8      	b.n	800319e <__ssputs_r+0x46>

0800320c <_svfiprintf_r>:
 800320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003210:	461d      	mov	r5, r3
 8003212:	898b      	ldrh	r3, [r1, #12]
 8003214:	b09d      	sub	sp, #116	; 0x74
 8003216:	061f      	lsls	r7, r3, #24
 8003218:	4680      	mov	r8, r0
 800321a:	460c      	mov	r4, r1
 800321c:	4616      	mov	r6, r2
 800321e:	d50f      	bpl.n	8003240 <_svfiprintf_r+0x34>
 8003220:	690b      	ldr	r3, [r1, #16]
 8003222:	b96b      	cbnz	r3, 8003240 <_svfiprintf_r+0x34>
 8003224:	2140      	movs	r1, #64	; 0x40
 8003226:	f000 faef 	bl	8003808 <_malloc_r>
 800322a:	6020      	str	r0, [r4, #0]
 800322c:	6120      	str	r0, [r4, #16]
 800322e:	b928      	cbnz	r0, 800323c <_svfiprintf_r+0x30>
 8003230:	230c      	movs	r3, #12
 8003232:	f8c8 3000 	str.w	r3, [r8]
 8003236:	f04f 30ff 	mov.w	r0, #4294967295
 800323a:	e0c8      	b.n	80033ce <_svfiprintf_r+0x1c2>
 800323c:	2340      	movs	r3, #64	; 0x40
 800323e:	6163      	str	r3, [r4, #20]
 8003240:	2300      	movs	r3, #0
 8003242:	9309      	str	r3, [sp, #36]	; 0x24
 8003244:	2320      	movs	r3, #32
 8003246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800324a:	2330      	movs	r3, #48	; 0x30
 800324c:	f04f 0b01 	mov.w	fp, #1
 8003250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003254:	9503      	str	r5, [sp, #12]
 8003256:	4637      	mov	r7, r6
 8003258:	463d      	mov	r5, r7
 800325a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800325e:	b10b      	cbz	r3, 8003264 <_svfiprintf_r+0x58>
 8003260:	2b25      	cmp	r3, #37	; 0x25
 8003262:	d13e      	bne.n	80032e2 <_svfiprintf_r+0xd6>
 8003264:	ebb7 0a06 	subs.w	sl, r7, r6
 8003268:	d00b      	beq.n	8003282 <_svfiprintf_r+0x76>
 800326a:	4653      	mov	r3, sl
 800326c:	4632      	mov	r2, r6
 800326e:	4621      	mov	r1, r4
 8003270:	4640      	mov	r0, r8
 8003272:	f7ff ff71 	bl	8003158 <__ssputs_r>
 8003276:	3001      	adds	r0, #1
 8003278:	f000 80a4 	beq.w	80033c4 <_svfiprintf_r+0x1b8>
 800327c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800327e:	4453      	add	r3, sl
 8003280:	9309      	str	r3, [sp, #36]	; 0x24
 8003282:	783b      	ldrb	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 809d 	beq.w	80033c4 <_svfiprintf_r+0x1b8>
 800328a:	2300      	movs	r3, #0
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003294:	9304      	str	r3, [sp, #16]
 8003296:	9307      	str	r3, [sp, #28]
 8003298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800329c:	931a      	str	r3, [sp, #104]	; 0x68
 800329e:	462f      	mov	r7, r5
 80032a0:	2205      	movs	r2, #5
 80032a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80032a6:	4850      	ldr	r0, [pc, #320]	; (80033e8 <_svfiprintf_r+0x1dc>)
 80032a8:	f000 fa30 	bl	800370c <memchr>
 80032ac:	9b04      	ldr	r3, [sp, #16]
 80032ae:	b9d0      	cbnz	r0, 80032e6 <_svfiprintf_r+0xda>
 80032b0:	06d9      	lsls	r1, r3, #27
 80032b2:	bf44      	itt	mi
 80032b4:	2220      	movmi	r2, #32
 80032b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ba:	071a      	lsls	r2, r3, #28
 80032bc:	bf44      	itt	mi
 80032be:	222b      	movmi	r2, #43	; 0x2b
 80032c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032c4:	782a      	ldrb	r2, [r5, #0]
 80032c6:	2a2a      	cmp	r2, #42	; 0x2a
 80032c8:	d015      	beq.n	80032f6 <_svfiprintf_r+0xea>
 80032ca:	462f      	mov	r7, r5
 80032cc:	2000      	movs	r0, #0
 80032ce:	250a      	movs	r5, #10
 80032d0:	9a07      	ldr	r2, [sp, #28]
 80032d2:	4639      	mov	r1, r7
 80032d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032d8:	3b30      	subs	r3, #48	; 0x30
 80032da:	2b09      	cmp	r3, #9
 80032dc:	d94d      	bls.n	800337a <_svfiprintf_r+0x16e>
 80032de:	b1b8      	cbz	r0, 8003310 <_svfiprintf_r+0x104>
 80032e0:	e00f      	b.n	8003302 <_svfiprintf_r+0xf6>
 80032e2:	462f      	mov	r7, r5
 80032e4:	e7b8      	b.n	8003258 <_svfiprintf_r+0x4c>
 80032e6:	4a40      	ldr	r2, [pc, #256]	; (80033e8 <_svfiprintf_r+0x1dc>)
 80032e8:	463d      	mov	r5, r7
 80032ea:	1a80      	subs	r0, r0, r2
 80032ec:	fa0b f000 	lsl.w	r0, fp, r0
 80032f0:	4318      	orrs	r0, r3
 80032f2:	9004      	str	r0, [sp, #16]
 80032f4:	e7d3      	b.n	800329e <_svfiprintf_r+0x92>
 80032f6:	9a03      	ldr	r2, [sp, #12]
 80032f8:	1d11      	adds	r1, r2, #4
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	9103      	str	r1, [sp, #12]
 80032fe:	2a00      	cmp	r2, #0
 8003300:	db01      	blt.n	8003306 <_svfiprintf_r+0xfa>
 8003302:	9207      	str	r2, [sp, #28]
 8003304:	e004      	b.n	8003310 <_svfiprintf_r+0x104>
 8003306:	4252      	negs	r2, r2
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	9207      	str	r2, [sp, #28]
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	783b      	ldrb	r3, [r7, #0]
 8003312:	2b2e      	cmp	r3, #46	; 0x2e
 8003314:	d10c      	bne.n	8003330 <_svfiprintf_r+0x124>
 8003316:	787b      	ldrb	r3, [r7, #1]
 8003318:	2b2a      	cmp	r3, #42	; 0x2a
 800331a:	d133      	bne.n	8003384 <_svfiprintf_r+0x178>
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	3702      	adds	r7, #2
 8003320:	1d1a      	adds	r2, r3, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	9203      	str	r2, [sp, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfb8      	it	lt
 800332a:	f04f 33ff 	movlt.w	r3, #4294967295
 800332e:	9305      	str	r3, [sp, #20]
 8003330:	4d2e      	ldr	r5, [pc, #184]	; (80033ec <_svfiprintf_r+0x1e0>)
 8003332:	2203      	movs	r2, #3
 8003334:	7839      	ldrb	r1, [r7, #0]
 8003336:	4628      	mov	r0, r5
 8003338:	f000 f9e8 	bl	800370c <memchr>
 800333c:	b138      	cbz	r0, 800334e <_svfiprintf_r+0x142>
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	1b40      	subs	r0, r0, r5
 8003342:	fa03 f000 	lsl.w	r0, r3, r0
 8003346:	9b04      	ldr	r3, [sp, #16]
 8003348:	3701      	adds	r7, #1
 800334a:	4303      	orrs	r3, r0
 800334c:	9304      	str	r3, [sp, #16]
 800334e:	7839      	ldrb	r1, [r7, #0]
 8003350:	2206      	movs	r2, #6
 8003352:	4827      	ldr	r0, [pc, #156]	; (80033f0 <_svfiprintf_r+0x1e4>)
 8003354:	1c7e      	adds	r6, r7, #1
 8003356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800335a:	f000 f9d7 	bl	800370c <memchr>
 800335e:	2800      	cmp	r0, #0
 8003360:	d038      	beq.n	80033d4 <_svfiprintf_r+0x1c8>
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <_svfiprintf_r+0x1e8>)
 8003364:	bb13      	cbnz	r3, 80033ac <_svfiprintf_r+0x1a0>
 8003366:	9b03      	ldr	r3, [sp, #12]
 8003368:	3307      	adds	r3, #7
 800336a:	f023 0307 	bic.w	r3, r3, #7
 800336e:	3308      	adds	r3, #8
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003374:	444b      	add	r3, r9
 8003376:	9309      	str	r3, [sp, #36]	; 0x24
 8003378:	e76d      	b.n	8003256 <_svfiprintf_r+0x4a>
 800337a:	fb05 3202 	mla	r2, r5, r2, r3
 800337e:	2001      	movs	r0, #1
 8003380:	460f      	mov	r7, r1
 8003382:	e7a6      	b.n	80032d2 <_svfiprintf_r+0xc6>
 8003384:	2300      	movs	r3, #0
 8003386:	250a      	movs	r5, #10
 8003388:	4619      	mov	r1, r3
 800338a:	3701      	adds	r7, #1
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	4638      	mov	r0, r7
 8003390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003394:	3a30      	subs	r2, #48	; 0x30
 8003396:	2a09      	cmp	r2, #9
 8003398:	d903      	bls.n	80033a2 <_svfiprintf_r+0x196>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0c8      	beq.n	8003330 <_svfiprintf_r+0x124>
 800339e:	9105      	str	r1, [sp, #20]
 80033a0:	e7c6      	b.n	8003330 <_svfiprintf_r+0x124>
 80033a2:	fb05 2101 	mla	r1, r5, r1, r2
 80033a6:	2301      	movs	r3, #1
 80033a8:	4607      	mov	r7, r0
 80033aa:	e7f0      	b.n	800338e <_svfiprintf_r+0x182>
 80033ac:	ab03      	add	r3, sp, #12
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4622      	mov	r2, r4
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <_svfiprintf_r+0x1ec>)
 80033b4:	a904      	add	r1, sp, #16
 80033b6:	4640      	mov	r0, r8
 80033b8:	f3af 8000 	nop.w
 80033bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033c0:	4681      	mov	r9, r0
 80033c2:	d1d6      	bne.n	8003372 <_svfiprintf_r+0x166>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	065b      	lsls	r3, r3, #25
 80033c8:	f53f af35 	bmi.w	8003236 <_svfiprintf_r+0x2a>
 80033cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ce:	b01d      	add	sp, #116	; 0x74
 80033d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d4:	ab03      	add	r3, sp, #12
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4622      	mov	r2, r4
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <_svfiprintf_r+0x1ec>)
 80033dc:	a904      	add	r1, sp, #16
 80033de:	4640      	mov	r0, r8
 80033e0:	f000 f882 	bl	80034e8 <_printf_i>
 80033e4:	e7ea      	b.n	80033bc <_svfiprintf_r+0x1b0>
 80033e6:	bf00      	nop
 80033e8:	08003988 	.word	0x08003988
 80033ec:	0800398e 	.word	0x0800398e
 80033f0:	08003992 	.word	0x08003992
 80033f4:	00000000 	.word	0x00000000
 80033f8:	08003159 	.word	0x08003159

080033fc <_printf_common>:
 80033fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003400:	4691      	mov	r9, r2
 8003402:	461f      	mov	r7, r3
 8003404:	688a      	ldr	r2, [r1, #8]
 8003406:	690b      	ldr	r3, [r1, #16]
 8003408:	4606      	mov	r6, r0
 800340a:	4293      	cmp	r3, r2
 800340c:	bfb8      	it	lt
 800340e:	4613      	movlt	r3, r2
 8003410:	f8c9 3000 	str.w	r3, [r9]
 8003414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003418:	460c      	mov	r4, r1
 800341a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800341e:	b112      	cbz	r2, 8003426 <_printf_common+0x2a>
 8003420:	3301      	adds	r3, #1
 8003422:	f8c9 3000 	str.w	r3, [r9]
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	0699      	lsls	r1, r3, #26
 800342a:	bf42      	ittt	mi
 800342c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003430:	3302      	addmi	r3, #2
 8003432:	f8c9 3000 	strmi.w	r3, [r9]
 8003436:	6825      	ldr	r5, [r4, #0]
 8003438:	f015 0506 	ands.w	r5, r5, #6
 800343c:	d107      	bne.n	800344e <_printf_common+0x52>
 800343e:	f104 0a19 	add.w	sl, r4, #25
 8003442:	68e3      	ldr	r3, [r4, #12]
 8003444:	f8d9 2000 	ldr.w	r2, [r9]
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	42ab      	cmp	r3, r5
 800344c:	dc29      	bgt.n	80034a2 <_printf_common+0xa6>
 800344e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	3300      	adds	r3, #0
 8003456:	bf18      	it	ne
 8003458:	2301      	movne	r3, #1
 800345a:	0692      	lsls	r2, r2, #26
 800345c:	d42e      	bmi.n	80034bc <_printf_common+0xc0>
 800345e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003462:	4639      	mov	r1, r7
 8003464:	4630      	mov	r0, r6
 8003466:	47c0      	blx	r8
 8003468:	3001      	adds	r0, #1
 800346a:	d021      	beq.n	80034b0 <_printf_common+0xb4>
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	68e5      	ldr	r5, [r4, #12]
 8003470:	f003 0306 	and.w	r3, r3, #6
 8003474:	2b04      	cmp	r3, #4
 8003476:	bf18      	it	ne
 8003478:	2500      	movne	r5, #0
 800347a:	f8d9 2000 	ldr.w	r2, [r9]
 800347e:	f04f 0900 	mov.w	r9, #0
 8003482:	bf08      	it	eq
 8003484:	1aad      	subeq	r5, r5, r2
 8003486:	68a3      	ldr	r3, [r4, #8]
 8003488:	6922      	ldr	r2, [r4, #16]
 800348a:	bf08      	it	eq
 800348c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003490:	4293      	cmp	r3, r2
 8003492:	bfc4      	itt	gt
 8003494:	1a9b      	subgt	r3, r3, r2
 8003496:	18ed      	addgt	r5, r5, r3
 8003498:	341a      	adds	r4, #26
 800349a:	454d      	cmp	r5, r9
 800349c:	d11a      	bne.n	80034d4 <_printf_common+0xd8>
 800349e:	2000      	movs	r0, #0
 80034a0:	e008      	b.n	80034b4 <_printf_common+0xb8>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4652      	mov	r2, sl
 80034a6:	4639      	mov	r1, r7
 80034a8:	4630      	mov	r0, r6
 80034aa:	47c0      	blx	r8
 80034ac:	3001      	adds	r0, #1
 80034ae:	d103      	bne.n	80034b8 <_printf_common+0xbc>
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b8:	3501      	adds	r5, #1
 80034ba:	e7c2      	b.n	8003442 <_printf_common+0x46>
 80034bc:	2030      	movs	r0, #48	; 0x30
 80034be:	18e1      	adds	r1, r4, r3
 80034c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ca:	4422      	add	r2, r4
 80034cc:	3302      	adds	r3, #2
 80034ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034d2:	e7c4      	b.n	800345e <_printf_common+0x62>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4622      	mov	r2, r4
 80034d8:	4639      	mov	r1, r7
 80034da:	4630      	mov	r0, r6
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d0e6      	beq.n	80034b0 <_printf_common+0xb4>
 80034e2:	f109 0901 	add.w	r9, r9, #1
 80034e6:	e7d8      	b.n	800349a <_printf_common+0x9e>

080034e8 <_printf_i>:
 80034e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80034f0:	460c      	mov	r4, r1
 80034f2:	7e09      	ldrb	r1, [r1, #24]
 80034f4:	b085      	sub	sp, #20
 80034f6:	296e      	cmp	r1, #110	; 0x6e
 80034f8:	4617      	mov	r7, r2
 80034fa:	4606      	mov	r6, r0
 80034fc:	4698      	mov	r8, r3
 80034fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003500:	f000 80b3 	beq.w	800366a <_printf_i+0x182>
 8003504:	d822      	bhi.n	800354c <_printf_i+0x64>
 8003506:	2963      	cmp	r1, #99	; 0x63
 8003508:	d036      	beq.n	8003578 <_printf_i+0x90>
 800350a:	d80a      	bhi.n	8003522 <_printf_i+0x3a>
 800350c:	2900      	cmp	r1, #0
 800350e:	f000 80b9 	beq.w	8003684 <_printf_i+0x19c>
 8003512:	2958      	cmp	r1, #88	; 0x58
 8003514:	f000 8083 	beq.w	800361e <_printf_i+0x136>
 8003518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800351c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003520:	e032      	b.n	8003588 <_printf_i+0xa0>
 8003522:	2964      	cmp	r1, #100	; 0x64
 8003524:	d001      	beq.n	800352a <_printf_i+0x42>
 8003526:	2969      	cmp	r1, #105	; 0x69
 8003528:	d1f6      	bne.n	8003518 <_printf_i+0x30>
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	0605      	lsls	r5, r0, #24
 8003530:	f103 0104 	add.w	r1, r3, #4
 8003534:	d52a      	bpl.n	800358c <_printf_i+0xa4>
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da03      	bge.n	8003546 <_printf_i+0x5e>
 800353e:	222d      	movs	r2, #45	; 0x2d
 8003540:	425b      	negs	r3, r3
 8003542:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003546:	486f      	ldr	r0, [pc, #444]	; (8003704 <_printf_i+0x21c>)
 8003548:	220a      	movs	r2, #10
 800354a:	e039      	b.n	80035c0 <_printf_i+0xd8>
 800354c:	2973      	cmp	r1, #115	; 0x73
 800354e:	f000 809d 	beq.w	800368c <_printf_i+0x1a4>
 8003552:	d808      	bhi.n	8003566 <_printf_i+0x7e>
 8003554:	296f      	cmp	r1, #111	; 0x6f
 8003556:	d020      	beq.n	800359a <_printf_i+0xb2>
 8003558:	2970      	cmp	r1, #112	; 0x70
 800355a:	d1dd      	bne.n	8003518 <_printf_i+0x30>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	e003      	b.n	800356e <_printf_i+0x86>
 8003566:	2975      	cmp	r1, #117	; 0x75
 8003568:	d017      	beq.n	800359a <_printf_i+0xb2>
 800356a:	2978      	cmp	r1, #120	; 0x78
 800356c:	d1d4      	bne.n	8003518 <_printf_i+0x30>
 800356e:	2378      	movs	r3, #120	; 0x78
 8003570:	4865      	ldr	r0, [pc, #404]	; (8003708 <_printf_i+0x220>)
 8003572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003576:	e055      	b.n	8003624 <_printf_i+0x13c>
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357e:	1d19      	adds	r1, r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6011      	str	r1, [r2, #0]
 8003584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003588:	2301      	movs	r3, #1
 800358a:	e08c      	b.n	80036a6 <_printf_i+0x1be>
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003592:	6011      	str	r1, [r2, #0]
 8003594:	bf18      	it	ne
 8003596:	b21b      	sxthne	r3, r3
 8003598:	e7cf      	b.n	800353a <_printf_i+0x52>
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	6825      	ldr	r5, [r4, #0]
 800359e:	1d18      	adds	r0, r3, #4
 80035a0:	6010      	str	r0, [r2, #0]
 80035a2:	0628      	lsls	r0, r5, #24
 80035a4:	d501      	bpl.n	80035aa <_printf_i+0xc2>
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e002      	b.n	80035b0 <_printf_i+0xc8>
 80035aa:	0668      	lsls	r0, r5, #25
 80035ac:	d5fb      	bpl.n	80035a6 <_printf_i+0xbe>
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	296f      	cmp	r1, #111	; 0x6f
 80035b2:	bf14      	ite	ne
 80035b4:	220a      	movne	r2, #10
 80035b6:	2208      	moveq	r2, #8
 80035b8:	4852      	ldr	r0, [pc, #328]	; (8003704 <_printf_i+0x21c>)
 80035ba:	2100      	movs	r1, #0
 80035bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035c0:	6865      	ldr	r5, [r4, #4]
 80035c2:	2d00      	cmp	r5, #0
 80035c4:	60a5      	str	r5, [r4, #8]
 80035c6:	f2c0 8095 	blt.w	80036f4 <_printf_i+0x20c>
 80035ca:	6821      	ldr	r1, [r4, #0]
 80035cc:	f021 0104 	bic.w	r1, r1, #4
 80035d0:	6021      	str	r1, [r4, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d13d      	bne.n	8003652 <_printf_i+0x16a>
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	f040 808e 	bne.w	80036f8 <_printf_i+0x210>
 80035dc:	4665      	mov	r5, ip
 80035de:	2a08      	cmp	r2, #8
 80035e0:	d10b      	bne.n	80035fa <_printf_i+0x112>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	07db      	lsls	r3, r3, #31
 80035e6:	d508      	bpl.n	80035fa <_printf_i+0x112>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	6862      	ldr	r2, [r4, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bfde      	ittt	le
 80035f0:	2330      	movle	r3, #48	; 0x30
 80035f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035fa:	ebac 0305 	sub.w	r3, ip, r5
 80035fe:	6123      	str	r3, [r4, #16]
 8003600:	f8cd 8000 	str.w	r8, [sp]
 8003604:	463b      	mov	r3, r7
 8003606:	aa03      	add	r2, sp, #12
 8003608:	4621      	mov	r1, r4
 800360a:	4630      	mov	r0, r6
 800360c:	f7ff fef6 	bl	80033fc <_printf_common>
 8003610:	3001      	adds	r0, #1
 8003612:	d14d      	bne.n	80036b0 <_printf_i+0x1c8>
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	b005      	add	sp, #20
 800361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800361e:	4839      	ldr	r0, [pc, #228]	; (8003704 <_printf_i+0x21c>)
 8003620:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	6821      	ldr	r1, [r4, #0]
 8003628:	1d1d      	adds	r5, r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6015      	str	r5, [r2, #0]
 800362e:	060a      	lsls	r2, r1, #24
 8003630:	d50b      	bpl.n	800364a <_printf_i+0x162>
 8003632:	07ca      	lsls	r2, r1, #31
 8003634:	bf44      	itt	mi
 8003636:	f041 0120 	orrmi.w	r1, r1, #32
 800363a:	6021      	strmi	r1, [r4, #0]
 800363c:	b91b      	cbnz	r3, 8003646 <_printf_i+0x15e>
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	f022 0220 	bic.w	r2, r2, #32
 8003644:	6022      	str	r2, [r4, #0]
 8003646:	2210      	movs	r2, #16
 8003648:	e7b7      	b.n	80035ba <_printf_i+0xd2>
 800364a:	064d      	lsls	r5, r1, #25
 800364c:	bf48      	it	mi
 800364e:	b29b      	uxthmi	r3, r3
 8003650:	e7ef      	b.n	8003632 <_printf_i+0x14a>
 8003652:	4665      	mov	r5, ip
 8003654:	fbb3 f1f2 	udiv	r1, r3, r2
 8003658:	fb02 3311 	mls	r3, r2, r1, r3
 800365c:	5cc3      	ldrb	r3, [r0, r3]
 800365e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003662:	460b      	mov	r3, r1
 8003664:	2900      	cmp	r1, #0
 8003666:	d1f5      	bne.n	8003654 <_printf_i+0x16c>
 8003668:	e7b9      	b.n	80035de <_printf_i+0xf6>
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	6825      	ldr	r5, [r4, #0]
 800366e:	1d18      	adds	r0, r3, #4
 8003670:	6961      	ldr	r1, [r4, #20]
 8003672:	6010      	str	r0, [r2, #0]
 8003674:	0628      	lsls	r0, r5, #24
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	d501      	bpl.n	800367e <_printf_i+0x196>
 800367a:	6019      	str	r1, [r3, #0]
 800367c:	e002      	b.n	8003684 <_printf_i+0x19c>
 800367e:	066a      	lsls	r2, r5, #25
 8003680:	d5fb      	bpl.n	800367a <_printf_i+0x192>
 8003682:	8019      	strh	r1, [r3, #0]
 8003684:	2300      	movs	r3, #0
 8003686:	4665      	mov	r5, ip
 8003688:	6123      	str	r3, [r4, #16]
 800368a:	e7b9      	b.n	8003600 <_printf_i+0x118>
 800368c:	6813      	ldr	r3, [r2, #0]
 800368e:	1d19      	adds	r1, r3, #4
 8003690:	6011      	str	r1, [r2, #0]
 8003692:	681d      	ldr	r5, [r3, #0]
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	2100      	movs	r1, #0
 8003698:	4628      	mov	r0, r5
 800369a:	f000 f837 	bl	800370c <memchr>
 800369e:	b108      	cbz	r0, 80036a4 <_printf_i+0x1bc>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	6060      	str	r0, [r4, #4]
 80036a4:	6863      	ldr	r3, [r4, #4]
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	2300      	movs	r3, #0
 80036aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ae:	e7a7      	b.n	8003600 <_printf_i+0x118>
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	462a      	mov	r2, r5
 80036b4:	4639      	mov	r1, r7
 80036b6:	4630      	mov	r0, r6
 80036b8:	47c0      	blx	r8
 80036ba:	3001      	adds	r0, #1
 80036bc:	d0aa      	beq.n	8003614 <_printf_i+0x12c>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	079b      	lsls	r3, r3, #30
 80036c2:	d413      	bmi.n	80036ec <_printf_i+0x204>
 80036c4:	68e0      	ldr	r0, [r4, #12]
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	4298      	cmp	r0, r3
 80036ca:	bfb8      	it	lt
 80036cc:	4618      	movlt	r0, r3
 80036ce:	e7a3      	b.n	8003618 <_printf_i+0x130>
 80036d0:	2301      	movs	r3, #1
 80036d2:	464a      	mov	r2, r9
 80036d4:	4639      	mov	r1, r7
 80036d6:	4630      	mov	r0, r6
 80036d8:	47c0      	blx	r8
 80036da:	3001      	adds	r0, #1
 80036dc:	d09a      	beq.n	8003614 <_printf_i+0x12c>
 80036de:	3501      	adds	r5, #1
 80036e0:	68e3      	ldr	r3, [r4, #12]
 80036e2:	9a03      	ldr	r2, [sp, #12]
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	42ab      	cmp	r3, r5
 80036e8:	dcf2      	bgt.n	80036d0 <_printf_i+0x1e8>
 80036ea:	e7eb      	b.n	80036c4 <_printf_i+0x1dc>
 80036ec:	2500      	movs	r5, #0
 80036ee:	f104 0919 	add.w	r9, r4, #25
 80036f2:	e7f5      	b.n	80036e0 <_printf_i+0x1f8>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ac      	bne.n	8003652 <_printf_i+0x16a>
 80036f8:	7803      	ldrb	r3, [r0, #0]
 80036fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003702:	e76c      	b.n	80035de <_printf_i+0xf6>
 8003704:	08003999 	.word	0x08003999
 8003708:	080039aa 	.word	0x080039aa

0800370c <memchr>:
 800370c:	b510      	push	{r4, lr}
 800370e:	b2c9      	uxtb	r1, r1
 8003710:	4402      	add	r2, r0
 8003712:	4290      	cmp	r0, r2
 8003714:	4603      	mov	r3, r0
 8003716:	d101      	bne.n	800371c <memchr+0x10>
 8003718:	2300      	movs	r3, #0
 800371a:	e003      	b.n	8003724 <memchr+0x18>
 800371c:	781c      	ldrb	r4, [r3, #0]
 800371e:	3001      	adds	r0, #1
 8003720:	428c      	cmp	r4, r1
 8003722:	d1f6      	bne.n	8003712 <memchr+0x6>
 8003724:	4618      	mov	r0, r3
 8003726:	bd10      	pop	{r4, pc}

08003728 <memcpy>:
 8003728:	b510      	push	{r4, lr}
 800372a:	1e43      	subs	r3, r0, #1
 800372c:	440a      	add	r2, r1
 800372e:	4291      	cmp	r1, r2
 8003730:	d100      	bne.n	8003734 <memcpy+0xc>
 8003732:	bd10      	pop	{r4, pc}
 8003734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800373c:	e7f7      	b.n	800372e <memcpy+0x6>

0800373e <memmove>:
 800373e:	4288      	cmp	r0, r1
 8003740:	b510      	push	{r4, lr}
 8003742:	eb01 0302 	add.w	r3, r1, r2
 8003746:	d807      	bhi.n	8003758 <memmove+0x1a>
 8003748:	1e42      	subs	r2, r0, #1
 800374a:	4299      	cmp	r1, r3
 800374c:	d00a      	beq.n	8003764 <memmove+0x26>
 800374e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003752:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003756:	e7f8      	b.n	800374a <memmove+0xc>
 8003758:	4283      	cmp	r3, r0
 800375a:	d9f5      	bls.n	8003748 <memmove+0xa>
 800375c:	1881      	adds	r1, r0, r2
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	42d3      	cmn	r3, r2
 8003762:	d100      	bne.n	8003766 <memmove+0x28>
 8003764:	bd10      	pop	{r4, pc}
 8003766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800376a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800376e:	e7f7      	b.n	8003760 <memmove+0x22>

08003770 <_free_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4605      	mov	r5, r0
 8003774:	2900      	cmp	r1, #0
 8003776:	d043      	beq.n	8003800 <_free_r+0x90>
 8003778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377c:	1f0c      	subs	r4, r1, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfb8      	it	lt
 8003782:	18e4      	addlt	r4, r4, r3
 8003784:	f000 f8d0 	bl	8003928 <__malloc_lock>
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <_free_r+0x94>)
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	4610      	mov	r0, r2
 800378e:	b933      	cbnz	r3, 800379e <_free_r+0x2e>
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6014      	str	r4, [r2, #0]
 8003794:	4628      	mov	r0, r5
 8003796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379a:	f000 b8c6 	b.w	800392a <__malloc_unlock>
 800379e:	42a3      	cmp	r3, r4
 80037a0:	d90b      	bls.n	80037ba <_free_r+0x4a>
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	1862      	adds	r2, r4, r1
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bf01      	itttt	eq
 80037aa:	681a      	ldreq	r2, [r3, #0]
 80037ac:	685b      	ldreq	r3, [r3, #4]
 80037ae:	1852      	addeq	r2, r2, r1
 80037b0:	6022      	streq	r2, [r4, #0]
 80037b2:	6063      	str	r3, [r4, #4]
 80037b4:	6004      	str	r4, [r0, #0]
 80037b6:	e7ed      	b.n	8003794 <_free_r+0x24>
 80037b8:	4613      	mov	r3, r2
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	b10a      	cbz	r2, 80037c2 <_free_r+0x52>
 80037be:	42a2      	cmp	r2, r4
 80037c0:	d9fa      	bls.n	80037b8 <_free_r+0x48>
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	1858      	adds	r0, r3, r1
 80037c6:	42a0      	cmp	r0, r4
 80037c8:	d10b      	bne.n	80037e2 <_free_r+0x72>
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	4401      	add	r1, r0
 80037ce:	1858      	adds	r0, r3, r1
 80037d0:	4282      	cmp	r2, r0
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	d1de      	bne.n	8003794 <_free_r+0x24>
 80037d6:	6810      	ldr	r0, [r2, #0]
 80037d8:	6852      	ldr	r2, [r2, #4]
 80037da:	4401      	add	r1, r0
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	e7d8      	b.n	8003794 <_free_r+0x24>
 80037e2:	d902      	bls.n	80037ea <_free_r+0x7a>
 80037e4:	230c      	movs	r3, #12
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	e7d4      	b.n	8003794 <_free_r+0x24>
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	1821      	adds	r1, r4, r0
 80037ee:	428a      	cmp	r2, r1
 80037f0:	bf01      	itttt	eq
 80037f2:	6811      	ldreq	r1, [r2, #0]
 80037f4:	6852      	ldreq	r2, [r2, #4]
 80037f6:	1809      	addeq	r1, r1, r0
 80037f8:	6021      	streq	r1, [r4, #0]
 80037fa:	6062      	str	r2, [r4, #4]
 80037fc:	605c      	str	r4, [r3, #4]
 80037fe:	e7c9      	b.n	8003794 <_free_r+0x24>
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	200005d8 	.word	0x200005d8

08003808 <_malloc_r>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	1ccd      	adds	r5, r1, #3
 800380c:	f025 0503 	bic.w	r5, r5, #3
 8003810:	3508      	adds	r5, #8
 8003812:	2d0c      	cmp	r5, #12
 8003814:	bf38      	it	cc
 8003816:	250c      	movcc	r5, #12
 8003818:	2d00      	cmp	r5, #0
 800381a:	4606      	mov	r6, r0
 800381c:	db01      	blt.n	8003822 <_malloc_r+0x1a>
 800381e:	42a9      	cmp	r1, r5
 8003820:	d903      	bls.n	800382a <_malloc_r+0x22>
 8003822:	230c      	movs	r3, #12
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	2000      	movs	r0, #0
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	f000 f87d 	bl	8003928 <__malloc_lock>
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <_malloc_r+0xac>)
 8003830:	6814      	ldr	r4, [r2, #0]
 8003832:	4621      	mov	r1, r4
 8003834:	b991      	cbnz	r1, 800385c <_malloc_r+0x54>
 8003836:	4c20      	ldr	r4, [pc, #128]	; (80038b8 <_malloc_r+0xb0>)
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	b91b      	cbnz	r3, 8003844 <_malloc_r+0x3c>
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f863 	bl	8003908 <_sbrk_r>
 8003842:	6020      	str	r0, [r4, #0]
 8003844:	4629      	mov	r1, r5
 8003846:	4630      	mov	r0, r6
 8003848:	f000 f85e 	bl	8003908 <_sbrk_r>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d124      	bne.n	800389a <_malloc_r+0x92>
 8003850:	230c      	movs	r3, #12
 8003852:	4630      	mov	r0, r6
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	f000 f868 	bl	800392a <__malloc_unlock>
 800385a:	e7e4      	b.n	8003826 <_malloc_r+0x1e>
 800385c:	680b      	ldr	r3, [r1, #0]
 800385e:	1b5b      	subs	r3, r3, r5
 8003860:	d418      	bmi.n	8003894 <_malloc_r+0x8c>
 8003862:	2b0b      	cmp	r3, #11
 8003864:	d90f      	bls.n	8003886 <_malloc_r+0x7e>
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	18cc      	adds	r4, r1, r3
 800386a:	50cd      	str	r5, [r1, r3]
 800386c:	4630      	mov	r0, r6
 800386e:	f000 f85c 	bl	800392a <__malloc_unlock>
 8003872:	f104 000b 	add.w	r0, r4, #11
 8003876:	1d23      	adds	r3, r4, #4
 8003878:	f020 0007 	bic.w	r0, r0, #7
 800387c:	1ac3      	subs	r3, r0, r3
 800387e:	d0d3      	beq.n	8003828 <_malloc_r+0x20>
 8003880:	425a      	negs	r2, r3
 8003882:	50e2      	str	r2, [r4, r3]
 8003884:	e7d0      	b.n	8003828 <_malloc_r+0x20>
 8003886:	684b      	ldr	r3, [r1, #4]
 8003888:	428c      	cmp	r4, r1
 800388a:	bf16      	itet	ne
 800388c:	6063      	strne	r3, [r4, #4]
 800388e:	6013      	streq	r3, [r2, #0]
 8003890:	460c      	movne	r4, r1
 8003892:	e7eb      	b.n	800386c <_malloc_r+0x64>
 8003894:	460c      	mov	r4, r1
 8003896:	6849      	ldr	r1, [r1, #4]
 8003898:	e7cc      	b.n	8003834 <_malloc_r+0x2c>
 800389a:	1cc4      	adds	r4, r0, #3
 800389c:	f024 0403 	bic.w	r4, r4, #3
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d005      	beq.n	80038b0 <_malloc_r+0xa8>
 80038a4:	1a21      	subs	r1, r4, r0
 80038a6:	4630      	mov	r0, r6
 80038a8:	f000 f82e 	bl	8003908 <_sbrk_r>
 80038ac:	3001      	adds	r0, #1
 80038ae:	d0cf      	beq.n	8003850 <_malloc_r+0x48>
 80038b0:	6025      	str	r5, [r4, #0]
 80038b2:	e7db      	b.n	800386c <_malloc_r+0x64>
 80038b4:	200005d8 	.word	0x200005d8
 80038b8:	200005dc 	.word	0x200005dc

080038bc <_realloc_r>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	4607      	mov	r7, r0
 80038c0:	4614      	mov	r4, r2
 80038c2:	460e      	mov	r6, r1
 80038c4:	b921      	cbnz	r1, 80038d0 <_realloc_r+0x14>
 80038c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038ca:	4611      	mov	r1, r2
 80038cc:	f7ff bf9c 	b.w	8003808 <_malloc_r>
 80038d0:	b922      	cbnz	r2, 80038dc <_realloc_r+0x20>
 80038d2:	f7ff ff4d 	bl	8003770 <_free_r>
 80038d6:	4625      	mov	r5, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038dc:	f000 f826 	bl	800392c <_malloc_usable_size_r>
 80038e0:	42a0      	cmp	r0, r4
 80038e2:	d20f      	bcs.n	8003904 <_realloc_r+0x48>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4638      	mov	r0, r7
 80038e8:	f7ff ff8e 	bl	8003808 <_malloc_r>
 80038ec:	4605      	mov	r5, r0
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d0f2      	beq.n	80038d8 <_realloc_r+0x1c>
 80038f2:	4631      	mov	r1, r6
 80038f4:	4622      	mov	r2, r4
 80038f6:	f7ff ff17 	bl	8003728 <memcpy>
 80038fa:	4631      	mov	r1, r6
 80038fc:	4638      	mov	r0, r7
 80038fe:	f7ff ff37 	bl	8003770 <_free_r>
 8003902:	e7e9      	b.n	80038d8 <_realloc_r+0x1c>
 8003904:	4635      	mov	r5, r6
 8003906:	e7e7      	b.n	80038d8 <_realloc_r+0x1c>

08003908 <_sbrk_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	2300      	movs	r3, #0
 800390c:	4c05      	ldr	r4, [pc, #20]	; (8003924 <_sbrk_r+0x1c>)
 800390e:	4605      	mov	r5, r0
 8003910:	4608      	mov	r0, r1
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	f7fd fae8 	bl	8000ee8 <_sbrk>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_sbrk_r+0x1a>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	b103      	cbz	r3, 8003922 <_sbrk_r+0x1a>
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	200005e0 	.word	0x200005e0

08003928 <__malloc_lock>:
 8003928:	4770      	bx	lr

0800392a <__malloc_unlock>:
 800392a:	4770      	bx	lr

0800392c <_malloc_usable_size_r>:
 800392c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003930:	1f18      	subs	r0, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfbc      	itt	lt
 8003936:	580b      	ldrlt	r3, [r1, r0]
 8003938:	18c0      	addlt	r0, r0, r3
 800393a:	4770      	bx	lr

0800393c <_init>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr

08003948 <_fini>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr
