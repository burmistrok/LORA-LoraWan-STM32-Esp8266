
EndDevice_STM32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001c68  08001c68  00011c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c80  08001c80  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001c80  08001c80  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c80  08001c80  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c80  08001c80  00011c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000008  08001c90  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08001c90  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afcd  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000246a  00000000  00000000  0002affe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  0002d468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002dc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001449b  00000000  00000000  0002e310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c51c  00000000  00000000  000427ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00061299  00000000  00000000  0004ecc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aff60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c74  00000000  00000000  000affdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c50 	.word	0x08001c50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08001c50 	.word	0x08001c50

0800014c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	4907      	ldr	r1, [pc, #28]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4313      	orrs	r3, r2
 800015e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000162:	699a      	ldr	r2, [r3, #24]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4013      	ands	r3, r2
 8000168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	bf00      	nop
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	40021000 	.word	0x40021000

0800017c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	0a1b      	lsrs	r3, r3, #8
 800018a:	b29a      	uxth	r2, r3
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	615a      	str	r2, [r3, #20]
}
 8000190:	bf00      	nop
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80001b0:	2010      	movs	r0, #16
 80001b2:	f7ff ffcb 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80001b6:	2020      	movs	r0, #32
 80001b8:	f7ff ffc8 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80001bc:	2004      	movs	r0, #4
 80001be:	f7ff ffc5 	bl	800014c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80001c2:	490a      	ldr	r1, [pc, #40]	; (80001ec <MX_GPIO_Init+0x50>)
 80001c4:	480a      	ldr	r0, [pc, #40]	; (80001f0 <MX_GPIO_Init+0x54>)
 80001c6:	f7ff ffd9 	bl	800017c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <MX_GPIO_Init+0x50>)
 80001cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80001ce:	2301      	movs	r3, #1
 80001d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4619      	mov	r1, r3
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <MX_GPIO_Init+0x54>)
 80001e0:	f000 fd11 	bl	8000c06 <LL_GPIO_Init>

}
 80001e4:	bf00      	nop
 80001e6:	3718      	adds	r7, #24
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	04200020 	.word	0x04200020
 80001f0:	40011000 	.word	0x40011000

080001f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f003 0307 	and.w	r3, r3, #7
 8000202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <__NVIC_SetPriorityGrouping+0x44>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000210:	4013      	ands	r3, r2
 8000212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800021c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000226:	4a04      	ldr	r2, [pc, #16]	; (8000238 <__NVIC_SetPriorityGrouping+0x44>)
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	60d3      	str	r3, [r2, #12]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <LL_RCC_HSE_Enable+0x18>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <LL_RCC_HSE_Enable+0x18>)
 8000246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024a:	6013      	str	r3, [r2, #0]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40021000 	.word	0x40021000

08000258 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <LL_RCC_HSE_IsReady+0x20>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000268:	bf0c      	ite	eq
 800026a:	2301      	moveq	r3, #1
 800026c:	2300      	movne	r3, #0
 800026e:	b2db      	uxtb	r3, r3
}
 8000270:	4618      	mov	r0, r3
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_SetSysClkSource+0x24>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	f023 0203 	bic.w	r2, r3, #3
 800028c:	4904      	ldr	r1, [pc, #16]	; (80002a0 <LL_RCC_SetSysClkSource+0x24>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	604b      	str	r3, [r1, #4]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <LL_RCC_GetSysClkSource+0x14>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002cc:	4904      	ldr	r1, [pc, #16]	; (80002e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4313      	orrs	r3, r2
 80002d2:	604b      	str	r3, [r1, #4]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	604b      	str	r3, [r1, #4]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <LL_RCC_SetAPB2Prescaler+0x24>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	604b      	str	r3, [r1, #4]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000

08000334 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <LL_RCC_PLL_Enable+0x18>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a03      	ldr	r2, [pc, #12]	; (800034c <LL_RCC_PLL_Enable+0x18>)
 800033e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <LL_RCC_PLL_IsReady+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800035c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000360:	bf0c      	ite	eq
 8000362:	2301      	moveq	r3, #1
 8000364:	2300      	movne	r3, #0
 8000366:	b2db      	uxtb	r3, r3
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	430b      	orrs	r3, r1
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000392:	4313      	orrs	r3, r2
 8000394:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_APB1_GRP1_EnableClock>:
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ae:	69da      	ldr	r2, [r3, #28]
 80003b0:	4907      	ldr	r1, [pc, #28]	; (80003d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ba:	69da      	ldr	r2, [r3, #28]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4013      	ands	r3, r2
 80003c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c2:	68fb      	ldr	r3, [r7, #12]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_APB2_GRP1_EnableClock>:
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003de:	699a      	ldr	r2, [r3, #24]
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4013      	ands	r3, r2
 80003f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f2:	68fb      	ldr	r3, [r7, #12]
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <LL_FLASH_SetLatency+0x24>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f023 0207 	bic.w	r2, r3, #7
 8000414:	4904      	ldr	r1, [pc, #16]	; (8000428 <LL_FLASH_SetLatency+0x24>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	600b      	str	r3, [r1, #0]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40022000 	.word	0x40022000

0800042c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <LL_FLASH_GetLatency+0x14>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0307 	and.w	r3, r3, #7
}
 8000438:	4618      	mov	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40022000 	.word	0x40022000

08000444 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4a06      	ldr	r2, [pc, #24]	; (8000468 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000452:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a03      	ldr	r2, [pc, #12]	; (8000468 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045e:	6053      	str	r3, [r2, #4]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40010000 	.word	0x40010000

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000470:	2001      	movs	r0, #1
 8000472:	f7ff ffaf 	bl	80003d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000476:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800047a:	f7ff ff93 	bl	80003a4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800047e:	2003      	movs	r0, #3
 8000480:	f7ff feb8 	bl	80001f4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000484:	f7ff ffde 	bl	8000444 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f804 	bl	8000494 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  vInit();
 800048c:	f001 fa38 	bl	8001900 <vInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x24>
	...

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff ffb3 	bl	8000404 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800049e:	f7ff ffc5 	bl	800042c <LL_FLASH_GetLatency>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x18>
  {
    Error_Handler();  
 80004a8:	f000 f834 	bl	8000514 <Error_Handler>
  }
  LL_RCC_HSE_Enable();
 80004ac:	f7ff fec6 	bl	800023c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80004b0:	bf00      	nop
 80004b2:	f7ff fed1 	bl	8000258 <LL_RCC_HSE_IsReady>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d1fa      	bne.n	80004b2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80004bc:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80004c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80004c4:	f7ff ff56 	bl	8000374 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80004c8:	f7ff ff34 	bl	8000334 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80004cc:	bf00      	nop
 80004ce:	f7ff ff3f 	bl	8000350 <LL_RCC_PLL_IsReady>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d1fa      	bne.n	80004ce <SystemClock_Config+0x3a>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff feef 	bl	80002bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80004de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004e2:	f7ff feff 	bl	80002e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff ff10 	bl	800030c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80004ec:	2002      	movs	r0, #2
 80004ee:	f7ff fec5 	bl	800027c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80004f2:	bf00      	nop
 80004f4:	f7ff fed6 	bl	80002a4 <LL_RCC_GetSysClkSource>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d1fa      	bne.n	80004f4 <SystemClock_Config+0x60>
  {
  
  }
  LL_Init1msTick(72000000);
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <SystemClock_Config+0x7c>)
 8000500:	f000 fe6c 	bl	80011dc <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <SystemClock_Config+0x7c>)
 8000506:	f000 fe77 	bl	80011f8 <LL_SetSystemCoreClock>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	044aa200 	.word	0x044aa200

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <__NVIC_GetPriorityGrouping+0x18>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	f003 0307 	and.w	r3, r3, #7
}
 800052e:	4618      	mov	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db0b      	blt.n	8000566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 021f 	and.w	r2, r3, #31
 8000554:	4906      	ldr	r1, [pc, #24]	; (8000570 <__NVIC_EnableIRQ+0x34>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	2001      	movs	r0, #1
 800055e:	fa00 f202 	lsl.w	r2, r0, r2
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100

08000574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db0a      	blt.n	800059e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	490c      	ldr	r1, [pc, #48]	; (80005c0 <__NVIC_SetPriority+0x4c>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	440b      	add	r3, r1
 8000598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800059c:	e00a      	b.n	80005b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4908      	ldr	r1, [pc, #32]	; (80005c4 <__NVIC_SetPriority+0x50>)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	3b04      	subs	r3, #4
 80005ac:	0112      	lsls	r2, r2, #4
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	440b      	add	r3, r1
 80005b2:	761a      	strb	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000e100 	.word	0xe000e100
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b089      	sub	sp, #36	; 0x24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	f1c3 0307 	rsb	r3, r3, #7
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	bf28      	it	cs
 80005e6:	2304      	movcs	r3, #4
 80005e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3304      	adds	r3, #4
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d902      	bls.n	80005f8 <NVIC_EncodePriority+0x30>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3b03      	subs	r3, #3
 80005f6:	e000      	b.n	80005fa <NVIC_EncodePriority+0x32>
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43da      	mvns	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	401a      	ands	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43d9      	mvns	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	4313      	orrs	r3, r2
         );
}
 8000622:	4618      	mov	r0, r3
 8000624:	3724      	adds	r7, #36	; 0x24
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <LL_APB2_GRP1_EnableClock>:
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000636:	699a      	ldr	r2, [r3, #24]
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <LL_APB2_GRP1_EnableClock+0x2c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b090      	sub	sp, #64	; 0x40
 8000660:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fae8 	bl	8001c40 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800067e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000682:	f7ff ffd3 	bl	800062c <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ffd0 	bl	800062c <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 800068c:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000692:	2309      	movs	r3, #9
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	481e      	ldr	r0, [pc, #120]	; (800071c <MX_SPI1_Init+0xc0>)
 80006a4:	f000 faaf 	bl	8000c06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80006a8:	f244 0340 	movw	r3, #16448	; 0x4040
 80006ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80006ae:	2304      	movs	r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	4819      	ldr	r0, [pc, #100]	; (800071c <MX_SPI1_Init+0xc0>)
 80006b8:	f000 faa5 	bl	8000c06 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80006bc:	f7ff ff30 	bl	8000520 <__NVIC_GetPriorityGrouping>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff7e 	bl	80005c8 <NVIC_EncodePriority>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4619      	mov	r1, r3
 80006d0:	2023      	movs	r0, #35	; 0x23
 80006d2:	f7ff ff4f 	bl	8000574 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 80006d6:	2023      	movs	r0, #35	; 0x23
 80006d8:	f7ff ff30 	bl	800053c <__NVIC_EnableIRQ>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80006e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80006e4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80006f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 80006f8:	2328      	movs	r3, #40	; 0x28
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000704:	230a      	movs	r3, #10
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0xc4>)
 8000710:	f000 fc09 	bl	8000f26 <LL_SPI_Init>

}
 8000714:	bf00      	nop
 8000716:	3740      	adds	r7, #64	; 0x40
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40010800 	.word	0x40010800
 8000720:	40013000 	.word	0x40013000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <HardFault_Handler+0x4>

08000736 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <BusFault_Handler+0x4>

08000742 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <UsageFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	vSysRunModeTick();
 8000770:	f001 f90c 	bl	800198c <vSysRunModeTick>
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	vSPI_IT_CallBack();
 800077c:	f000 fe84 	bl	8001488 <vSPI_IT_CallBack>
  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	vUSART_ITCallBack();
 8000788:	f000 ff60 	bl	800164c <vUSART_ITCallBack>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <SystemInit+0x5c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <SystemInit+0x5c>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <SystemInit+0x5c>)
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4911      	ldr	r1, [pc, #68]	; (80007ec <SystemInit+0x5c>)
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SystemInit+0x60>)
 80007a8:	4013      	ands	r3, r2
 80007aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <SystemInit+0x5c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <SystemInit+0x5c>)
 80007b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <SystemInit+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <SystemInit+0x5c>)
 80007c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <SystemInit+0x5c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <SystemInit+0x5c>)
 80007ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SystemInit+0x5c>)
 80007d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <SystemInit+0x64>)
 80007de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000
 80007f0:	f8ff0000 	.word	0xf8ff0000
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <LL_APB2_GRP1_EnableClock>:
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800091a:	699a      	ldr	r2, [r3, #24]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4013      	ands	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60da      	str	r2, [r3, #12]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	615a      	str	r2, [r3, #20]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80009a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009a8:	f7ff ffac 	bl	8000904 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80009ac:	2004      	movs	r0, #4
 80009ae:	f7ff ffa9 	bl	8000904 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_USART1_UART_Init+0xc0>)
 80009b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009b6:	2309      	movs	r3, #9
 80009b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <MX_USART1_UART_Init+0xc4>)
 80009c8:	f000 f91d 	bl	8000c06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_USART1_UART_Init+0xc8>)
 80009ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80009d0:	2304      	movs	r3, #4
 80009d2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <MX_USART1_UART_Init+0xc4>)
 80009da:	f000 f914 	bl	8000c06 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009de:	f7ff ff0b 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff59 	bl	80008a0 <NVIC_EncodePriority>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	2025      	movs	r0, #37	; 0x25
 80009f4:	f7ff ff2a 	bl	800084c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80009f8:	2025      	movs	r0, #37	; 0x25
 80009fa:	f7ff ff0b 	bl	8000814 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80009fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a02:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000a10:	230c      	movs	r3, #12
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_USART1_UART_Init+0xcc>)
 8000a24:	f000 fb60 	bl	80010e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_USART1_UART_Init+0xcc>)
 8000a2a:	f7ff ff92 	bl	8000952 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_USART1_UART_Init+0xcc>)
 8000a30:	f7ff ff80 	bl	8000934 <LL_USART_Enable>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	04020002 	.word	0x04020002
 8000a40:	40010800 	.word	0x40010800
 8000a44:	04040004 	.word	0x04040004
 8000a48:	40013800 	.word	0x40013800

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff fe8d 	bl	8000790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f001 f8bf 	bl	8001bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fcf7 	bl	800046c <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a80:	08001c88 	.word	0x08001c88
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a88:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 8000a8c:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 8000a90:	20000454 	.word	0x20000454

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>

08000a96 <LL_GPIO_SetPinMode>:
{
 8000a96:	b490      	push	{r4, r7}
 8000a98:	b088      	sub	sp, #32
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	0e1b      	lsrs	r3, r3, #24
 8000aaa:	4413      	add	r3, r2
 8000aac:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000aae:	6822      	ldr	r2, [r4, #0]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa93 f3a3 	rbit	r3, r3
 8000aba:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	fab3 f383 	clz	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	401a      	ands	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	61bb      	str	r3, [r7, #24]
  return result;
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fab3 f383 	clz	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	6023      	str	r3, [r4, #0]
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc90      	pop	{r4, r7}
 8000af8:	4770      	bx	lr

08000afa <LL_GPIO_SetPinSpeed>:
{
 8000afa:	b490      	push	{r4, r7}
 8000afc:	b088      	sub	sp, #32
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	0e1b      	lsrs	r3, r3, #24
 8000b0e:	4413      	add	r3, r2
 8000b10:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa93 f3a3 	rbit	r3, r3
 8000b1e:	613b      	str	r3, [r7, #16]
  return result;
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	fab3 f383 	clz	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	fa93 f3a3 	rbit	r3, r3
 8000b3e:	61bb      	str	r3, [r7, #24]
  return result;
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fab3 f383 	clz	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4313      	orrs	r3, r2
 8000b52:	6023      	str	r3, [r4, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc90      	pop	{r4, r7}
 8000b5c:	4770      	bx	lr

08000b5e <LL_GPIO_SetPinOutputType>:
{
 8000b5e:	b490      	push	{r4, r7}
 8000b60:	b088      	sub	sp, #32
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	0e1b      	lsrs	r3, r3, #24
 8000b72:	4413      	add	r3, r2
 8000b74:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa93 f3a3 	rbit	r3, r3
 8000b82:	613b      	str	r3, [r7, #16]
  return result;
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	fab3 f383 	clz	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	2104      	movs	r1, #4
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	fa93 f3a3 	rbit	r3, r3
 8000ba2:	61bb      	str	r3, [r7, #24]
  return result;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fab3 f383 	clz	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6023      	str	r3, [r4, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc90      	pop	{r4, r7}
 8000bc0:	4770      	bx	lr

08000bc2 <LL_GPIO_SetPinPull>:
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b087      	sub	sp, #28
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	401a      	ands	r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	613b      	str	r3, [r7, #16]
  return result;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	fab3 f383 	clz	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	408b      	lsls	r3, r1
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	60da      	str	r2, [r3, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b088      	sub	sp, #32
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	fa93 f3a3 	rbit	r3, r3
 8000c24:	60fb      	str	r3, [r7, #12]
  return result;
 8000c26:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000c28:	fab3 f383 	clz	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000c30:	e040      	b.n	8000cb4 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000c32:	2201      	movs	r2, #1
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d036      	beq.n	8000cae <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d806      	bhi.n	8000c54 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000c46:	f240 1201 	movw	r2, #257	; 0x101
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	e008      	b.n	8000c66 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c64:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	69b9      	ldr	r1, [r7, #24]
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff11 	bl	8000a96 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	69b9      	ldr	r1, [r7, #24]
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffa0 	bl	8000bc2 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d003      	beq.n	8000c92 <LL_GPIO_Init+0x8c>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b09      	cmp	r3, #9
 8000c90:	d10d      	bne.n	8000cae <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	461a      	mov	r2, r3
 8000c98:	69b9      	ldr	r1, [r7, #24]
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff2d 	bl	8000afa <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	69b9      	ldr	r1, [r7, #24]
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff58 	bl	8000b5e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1b8      	bne.n	8000c32 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3720      	adds	r7, #32
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <LL_RCC_GetSysClkSource>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <LL_RCC_GetSysClkSource+0x14>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <LL_RCC_GetAHBPrescaler>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <LL_RCC_GetAHBPrescaler+0x14>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000

08000cfc <LL_RCC_GetAPB1Prescaler>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_GetAPB2Prescaler>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40021000 	.word	0x40021000

08000d2c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <LL_RCC_PLL_GetMainSource+0x14>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000

08000d44 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000

08000d5c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <LL_RCC_PLL_GetPrediv+0x18>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	0c5b      	lsrs	r3, r3, #17
 8000d66:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000d80:	f000 f820 	bl	8000dc4 <RCC_GetSystemClockFreq>
 8000d84:	4602      	mov	r2, r0
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f83a 	bl	8000e08 <RCC_GetHCLKClockFreq>
 8000d94:	4602      	mov	r2, r0
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f848 	bl	8000e34 <RCC_GetPCLK1ClockFreq>
 8000da4:	4602      	mov	r2, r0
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f854 	bl	8000e5c <RCC_GetPCLK2ClockFreq>
 8000db4:	4602      	mov	r2, r0
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60da      	str	r2, [r3, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000dce:	f7ff ff7d 	bl	8000ccc <LL_RCC_GetSysClkSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d006      	beq.n	8000de6 <RCC_GetSystemClockFreq+0x22>
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d007      	beq.n	8000dec <RCC_GetSystemClockFreq+0x28>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d109      	bne.n	8000df4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <RCC_GetSystemClockFreq+0x40>)
 8000de2:	607b      	str	r3, [r7, #4]
      break;
 8000de4:	e009      	b.n	8000dfa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <RCC_GetSystemClockFreq+0x40>)
 8000de8:	607b      	str	r3, [r7, #4]
      break;
 8000dea:	e006      	b.n	8000dfa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000dec:	f000 f84a 	bl	8000e84 <RCC_PLL_GetFreqDomain_SYS>
 8000df0:	6078      	str	r0, [r7, #4]
      break;
 8000df2:	e002      	b.n	8000dfa <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <RCC_GetSystemClockFreq+0x40>)
 8000df6:	607b      	str	r3, [r7, #4]
      break;
 8000df8:	bf00      	nop
  }

  return frequency;
 8000dfa:	687b      	ldr	r3, [r7, #4]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	007a1200 	.word	0x007a1200

08000e08 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000e10:	f7ff ff68 	bl	8000ce4 <LL_RCC_GetAHBPrescaler>
 8000e14:	4603      	mov	r3, r0
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <RCC_GetHCLKClockFreq+0x28>)
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	40d3      	lsrs	r3, r2
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08001c68 	.word	0x08001c68

08000e34 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000e3c:	f7ff ff5e 	bl	8000cfc <LL_RCC_GetAPB1Prescaler>
 8000e40:	4603      	mov	r3, r0
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <RCC_GetPCLK1ClockFreq+0x24>)
 8000e46:	5cd3      	ldrb	r3, [r2, r3]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	40d3      	lsrs	r3, r2
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08001c78 	.word	0x08001c78

08000e5c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000e64:	f7ff ff56 	bl	8000d14 <LL_RCC_GetAPB2Prescaler>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	0adb      	lsrs	r3, r3, #11
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <RCC_GetPCLK2ClockFreq+0x24>)
 8000e6e:	5cd3      	ldrb	r3, [r2, r3]
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	40d3      	lsrs	r3, r2
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	08001c78 	.word	0x08001c78

08000e84 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000e92:	f7ff ff4b 	bl	8000d2c <LL_RCC_PLL_GetMainSource>
 8000e96:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d003      	beq.n	8000eac <RCC_PLL_GetFreqDomain_SYS+0x28>
 8000ea4:	e00b      	b.n	8000ebe <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8000ea8:	607b      	str	r3, [r7, #4]
      break;
 8000eaa:	e00b      	b.n	8000ec4 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000eac:	f7ff ff56 	bl	8000d5c <LL_RCC_PLL_GetPrediv>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	607b      	str	r3, [r7, #4]
      break;
 8000ebc:	e002      	b.n	8000ec4 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8000ec0:	607b      	str	r3, [r7, #4]
      break;
 8000ec2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000ec4:	f7ff ff3e 	bl	8000d44 <LL_RCC_PLL_GetMultiplicator>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	3302      	adds	r3, #2
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	003d0900 	.word	0x003d0900
 8000ee0:	007a1200 	.word	0x007a1200

08000ee4 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef4:	2b40      	cmp	r3, #64	; 0x40
 8000ef6:	d101      	bne.n	8000efc <LL_SPI_IsEnabled+0x18>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <LL_SPI_IsEnabled+0x1a>
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffd5 	bl	8000ee4 <LL_SPI_IsEnabled>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d139      	bne.n	8000fb4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f48:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	6811      	ldr	r1, [r2, #0]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	6852      	ldr	r2, [r2, #4]
 8000f54:	4311      	orrs	r1, r2
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	6892      	ldr	r2, [r2, #8]
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	68d2      	ldr	r2, [r2, #12]
 8000f60:	4311      	orrs	r1, r2
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	6912      	ldr	r2, [r2, #16]
 8000f66:	4311      	orrs	r1, r2
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	6952      	ldr	r2, [r2, #20]
 8000f6c:	4311      	orrs	r1, r2
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	6992      	ldr	r2, [r2, #24]
 8000f72:	4311      	orrs	r1, r2
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	69d2      	ldr	r2, [r2, #28]
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	6a12      	ldr	r2, [r2, #32]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f023 0204 	bic.w	r2, r3, #4
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fa2:	d105      	bne.n	8000fb0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffac 	bl	8000f08 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <LL_USART_IsEnabled>:
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <LL_USART_SetStopBitsLength>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <LL_USART_SetHWFlowCtrl>:
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <LL_USART_SetBaudRate>:
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	009a      	lsls	r2, r3, #2
 8001042:	441a      	add	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <LL_USART_SetBaudRate+0xb8>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	b29b      	uxth	r3, r3
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	b299      	uxth	r1, r3
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	009a      	lsls	r2, r3, #2
 8001064:	441a      	add	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	fbb2 f2f3 	udiv	r2, r2, r3
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <LL_USART_SetBaudRate+0xb8>)
 8001070:	fba3 0302 	umull	r0, r3, r3, r2
 8001074:	095b      	lsrs	r3, r3, #5
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	fb00 f303 	mul.w	r3, r0, r3
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	3332      	adds	r3, #50	; 0x32
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <LL_USART_SetBaudRate+0xb8>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	b29b      	uxth	r3, r3
 800108c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001090:	b29b      	uxth	r3, r3
 8001092:	440b      	add	r3, r1
 8001094:	b299      	uxth	r1, r3
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	009a      	lsls	r2, r3, #2
 80010a0:	441a      	add	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <LL_USART_SetBaudRate+0xb8>)
 80010ac:	fba3 0302 	umull	r0, r3, r3, r2
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	fb00 f303 	mul.w	r3, r0, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	3332      	adds	r3, #50	; 0x32
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <LL_USART_SetBaudRate+0xb8>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	095b      	lsrs	r3, r3, #5
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	440b      	add	r3, r1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	51eb851f 	.word	0x51eb851f

080010e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff5f 	bl	8000fbe <LL_USART_IsEnabled>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d145      	bne.n	8001192 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800110e:	f023 030c 	bic.w	r3, r3, #12
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	6851      	ldr	r1, [r2, #4]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	68d2      	ldr	r2, [r2, #12]
 800111a:	4311      	orrs	r1, r2
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6912      	ldr	r2, [r2, #16]
 8001120:	430a      	orrs	r2, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff58 	bl	8000fe4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff64 	bl	8001008 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe17 	bl	8000d78 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <LL_USART_Init+0xb4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d102      	bne.n	8001158 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	e00c      	b.n	8001172 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <LL_USART_Init+0xb8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d102      	bne.n	8001166 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	e005      	b.n	8001172 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <LL_USART_Init+0xbc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff4d 	bl	800102c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001192:	7ffb      	ldrb	r3, [r7, #31]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40013800 	.word	0x40013800
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40004800 	.word	0x40004800

080011a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <LL_InitTick+0x30>)
 80011bc:	3b01      	subs	r3, #1
 80011be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <LL_InitTick+0x30>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <LL_InitTick+0x30>)
 80011c8:	2205      	movs	r2, #5
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80011e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffdd 	bl	80011a8 <LL_InitTick>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <LL_SetSystemCoreClock+0x18>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000000 	.word	0x20000000

08001214 <LL_GPIO_TogglePin>:
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	405a      	eors	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60da      	str	r2, [r3, #12]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <vLed_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vLed_Init(const void* configPtr())
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	bLedInit = true;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <vLed_Init+0x1c>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
	(void)configPtr();
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4798      	blx	r3
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000024 	.word	0x20000024

08001258 <vLed_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vLed_MainFunction(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0


	if (0 < u16_TimeOut--)
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <vLed_MainFunction+0x28>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	b291      	uxth	r1, r2
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <vLed_MainFunction+0x28>)
 8001266:	8011      	strh	r1, [r2, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <vLed_MainFunction+0x24>
	{
		return;
	}
	else
	{
		TOGGLE_LED();
 800126c:	4905      	ldr	r1, [pc, #20]	; (8001284 <vLed_MainFunction+0x2c>)
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <vLed_MainFunction+0x30>)
 8001270:	f7ff ffd0 	bl	8001214 <LL_GPIO_TogglePin>
		u16_TimeOut = TIME_OUT_FOR_1S;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <vLed_MainFunction+0x28>)
 8001276:	2264      	movs	r2, #100	; 0x64
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	e000      	b.n	800127e <vLed_MainFunction+0x26>
		return;
 800127c:	bf00      	nop
	}

}
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000004 	.word	0x20000004
 8001284:	04200020 	.word	0x04200020
 8001288:	40011000 	.word	0x40011000

0800128c <LL_SPI_Enable>:
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d101      	bne.n	80012e6 <LL_SPI_IsActiveFlag_TXE+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <LL_SPI_IsActiveFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_IsActiveFlag_OVR
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001302:	2b40      	cmp	r3, #64	; 0x40
 8001304:	d101      	bne.n	800130a <LL_SPI_IsActiveFlag_OVR+0x18>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <LL_SPI_IsActiveFlag_OVR+0x1a>
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <LL_SPI_EnableIT_ERR>:
  * @rmtoll CR2          ERRIE         LL_SPI_EnableIT_ERR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f043 0220 	orr.w	r2, r3, #32
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <LL_SPI_EnableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_EnableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <LL_SPI_EnableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_EnableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	2b80      	cmp	r3, #128	; 0x80
 80013a0:	d101      	bne.n	80013a6 <LL_SPI_IsEnabledIT_TXE+0x18>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_SPI_IsEnabledIT_TXE+0x1a>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	b2db      	uxtb	r3, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	330c      	adds	r3, #12
 80013da:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <vSPI_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSPI_Init(const void* configPtr())
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	bSPIInit = true;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <vSPI_Init+0x34>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
	(void)configPtr();
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4798      	blx	r3
	memset(TX_Buffer.Buffer, 0, BUFFER_SIZE);
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	2100      	movs	r1, #0
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <vSPI_Init+0x38>)
 8001404:	f000 fc1c 	bl	8001c40 <memset>
	memset(RX_Buffer.Buffer, 0, BUFFER_SIZE);
 8001408:	22ff      	movs	r2, #255	; 0xff
 800140a:	2100      	movs	r1, #0
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <vSPI_Init+0x3c>)
 800140e:	f000 fc17 	bl	8001c40 <memset>
	vLL_SPI_Init();
 8001412:	f000 f80b 	bl	800142c <vLL_SPI_Init>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000025 	.word	0x20000025
 8001424:	2000002a 	.word	0x2000002a
 8001428:	20000132 	.word	0x20000132

0800142c <vLL_SPI_Init>:


}

static void vLL_SPI_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	LL_SPI_EnableIT_TXE(SPI1);
 8001430:	4812      	ldr	r0, [pc, #72]	; (800147c <vLL_SPI_Init+0x50>)
 8001432:	f7ff ff8e 	bl	8001352 <LL_SPI_EnableIT_TXE>
	LL_SPI_EnableIT_RXNE(SPI1);
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <vLL_SPI_Init+0x50>)
 8001438:	f7ff ff7c 	bl	8001334 <LL_SPI_EnableIT_RXNE>
	LL_SPI_EnableIT_ERR(SPI1);
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <vLL_SPI_Init+0x50>)
 800143e:	f7ff ff6a 	bl	8001316 <LL_SPI_EnableIT_ERR>
	LL_SPI_Enable(SPI1);
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <vLL_SPI_Init+0x50>)
 8001444:	f7ff ff22 	bl	800128c <LL_SPI_Enable>

	//Enable clock for GPIOA
	RCC->APB2ENR |=  RCC_APB2ENR_IOPAEN;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <vLL_SPI_Init+0x54>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <vLL_SPI_Init+0x54>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]

	//Configured PIN
	SET_CS();
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <vLL_SPI_Init+0x58>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <vLL_SPI_Init+0x58>)
 800145a:	f023 0310 	bic.w	r3, r3, #16
 800145e:	60d3      	str	r3, [r2, #12]
	GPIOA->CRL &= ~GPIO_CRL_CNF4;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <vLL_SPI_Init+0x58>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <vLL_SPI_Init+0x58>)
 8001466:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800146a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE4;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <vLL_SPI_Init+0x58>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <vLL_SPI_Init+0x58>)
 8001472:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40013000 	.word	0x40013000
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800

08001488 <vSPI_IT_CallBack>:


void vSPI_IT_CallBack(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

	volatile uint8_t u8_Data = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	71fb      	strb	r3, [r7, #7]

	if (LL_SPI_IsActiveFlag_TXE(SPI1))
 8001492:	4822      	ldr	r0, [pc, #136]	; (800151c <vSPI_IT_CallBack+0x94>)
 8001494:	f7ff ff1b 	bl	80012ce <LL_SPI_IsActiveFlag_TXE>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <vSPI_IT_CallBack+0x4c>
	{
		if (bCircularFIFOBuffer_getElement(&TX_Buffer, (uint8_t*) &u8_Data) == false )
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	4619      	mov	r1, r3
 80014a2:	481f      	ldr	r0, [pc, #124]	; (8001520 <vSPI_IT_CallBack+0x98>)
 80014a4:	f000 fb4d 	bl	8001b42 <bCircularFIFOBuffer_getElement>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <vSPI_IT_CallBack+0x40>
		{
			if (LL_SPI_IsEnabledIT_TXE(SPI1))
 80014b4:	4819      	ldr	r0, [pc, #100]	; (800151c <vSPI_IT_CallBack+0x94>)
 80014b6:	f7ff ff6a 	bl	800138e <LL_SPI_IsEnabledIT_TXE>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d009      	beq.n	80014d4 <vSPI_IT_CallBack+0x4c>
			{
				LL_SPI_DisableIT_TXE(SPI1);
 80014c0:	4816      	ldr	r0, [pc, #88]	; (800151c <vSPI_IT_CallBack+0x94>)
 80014c2:	f7ff ff55 	bl	8001370 <LL_SPI_DisableIT_TXE>
 80014c6:	e005      	b.n	80014d4 <vSPI_IT_CallBack+0x4c>
				//RESET_CS();
			}
		}
		else
		{
			LL_SPI_TransmitData8(SPI1, u8_Data);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	4813      	ldr	r0, [pc, #76]	; (800151c <vSPI_IT_CallBack+0x94>)
 80014d0:	f7ff ff7b 	bl	80013ca <LL_SPI_TransmitData8>
		}



	}
	if (LL_SPI_IsActiveFlag_RXNE(SPI1))
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <vSPI_IT_CallBack+0x94>)
 80014d6:	f7ff fee8 	bl	80012aa <LL_SPI_IsActiveFlag_RXNE>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d010      	beq.n	8001502 <vSPI_IT_CallBack+0x7a>
	{
		if (vReceiveData == true)
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <vSPI_IT_CallBack+0x9c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <vSPI_IT_CallBack+0x74>
		{
			bCircularFIFOBuffer_addElement(&RX_Buffer, LL_SPI_ReceiveData8(SPI1));
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <vSPI_IT_CallBack+0x94>)
 80014ec:	f7ff ff61 	bl	80013b2 <LL_SPI_ReceiveData8>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <vSPI_IT_CallBack+0xa0>)
 80014f6:	f000 fb52 	bl	8001b9e <bCircularFIFOBuffer_addElement>
 80014fa:	e002      	b.n	8001502 <vSPI_IT_CallBack+0x7a>
		}
		else
		{
			LL_SPI_ReceiveData8(SPI1);
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <vSPI_IT_CallBack+0x94>)
 80014fe:	f7ff ff58 	bl	80013b2 <LL_SPI_ReceiveData8>
			//RESET_CS();
		}

	}

	if(LL_SPI_IsActiveFlag_OVR(SPI1))
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <vSPI_IT_CallBack+0x94>)
 8001504:	f7ff fef5 	bl	80012f2 <LL_SPI_IsActiveFlag_OVR>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <vSPI_IT_CallBack+0x8c>
	{
		LL_SPI_ReceiveData8(SPI1);
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <vSPI_IT_CallBack+0x94>)
 8001510:	f7ff ff4f 	bl	80013b2 <LL_SPI_ReceiveData8>
	}
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40013000 	.word	0x40013000
 8001520:	20000028 	.word	0x20000028
 8001524:	20000026 	.word	0x20000026
 8001528:	20000130 	.word	0x20000130

0800152c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60da      	str	r2, [r3, #12]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	605a      	str	r2, [r3, #4]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <vUSART_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_Init(const void* configPtr())
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

	bUSARTInit = true;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <vUSART_Init+0x34>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
	(void)configPtr();
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4798      	blx	r3
	memset(TX_Buffer.Buffer, 0, BUFFER_SIZE);
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	2100      	movs	r1, #0
 80015d2:	4808      	ldr	r0, [pc, #32]	; (80015f4 <vUSART_Init+0x38>)
 80015d4:	f000 fb34 	bl	8001c40 <memset>
	memset(RX_Buffer.Buffer, 0, BUFFER_SIZE);
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	2100      	movs	r1, #0
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <vUSART_Init+0x3c>)
 80015de:	f000 fb2f 	bl	8001c40 <memset>
	vLL_USART_Init();
 80015e2:	f000 f879 	bl	80016d8 <vLL_USART_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000236 	.word	0x20000236
 80015f4:	2000023a 	.word	0x2000023a
 80015f8:	20000342 	.word	0x20000342

080015fc <vUSART_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_MainFunction(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0c2      	sub	sp, #264	; 0x108
 8001600:	af00      	add	r7, sp, #0

	uint16_t u16_len;
	uint8_t tmp_Buffer[BUFFER_SIZE];

	if ( bUSARTInit == false)
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <vUSART_MainFunction+0x48>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d113      	bne.n	8001638 <vUSART_MainFunction+0x3c>
		return;
	}
	else
	{
		//HAL_USART_SendBuffer(USART1, (uint8_t*)&"URA\r\n", 5, &u16_len);
		HAL_USART_ReceiveBuffer(USART1, &tmp_Buffer[0], BUFFER_SIZE, &u16_len);
 8001610:	f507 7383 	add.w	r3, r7, #262	; 0x106
 8001614:	1d39      	adds	r1, r7, #4
 8001616:	22ff      	movs	r2, #255	; 0xff
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <vUSART_MainFunction+0x4c>)
 800161a:	f000 f8f5 	bl	8001808 <HAL_USART_ReceiveBuffer>
		if (u16_len != 0u)
 800161e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <vUSART_MainFunction+0x3e>
		{
			HAL_USART_SendBuffer(USART1, &tmp_Buffer[0], u16_len, &u16_len);
 8001626:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800162a:	f507 7383 	add.w	r3, r7, #262	; 0x106
 800162e:	1d39      	adds	r1, r7, #4
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <vUSART_MainFunction+0x4c>)
 8001632:	f000 f8b7 	bl	80017a4 <HAL_USART_SendBuffer>
 8001636:	e000      	b.n	800163a <vUSART_MainFunction+0x3e>
		return;
 8001638:	bf00      	nop
		}

	}


}
 800163a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000236 	.word	0x20000236
 8001648:	40013800 	.word	0x40013800

0800164c <vUSART_ITCallBack>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_ITCallBack(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
	volatile uint8_t u8_Data = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	71fb      	strb	r3, [r7, #7]

	if ((USART1->SR & USART_SR_RXNE_Msk) == USART_SR_RXNE)
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <vUSART_ITCallBack+0x7c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	d107      	bne.n	8001672 <vUSART_ITCallBack+0x26>
	{
		bCircularFIFOBuffer_addElement(&RX_Buffer, LL_USART_ReceiveData8(USART1));
 8001662:	4819      	ldr	r0, [pc, #100]	; (80016c8 <vUSART_ITCallBack+0x7c>)
 8001664:	f7ff ff8f 	bl	8001586 <LL_USART_ReceiveData8>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	4817      	ldr	r0, [pc, #92]	; (80016cc <vUSART_ITCallBack+0x80>)
 800166e:	f000 fa96 	bl	8001b9e <bCircularFIFOBuffer_addElement>
	}


	if ((USART1->SR & USART_SR_TC_Msk) == USART_SR_TC)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <vUSART_ITCallBack+0x7c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	2b40      	cmp	r3, #64	; 0x40
 800167c:	d120      	bne.n	80016c0 <vUSART_ITCallBack+0x74>
	{
		if (bCircularFIFOBuffer_getElement(&TX_Buffer, (uint8_t*) &u8_Data) == false )
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	4619      	mov	r1, r3
 8001682:	4813      	ldr	r0, [pc, #76]	; (80016d0 <vUSART_ITCallBack+0x84>)
 8001684:	f000 fa5d 	bl	8001b42 <bCircularFIFOBuffer_getElement>
 8001688:	4603      	mov	r3, r0
 800168a:	f083 0301 	eor.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00f      	beq.n	80016b4 <vUSART_ITCallBack+0x68>
		{
			if ((USART1->CR1 & USART_CR1_TCIE_Msk) == USART_CR1_TCIE)
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <vUSART_ITCallBack+0x7c>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	2b40      	cmp	r3, #64	; 0x40
 800169e:	d10f      	bne.n	80016c0 <vUSART_ITCallBack+0x74>
			{
				LL_USART_DisableIT_TC(USART1);
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <vUSART_ITCallBack+0x7c>)
 80016a2:	f7ff ff61 	bl	8001568 <LL_USART_DisableIT_TC>
				RESET_RTS();
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <vUSART_ITCallBack+0x88>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <vUSART_ITCallBack+0x88>)
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b0:	60d3      	str	r3, [r2, #12]
		}
	}



}
 80016b2:	e005      	b.n	80016c0 <vUSART_ITCallBack+0x74>
			LL_USART_TransmitData8(USART1, u8_Data);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <vUSART_ITCallBack+0x7c>)
 80016bc:	f7ff ff6f 	bl	800159e <LL_USART_TransmitData8>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40013800 	.word	0x40013800
 80016cc:	20000340 	.word	0x20000340
 80016d0:	20000238 	.word	0x20000238
 80016d4:	40010800 	.word	0x40010800

080016d8 <vLL_USART_Init>:

static void vLL_USART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART1);
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <vLL_USART_Init+0x34>)
 80016de:	f7ff ff25 	bl	800152c <LL_USART_EnableIT_RXNE>

	//Enable clock for GPIOA
	RCC->APB2ENR |=  RCC_APB2ENR_IOPAEN;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <vLL_USART_Init+0x38>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <vLL_USART_Init+0x38>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6193      	str	r3, [r2, #24]

	//Configured PIN
	GPIOA->CRH &= ~GPIO_CRH_CNF12;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <vLL_USART_Init+0x3c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <vLL_USART_Init+0x3c>)
 80016f4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80016f8:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE12;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <vLL_USART_Init+0x3c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <vLL_USART_Init+0x3c>)
 8001700:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001704:	6053      	str	r3, [r2, #4]
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40013800 	.word	0x40013800
 8001710:	40021000 	.word	0x40021000
 8001714:	40010800 	.word	0x40010800

08001718 <HAL_USART_GetChar>:



TE_ERROR HAL_USART_GetChar(TS_USART* USARTx, uint8_t* Data)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	uint8_t u8_Data = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
	if (bCircularFIFOBuffer_getElement(&RX_Buffer, (uint8_t*) &u8_Data) == true )
 8001726:	f107 030f 	add.w	r3, r7, #15
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <HAL_USART_GetChar+0x34>)
 800172e:	f000 fa08 	bl	8001b42 <bCircularFIFOBuffer_getElement>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_USART_GetChar+0x2a>
	{
		*Data = u8_Data;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	701a      	strb	r2, [r3, #0]
		return ERR_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_USART_GetChar+0x2c>
	}
	else
	{
		return ERR_NOK;
 8001742:	2301      	movs	r3, #1
	}


}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000340 	.word	0x20000340

08001750 <HAL_USART_SendChar>:


TE_ERROR HAL_USART_SendChar(TS_USART* USARTx, uint8_t Data)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]



	if (bCircularFIFOBuffer_addElement(&TX_Buffer, Data) == true )
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <HAL_USART_SendChar+0x48>)
 8001762:	f000 fa1c 	bl	8001b9e <bCircularFIFOBuffer_addElement>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d010      	beq.n	800178e <HAL_USART_SendChar+0x3e>
	{
		if ( (USART1->CR1 & USART_CR1_TCIE_Msk) != USART_CR1_TCIE )
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_USART_SendChar+0x4c>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d008      	beq.n	800178a <HAL_USART_SendChar+0x3a>
		{
			SET_RTS();
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_USART_SendChar+0x50>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_USART_SendChar+0x50>)
 800177e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001782:	60d3      	str	r3, [r2, #12]
			LL_USART_EnableIT_TC(USART1);
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_USART_SendChar+0x4c>)
 8001786:	f7ff fee0 	bl	800154a <LL_USART_EnableIT_TC>
		}
		return ERR_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_USART_SendChar+0x40>
	}
	else
	{
		return ERR_BUFFER_FULL;
 800178e:	2302      	movs	r3, #2
	}

}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000238 	.word	0x20000238
 800179c:	40013800 	.word	0x40013800
 80017a0:	40010800 	.word	0x40010800

080017a4 <HAL_USART_SendBuffer>:



TE_ERROR HAL_USART_SendBuffer(TS_USART* USARTx, uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_Len = 0u;
 80017b4:	2300      	movs	r3, #0
 80017b6:	82fb      	strh	r3, [r7, #22]
	*RecievedLen = 0u;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	801a      	strh	r2, [r3, #0]

	while (Len > u16_Len)
 80017be:	e017      	b.n	80017f0 <HAL_USART_SendBuffer+0x4c>
	{
		if (ERR_OK == HAL_USART_SendChar( USART1, *Data))
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	480f      	ldr	r0, [pc, #60]	; (8001804 <HAL_USART_SendBuffer+0x60>)
 80017c8:	f7ff ffc2 	bl	8001750 <HAL_USART_SendChar>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <HAL_USART_SendBuffer+0x48>
		{
			Data++;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
			u16_Len++;
 80017d8:	8afb      	ldrh	r3, [r7, #22]
 80017da:	3301      	adds	r3, #1
 80017dc:	82fb      	strh	r3, [r7, #22]
			(*RecievedLen)++;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	e001      	b.n	80017f0 <HAL_USART_SendBuffer+0x4c>
		}
		else
		{
			return ERR_BUFFER_FULL;
 80017ec:	2302      	movs	r3, #2
 80017ee:	e004      	b.n	80017fa <HAL_USART_SendBuffer+0x56>
	while (Len > u16_Len)
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	8afb      	ldrh	r3, [r7, #22]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8e3      	bhi.n	80017c0 <HAL_USART_SendBuffer+0x1c>
		}
	}

	return ERR_OK;
 80017f8:	2300      	movs	r3, #0

}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013800 	.word	0x40013800

08001808 <HAL_USART_ReceiveBuffer>:

TE_ERROR HAL_USART_ReceiveBuffer(TS_USART* USARTx, uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]


	uint16_t u16_Len = 0u;
 8001818:	2300      	movs	r3, #0
 800181a:	82fb      	strh	r3, [r7, #22]
	*RecievedLen = 0u;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	801a      	strh	r2, [r3, #0]

	while (Len > u16_Len)
 8001822:	e015      	b.n	8001850 <HAL_USART_ReceiveBuffer+0x48>
	{
		if (ERR_OK == HAL_USART_GetChar( USART1, Data))
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <HAL_USART_ReceiveBuffer+0x5c>)
 8001828:	f7ff ff76 	bl	8001718 <HAL_USART_GetChar>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_USART_ReceiveBuffer+0x44>
		{
			Data++;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
			u16_Len++;
 8001838:	8afb      	ldrh	r3, [r7, #22]
 800183a:	3301      	adds	r3, #1
 800183c:	82fb      	strh	r3, [r7, #22]
			(*RecievedLen)++;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	e001      	b.n	8001850 <HAL_USART_ReceiveBuffer+0x48>
		}
		else
		{
			return ERR_BUFFER_EMPTY;
 800184c:	2303      	movs	r3, #3
 800184e:	e004      	b.n	800185a <HAL_USART_ReceiveBuffer+0x52>
	while (Len > u16_Len)
 8001850:	88fa      	ldrh	r2, [r7, #6]
 8001852:	8afb      	ldrh	r3, [r7, #22]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8e5      	bhi.n	8001824 <HAL_USART_ReceiveBuffer+0x1c>
		}
	}

	return ERR_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40013800 	.word	0x40013800

08001868 <__NVIC_SetPriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ffc2 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <vInit>:
 * @brief:
 * Parameters:
 * Return:
 */
void vInit(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0

#ifdef USE_SYS
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001906:	463b      	mov	r3, r7
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fa35 	bl	8000d78 <LL_RCC_GetSystemClocksFreq>
	vSys_Init((void*)SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <vInit+0x4c>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffcf 	bl	80018bc <SysTick_Config>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f81b 	bl	800195c <vSys_Init>
#endif

#ifdef USE_LED
	vLed_Init((void*)MX_GPIO_Init);
 8001926:	480a      	ldr	r0, [pc, #40]	; (8001950 <vInit+0x50>)
 8001928:	f7ff fc86 	bl	8001238 <vLed_Init>
#endif

#ifdef USE_USART
	vUSART_Init((void*)MX_USART1_UART_Init);
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <vInit+0x54>)
 800192e:	f7ff fe45 	bl	80015bc <vUSART_Init>
#endif

#ifdef USE_SPI
	vSPI_Init((void*)MX_SPI1_Init);
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <vInit+0x58>)
 8001934:	f7ff fd5a 	bl	80013ec <vSPI_Init>
#endif

#ifdef USE_SCHM
	vSchM_Init(NULL_PTR);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f835 	bl	80019a8 <vSchM_Init>
	vSchM_MainFunction();
 800193e:	f000 f841 	bl	80019c4 <vSchM_MainFunction>
	while (1)
		;
#endif


}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	10624dd3 	.word	0x10624dd3
 8001950:	0800019d 	.word	0x0800019d
 8001954:	0800097d 	.word	0x0800097d
 8001958:	0800065d 	.word	0x0800065d

0800195c <vSys_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSys_Init(const void* configPtr)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

	bSysInit = true;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <vSys_Init+0x18>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
	(void)configPtr;
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000446 	.word	0x20000446

08001978 <u32Sys_GetRunTime>:
 * @brief:
 * Parameters:
 * Return:
 */
uint32_t u32Sys_GetRunTime(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	return u32_RunTime;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <u32Sys_GetRunTime+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000448 	.word	0x20000448

0800198c <vSysRunModeTick>:
 * @brief:
 * Parameters:
 * Return:
 */
volatile void vSysRunModeTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

	u32_RunTime++;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <vSysRunModeTick+0x18>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <vSysRunModeTick+0x18>)
 8001998:	6013      	str	r3, [r2, #0]

}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000448 	.word	0x20000448

080019a8 <vSchM_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_Init(const void* configPtr)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	bSchmInit = true;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <vSchM_Init+0x18>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]

	(void)configPtr;
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	2000044c 	.word	0x2000044c

080019c4 <vSchM_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_MainFunction(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0

	while (1)
	{
		if (bSchmInit == false)
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <vSchM_MainFunction+0x90>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d13c      	bne.n	8001a50 <vSchM_MainFunction+0x8c>
		{
			return;
		}
		else
		{
			vSchM_IdleTask();
 80019d6:	f000 f841 	bl	8001a5c <vSchM_IdleTask>
			if (Sys_GetRunTime() ^ u32_ScheduleCycle_Sample)
 80019da:	f7ff ffcd 	bl	8001978 <u32Sys_GetRunTime>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <vSchM_MainFunction+0x94>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d0ef      	beq.n	80019c8 <vSchM_MainFunction+0x4>
			{

				u32_ScheduleCycle_Sample = Sys_GetRunTime();
 80019e8:	f7ff ffc6 	bl	8001978 <u32Sys_GetRunTime>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <vSchM_MainFunction+0x94>)
 80019f0:	601a      	str	r2, [r3, #0]
				vSchM_BaseRecurrenceTask();
 80019f2:	f000 f839 	bl	8001a68 <vSchM_BaseRecurrenceTask>
				if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_2)
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <vSchM_MainFunction+0x94>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <vSchM_MainFunction+0x44>
				{
					vSchM_BaseRecurrenceTaskDiv2();
 8001a02:	f000 f837 	bl	8001a74 <vSchM_BaseRecurrenceTaskDiv2>
 8001a06:	e7df      	b.n	80019c8 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_4)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <vSchM_MainFunction+0x94>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <vSchM_MainFunction+0x56>
				{
					vSchM_BaseRecurrenceTaskDiv4();
 8001a14:	f000 f834 	bl	8001a80 <vSchM_BaseRecurrenceTaskDiv4>
 8001a18:	e7d6      	b.n	80019c8 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_8)
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <vSchM_MainFunction+0x94>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <vSchM_MainFunction+0x68>
				{
					vSchM_BaseRecurrenceTaskDiv8();
 8001a26:	f000 f831 	bl	8001a8c <vSchM_BaseRecurrenceTaskDiv8>
 8001a2a:	e7cd      	b.n	80019c8 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_16)
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <vSchM_MainFunction+0x94>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <vSchM_MainFunction+0x7a>
				{
					vSchM_BaseRecurrenceTaskDiv16();
 8001a38:	f000 f82e 	bl	8001a98 <vSchM_BaseRecurrenceTaskDiv16>
 8001a3c:	e7c4      	b.n	80019c8 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_32)
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <vSchM_MainFunction+0x94>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0be      	beq.n	80019c8 <vSchM_MainFunction+0x4>
				{
					vSchM_BaseRecurrenceTaskDiv32();
 8001a4a:	f000 f82b 	bl	8001aa4 <vSchM_BaseRecurrenceTaskDiv32>
		if (bSchmInit == false)
 8001a4e:	e7bb      	b.n	80019c8 <vSchM_MainFunction+0x4>
			return;
 8001a50:	bf00      	nop
					;
				}
			}
		}
	}
}
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000044c 	.word	0x2000044c
 8001a58:	20000450 	.word	0x20000450

08001a5c <vSchM_IdleTask>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_IdleTask(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <vSchM_BaseRecurrenceTask>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTask	(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	vLed_MainFunction();
 8001a6c:	f7ff fbf4 	bl	8001258 <vLed_MainFunction>

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <vSchM_BaseRecurrenceTaskDiv2>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv2(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0


}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <vSchM_BaseRecurrenceTaskDiv4>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv4(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0


}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <vSchM_BaseRecurrenceTaskDiv8>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv8(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0


}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <vSchM_BaseRecurrenceTaskDiv16>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv16(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0


}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <vSchM_BaseRecurrenceTaskDiv32>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv32(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	vUSART_MainFunction();
 8001aa8:	f7ff fda8 	bl	80015fc <vUSART_MainFunction>


}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <CircularFIFOBuffer_isFull>:
static uint16_t CircularFIFOBuffer_getNumberOfElements(TS_CircularFIFOBuffer* rg_Buffer);




static uint8_t CircularFIFOBuffer_isFull(TS_CircularFIFOBuffer* rg_Buffer){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if (CircularFIFOBuffer_getNumberOfElements(rg_Buffer) == BUFFER_SIZE){
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f81e 	bl	8001afa <CircularFIFOBuffer_getNumberOfElements>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2bff      	cmp	r3, #255	; 0xff
 8001ac2:	d101      	bne.n	8001ac8 <CircularFIFOBuffer_isFull+0x18>
    return true ;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <CircularFIFOBuffer_isFull+0x1a>
  }else{
    return false;
 8001ac8:	2300      	movs	r3, #0
  }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <CircularFIFOBuffer_isEmpty>:

static uint8_t CircularFIFOBuffer_isEmpty(TS_CircularFIFOBuffer* rg_Buffer){
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  if ( rg_Buffer->next == rg_Buffer->first ){
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d101      	bne.n	8001aee <CircularFIFOBuffer_isEmpty+0x1c>
    return true ;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <CircularFIFOBuffer_isEmpty+0x1e>
  }else{
    return false;
 8001aee:	2300      	movs	r3, #0
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <CircularFIFOBuffer_getNumberOfElements>:



static uint16_t CircularFIFOBuffer_getNumberOfElements(TS_CircularFIFOBuffer* rg_Buffer){
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  if (rg_Buffer->next >= rg_Buffer->first){
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d308      	bcc.n	8001b24 <CircularFIFOBuffer_getNumberOfElements+0x2a>
    return (uint16_t) (rg_Buffer->next - rg_Buffer->first);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	e009      	b.n	8001b38 <CircularFIFOBuffer_getNumberOfElements+0x3e>
  }else{
    return (uint16_t) (BUFFER_SIZE - rg_Buffer->next + rg_Buffer->first);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	33ff      	adds	r3, #255	; 0xff
 8001b36:	b29b      	uxth	r3, r3
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <bCircularFIFOBuffer_getElement>:
//***********************************************************************************************


// Get the first element from the FIFO queue
bool bCircularFIFOBuffer_getElement(TS_CircularFIFOBuffer* rg_Buffer, uint8_t* theElement)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	  if ( CircularFIFOBuffer_isEmpty(rg_Buffer) != true){
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffc0 	bl	8001ad2 <CircularFIFOBuffer_isEmpty>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d01b      	beq.n	8001b90 <bCircularFIFOBuffer_getElement+0x4e>
	    *theElement = rg_Buffer->Buffer[rg_Buffer->first];
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	789a      	ldrb	r2, [r3, #2]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
	    if ( rg_Buffer->first != BUFFER_SIZE ){
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d008      	beq.n	8001b86 <bCircularFIFOBuffer_getElement+0x44>
	      rg_Buffer->first++;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001b84:	e006      	b.n	8001b94 <bCircularFIFOBuffer_getElement+0x52>
	    }else{
	      rg_Buffer->first = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001b8e:	e001      	b.n	8001b94 <bCircularFIFOBuffer_getElement+0x52>
	    }
	  }else{
	    return false;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <bCircularFIFOBuffer_getElement+0x54>
	  }

	  return true;// Return !0 always if it is not empty
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <bCircularFIFOBuffer_addElement>:

// Add an element to the FIFO queue
bool bCircularFIFOBuffer_addElement(TS_CircularFIFOBuffer* rg_Buffer, uint8_t data)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
	  if (CircularFIFOBuffer_isFull(rg_Buffer) != true){
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff80 	bl	8001ab0 <CircularFIFOBuffer_isFull>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d01b      	beq.n	8001bee <bCircularFIFOBuffer_addElement+0x50>
	     rg_Buffer->Buffer[rg_Buffer->next] = data;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	709a      	strb	r2, [r3, #2]
	     if ( rg_Buffer->next != BUFFER_SIZE ){
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001bcc:	2bff      	cmp	r3, #255	; 0xff
 8001bce:	d008      	beq.n	8001be2 <bCircularFIFOBuffer_addElement+0x44>
	      rg_Buffer->next++;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001be0:	e003      	b.n	8001bea <bCircularFIFOBuffer_addElement+0x4c>
	     }else{
	      rg_Buffer->next = 0;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	     }
	    return true;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <bCircularFIFOBuffer_addElement+0x52>
	  }else{
	    return false;
 8001bee:	2300      	movs	r3, #0
	  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <__libc_init_array>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	4e0c      	ldr	r6, [pc, #48]	; (8001c30 <__libc_init_array+0x38>)
 8001bfe:	4c0d      	ldr	r4, [pc, #52]	; (8001c34 <__libc_init_array+0x3c>)
 8001c00:	1ba4      	subs	r4, r4, r6
 8001c02:	10a4      	asrs	r4, r4, #2
 8001c04:	42a5      	cmp	r5, r4
 8001c06:	d109      	bne.n	8001c1c <__libc_init_array+0x24>
 8001c08:	f000 f822 	bl	8001c50 <_init>
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	4e0a      	ldr	r6, [pc, #40]	; (8001c38 <__libc_init_array+0x40>)
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <__libc_init_array+0x44>)
 8001c12:	1ba4      	subs	r4, r4, r6
 8001c14:	10a4      	asrs	r4, r4, #2
 8001c16:	42a5      	cmp	r5, r4
 8001c18:	d105      	bne.n	8001c26 <__libc_init_array+0x2e>
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c20:	4798      	blx	r3
 8001c22:	3501      	adds	r5, #1
 8001c24:	e7ee      	b.n	8001c04 <__libc_init_array+0xc>
 8001c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c2a:	4798      	blx	r3
 8001c2c:	3501      	adds	r5, #1
 8001c2e:	e7f2      	b.n	8001c16 <__libc_init_array+0x1e>
 8001c30:	08001c80 	.word	0x08001c80
 8001c34:	08001c80 	.word	0x08001c80
 8001c38:	08001c80 	.word	0x08001c80
 8001c3c:	08001c84 	.word	0x08001c84

08001c40 <memset>:
 8001c40:	4603      	mov	r3, r0
 8001c42:	4402      	add	r2, r0
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d100      	bne.n	8001c4a <memset+0xa>
 8001c48:	4770      	bx	lr
 8001c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c4e:	e7f9      	b.n	8001c44 <memset+0x4>

08001c50 <_init>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	bf00      	nop
 8001c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c56:	bc08      	pop	{r3}
 8001c58:	469e      	mov	lr, r3
 8001c5a:	4770      	bx	lr

08001c5c <_fini>:
 8001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5e:	bf00      	nop
 8001c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c62:	bc08      	pop	{r3}
 8001c64:	469e      	mov	lr, r3
 8001c66:	4770      	bx	lr
