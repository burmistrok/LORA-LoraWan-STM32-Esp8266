
EndDevice_STM32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001130  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001254  08001254  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001254  08001254  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001254  08001254  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001254  08001254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800125c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001260  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001260  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f40  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011e7  00000000  00000000  00023f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000548  00000000  00000000  00025158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  000256a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011f78  00000000  00000000  00025b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000443d  00000000  00000000  00037aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005c49a  00000000  00000000  0003bee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009837f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001370  00000000  00000000  000983fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001224 	.word	0x08001224

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001224 	.word	0x08001224

0800014c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	4907      	ldr	r1, [pc, #28]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4313      	orrs	r3, r2
 800015e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000162:	699a      	ldr	r2, [r3, #24]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4013      	ands	r3, r2
 8000168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	bf00      	nop
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	40021000 	.word	0x40021000

0800017c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000180:	2020      	movs	r0, #32
 8000182:	f7ff ffe3 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000186:	2004      	movs	r0, #4
 8000188:	f7ff ffe0 	bl	800014c <LL_APB2_GRP1_EnableClock>

}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}

08000190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f003 0307 	and.w	r3, r3, #7
 800019e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <__NVIC_SetPriorityGrouping+0x44>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001a6:	68ba      	ldr	r2, [r7, #8]
 80001a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001ac:	4013      	ands	r3, r2
 80001ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001c2:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <__NVIC_SetPriorityGrouping+0x44>)
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	60d3      	str	r3, [r2, #12]
}
 80001c8:	bf00      	nop
 80001ca:	3714      	adds	r7, #20
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <LL_RCC_HSE_Enable+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <LL_RCC_HSE_Enable+0x18>)
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021000 	.word	0x40021000

080001f4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_RCC_HSE_IsReady+0x20>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000204:	bf0c      	ite	eq
 8000206:	2301      	moveq	r3, #1
 8000208:	2300      	movne	r3, #0
 800020a:	b2db      	uxtb	r3, r3
}
 800020c:	4618      	mov	r0, r3
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40021000 	.word	0x40021000

08000218 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <LL_RCC_SetSysClkSource+0x24>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	f023 0203 	bic.w	r2, r3, #3
 8000228:	4904      	ldr	r1, [pc, #16]	; (800023c <LL_RCC_SetSysClkSource+0x24>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4313      	orrs	r3, r2
 800022e:	604b      	str	r3, [r1, #4]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000

08000240 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <LL_RCC_GetSysClkSource+0x14>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	f003 030c 	and.w	r3, r3, #12
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40021000 	.word	0x40021000

08000258 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <LL_RCC_SetAHBPrescaler+0x24>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000268:	4904      	ldr	r1, [pc, #16]	; (800027c <LL_RCC_SetAHBPrescaler+0x24>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	604b      	str	r3, [r1, #4]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000

08000280 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	604b      	str	r3, [r1, #4]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80002b8:	4904      	ldr	r1, [pc, #16]	; (80002cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4313      	orrs	r3, r2
 80002be:	604b      	str	r3, [r1, #4]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <LL_RCC_PLL_Enable+0x18>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <LL_RCC_PLL_Enable+0x18>)
 80002da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <LL_RCC_PLL_IsReady+0x20>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002fc:	bf0c      	ite	eq
 80002fe:	2301      	moveq	r3, #1
 8000300:	2300      	movne	r3, #0
 8000302:	b2db      	uxtb	r3, r3
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000

08000310 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	430b      	orrs	r3, r1
 800032c:	4903      	ldr	r1, [pc, #12]	; (800033c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800032e:	4313      	orrs	r3, r2
 8000330:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000

08000340 <LL_APB1_GRP1_EnableClock>:
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <LL_APB1_GRP1_EnableClock+0x2c>)
 800034a:	69da      	ldr	r2, [r3, #28]
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <LL_APB1_GRP1_EnableClock+0x2c>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000356:	69da      	ldr	r2, [r3, #28]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4013      	ands	r3, r2
 800035c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035e:	68fb      	ldr	r3, [r7, #12]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_APB2_GRP1_EnableClock>:
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <LL_APB2_GRP1_EnableClock+0x2c>)
 800037a:	699a      	ldr	r2, [r3, #24]
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <LL_APB2_GRP1_EnableClock+0x2c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4313      	orrs	r3, r2
 8000382:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000386:	699a      	ldr	r2, [r3, #24]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4013      	ands	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_FLASH_SetLatency+0x24>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f023 0207 	bic.w	r2, r3, #7
 80003b0:	4904      	ldr	r1, [pc, #16]	; (80003c4 <LL_FLASH_SetLatency+0x24>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	600b      	str	r3, [r1, #0]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40022000 	.word	0x40022000

080003c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <LL_FLASH_GetLatency+0x14>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f003 0307 	and.w	r3, r3, #7
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40022000 	.word	0x40022000

080003e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80003ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ee:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	6053      	str	r3, [r2, #4]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40010000 	.word	0x40010000

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800040e:	2001      	movs	r0, #1
 8000410:	f7ff ffae 	bl	8000370 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000414:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000418:	f7ff ff92 	bl	8000340 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800041c:	2003      	movs	r0, #3
 800041e:	f7ff feb7 	bl	8000190 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000422:	f7ff ffdd 	bl	80003e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000426:	f000 f811 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f7ff fea7 	bl	800017c <MX_GPIO_Init>
  MX_SPI1_Init();
 800042e:	f000 f8f1 	bl	8000614 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000432:	f000 fa7f 	bl	8000934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int i;
	  for (i=0; i<5; i++);
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	e002      	b.n	8000442 <main+0x3a>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	3301      	adds	r3, #1
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b04      	cmp	r3, #4
 8000446:	ddf9      	ble.n	800043c <main+0x34>
  {
 8000448:	e7f5      	b.n	8000436 <main+0x2e>
	...

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000450:	2002      	movs	r0, #2
 8000452:	f7ff ffa5 	bl	80003a0 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000456:	f7ff ffb7 	bl	80003c8 <LL_FLASH_GetLatency>
 800045a:	4603      	mov	r3, r0
 800045c:	2b02      	cmp	r3, #2
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x18>
  {
    Error_Handler();  
 8000460:	f000 f834 	bl	80004cc <Error_Handler>
  }
  LL_RCC_HSE_Enable();
 8000464:	f7ff feb8 	bl	80001d8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000468:	bf00      	nop
 800046a:	f7ff fec3 	bl	80001f4 <LL_RCC_HSE_IsReady>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d1fa      	bne.n	800046a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000474:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000478:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800047c:	f7ff ff48 	bl	8000310 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000480:	f7ff ff26 	bl	80002d0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000484:	bf00      	nop
 8000486:	f7ff ff31 	bl	80002ec <LL_RCC_PLL_IsReady>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d1fa      	bne.n	8000486 <SystemClock_Config+0x3a>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff fee1 	bl	8000258 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000496:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800049a:	f7ff fef1 	bl	8000280 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800049e:	2000      	movs	r0, #0
 80004a0:	f7ff ff02 	bl	80002a8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80004a4:	2002      	movs	r0, #2
 80004a6:	f7ff feb7 	bl	8000218 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80004aa:	bf00      	nop
 80004ac:	f7ff fec8 	bl	8000240 <LL_RCC_GetSysClkSource>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b08      	cmp	r3, #8
 80004b4:	d1fa      	bne.n	80004ac <SystemClock_Config+0x60>
  {
  
  }
  LL_Init1msTick(72000000);
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <SystemClock_Config+0x7c>)
 80004b8:	f000 fe6c 	bl	8001194 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <SystemClock_Config+0x7c>)
 80004be:	f000 fe77 	bl	80011b0 <LL_SetSystemCoreClock>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	044aa200 	.word	0x044aa200

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_GetPriorityGrouping+0x18>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	0a1b      	lsrs	r3, r3, #8
 80004e2:	f003 0307 	and.w	r3, r3, #7
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	db0b      	blt.n	800051e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 021f 	and.w	r2, r3, #31
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <__NVIC_EnableIRQ+0x34>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	2001      	movs	r0, #1
 8000516:	fa00 f202 	lsl.w	r2, r0, r2
 800051a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	e000e100 	.word	0xe000e100

0800052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db0a      	blt.n	8000556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	490c      	ldr	r1, [pc, #48]	; (8000578 <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000554:	e00a      	b.n	800056c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	0112      	lsls	r2, r2, #4
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	440b      	add	r3, r1
 800056a:	761a      	strb	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	f1c3 0307 	rsb	r3, r3, #7
 800059a:	2b04      	cmp	r3, #4
 800059c:	bf28      	it	cs
 800059e:	2304      	movcs	r3, #4
 80005a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d902      	bls.n	80005b0 <NVIC_EncodePriority+0x30>
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3b03      	subs	r3, #3
 80005ae:	e000      	b.n	80005b2 <NVIC_EncodePriority+0x32>
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43da      	mvns	r2, r3
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	401a      	ands	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43d9      	mvns	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4313      	orrs	r3, r2
         );
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3724      	adds	r7, #36	; 0x24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <LL_APB2_GRP1_EnableClock>:
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ee:	699a      	ldr	r2, [r3, #24]
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005fa:	699a      	ldr	r2, [r3, #24]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fdf6 	bl	8001214 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000636:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800063a:	f7ff ffd3 	bl	80005e4 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800063e:	2004      	movs	r0, #4
 8000640:	f7ff ffd0 	bl	80005e4 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000644:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000648:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800064a:	2309      	movs	r3, #9
 800064c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	481e      	ldr	r0, [pc, #120]	; (80006d4 <MX_SPI1_Init+0xc0>)
 800065c:	f000 faaf 	bl	8000bbe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000660:	f244 0340 	movw	r3, #16448	; 0x4040
 8000664:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000666:	2304      	movs	r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <MX_SPI1_Init+0xc0>)
 8000670:	f000 faa5 	bl	8000bbe <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000674:	f7ff ff30 	bl	80004d8 <__NVIC_GetPriorityGrouping>
 8000678:	4603      	mov	r3, r0
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff7e 	bl	8000580 <NVIC_EncodePriority>
 8000684:	4603      	mov	r3, r0
 8000686:	4619      	mov	r1, r3
 8000688:	2023      	movs	r0, #35	; 0x23
 800068a:	f7ff ff4f 	bl	800052c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 800068e:	2023      	movs	r0, #35	; 0x23
 8000690:	f7ff ff30 	bl	80004f4 <__NVIC_EnableIRQ>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000698:	f44f 7382 	mov.w	r3, #260	; 0x104
 800069c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80006aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80006b0:	2308      	movs	r3, #8
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80006bc:	230a      	movs	r3, #10
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_SPI1_Init+0xc4>)
 80006c8:	f000 fc09 	bl	8000ede <LL_SPI_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3740      	adds	r7, #64	; 0x40
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40010800 	.word	0x40010800
 80006d8:	40013000 	.word	0x40013000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <HardFault_Handler+0x4>

080006ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <MemManage_Handler+0x4>

080006f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <BusFault_Handler+0x4>

080006fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <UsageFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <SystemInit+0x5c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <SystemInit+0x5c>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <SystemInit+0x5c>)
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	4911      	ldr	r1, [pc, #68]	; (80007a4 <SystemInit+0x5c>)
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <SystemInit+0x60>)
 8000760:	4013      	ands	r3, r2
 8000762:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <SystemInit+0x5c>)
 800076a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800076e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SystemInit+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SystemInit+0x5c>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SystemInit+0x5c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <SystemInit+0x5c>)
 8000786:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800078a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SystemInit+0x5c>)
 800078e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000792:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SystemInit+0x64>)
 8000796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079a:	609a      	str	r2, [r3, #8]
#endif 
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	f8ff0000 	.word	0xf8ff0000
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <__NVIC_EnableIRQ+0x34>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	; (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	; 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <LL_APB2_GRP1_EnableClock>:
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c6:	699a      	ldr	r2, [r3, #24]
 80008c8:	4907      	ldr	r1, [pc, #28]	; (80008e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008d2:	699a      	ldr	r2, [r3, #24]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60da      	str	r2, [r3, #12]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	615a      	str	r2, [r3, #20]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800095c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000960:	f7ff ffac 	bl	80008bc <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000964:	2004      	movs	r0, #4
 8000966:	f7ff ffa9 	bl	80008bc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_USART1_UART_Init+0xc0>)
 800096c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800096e:	2309      	movs	r3, #9
 8000970:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <MX_USART1_UART_Init+0xc4>)
 8000980:	f000 f91d 	bl	8000bbe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART1_UART_Init+0xc8>)
 8000986:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000988:	2304      	movs	r3, #4
 800098a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4819      	ldr	r0, [pc, #100]	; (80009f8 <MX_USART1_UART_Init+0xc4>)
 8000992:	f000 f914 	bl	8000bbe <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000996:	f7ff ff0b 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 800099a:	4603      	mov	r3, r0
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff59 	bl	8000858 <NVIC_EncodePriority>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4619      	mov	r1, r3
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f7ff ff2a 	bl	8000804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80009b0:	2025      	movs	r0, #37	; 0x25
 80009b2:	f7ff ff0b 	bl	80007cc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80009b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009ba:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009c8:	230c      	movs	r3, #12
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_USART1_UART_Init+0xcc>)
 80009dc:	f000 fb60 	bl	80010a0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <MX_USART1_UART_Init+0xcc>)
 80009e2:	f7ff ff92 	bl	800090a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_USART1_UART_Init+0xcc>)
 80009e8:	f7ff ff80 	bl	80008ec <LL_USART_Enable>

}
 80009ec:	bf00      	nop
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	04020002 	.word	0x04020002
 80009f8:	40010800 	.word	0x40010800
 80009fc:	04040004 	.word	0x04040004
 8000a00:	40013800 	.word	0x40013800

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a06:	e003      	b.n	8000a10 <LoopCopyDataInit>

08000a08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a0e:	3104      	adds	r1, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a18:	d3f6      	bcc.n	8000a08 <CopyDataInit>
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a1c:	e002      	b.n	8000a24 <LoopFillZerobss>

08000a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a20:	f842 3b04 	str.w	r3, [r2], #4

08000a24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a28:	d3f9      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff fe8d 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f000 fbcd 	bl	80011cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fce9 	bl	8000408 <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r3, =_sidata
 8000a38:	0800125c 	.word	0x0800125c
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a40:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000a44:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000a48:	20000020 	.word	0x20000020

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>

08000a4e <LL_GPIO_SetPinMode>:
{
 8000a4e:	b490      	push	{r4, r7}
 8000a50:	b088      	sub	sp, #32
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	0e1b      	lsrs	r3, r3, #24
 8000a62:	4413      	add	r3, r2
 8000a64:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000a66:	6822      	ldr	r2, [r4, #0]
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa93 f3a3 	rbit	r3, r3
 8000a72:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	fab3 f383 	clz	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	210f      	movs	r1, #15
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	401a      	ands	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	fa93 f3a3 	rbit	r3, r3
 8000a92:	61bb      	str	r3, [r7, #24]
  return result;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fab3 f383 	clz	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	6023      	str	r3, [r4, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc90      	pop	{r4, r7}
 8000ab0:	4770      	bx	lr

08000ab2 <LL_GPIO_SetPinSpeed>:
{
 8000ab2:	b490      	push	{r4, r7}
 8000ab4:	b088      	sub	sp, #32
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	4413      	add	r3, r2
 8000ac8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000aca:	6822      	ldr	r2, [r4, #0]
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa93 f3a3 	rbit	r3, r3
 8000ad6:	613b      	str	r3, [r7, #16]
  return result;
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	fab3 f383 	clz	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	fa93 f3a3 	rbit	r3, r3
 8000af6:	61bb      	str	r3, [r7, #24]
  return result;
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fab3 f383 	clz	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	6023      	str	r3, [r4, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc90      	pop	{r4, r7}
 8000b14:	4770      	bx	lr

08000b16 <LL_GPIO_SetPinOutputType>:
{
 8000b16:	b490      	push	{r4, r7}
 8000b18:	b088      	sub	sp, #32
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	461a      	mov	r2, r3
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	0e1b      	lsrs	r3, r3, #24
 8000b2a:	4413      	add	r3, r2
 8000b2c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000b2e:	6822      	ldr	r2, [r4, #0]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	613b      	str	r3, [r7, #16]
  return result;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	fab3 f383 	clz	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	2104      	movs	r1, #4
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	61bb      	str	r3, [r7, #24]
  return result;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	6023      	str	r3, [r4, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc90      	pop	{r4, r7}
 8000b78:	4770      	bx	lr

08000b7a <LL_GPIO_SetPinPull>:
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	401a      	ands	r2, r3
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa93 f3a3 	rbit	r3, r3
 8000b9e:	613b      	str	r3, [r7, #16]
  return result;
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	fab3 f383 	clz	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	408b      	lsls	r3, r1
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	60da      	str	r2, [r3, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	371c      	adds	r7, #28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b088      	sub	sp, #32
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	0c1b      	lsrs	r3, r3, #16
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	fa93 f3a3 	rbit	r3, r3
 8000bdc:	60fb      	str	r3, [r7, #12]
  return result;
 8000bde:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000be8:	e040      	b.n	8000c6c <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000bea:	2201      	movs	r2, #1
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d036      	beq.n	8000c66 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	2b07      	cmp	r3, #7
 8000bfc:	d806      	bhi.n	8000c0c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000bfe:	f240 1201 	movw	r2, #257	; 0x101
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	e008      	b.n	8000c1e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	3b08      	subs	r3, #8
 8000c10:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c1c:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	461a      	mov	r2, r3
 8000c24:	69b9      	ldr	r1, [r7, #24]
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff11 	bl	8000a4e <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	461a      	mov	r2, r3
 8000c32:	69b9      	ldr	r1, [r7, #24]
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffa0 	bl	8000b7a <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d003      	beq.n	8000c4a <LL_GPIO_Init+0x8c>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b09      	cmp	r3, #9
 8000c48:	d10d      	bne.n	8000c66 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	69b9      	ldr	r1, [r7, #24]
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ff2d 	bl	8000ab2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	69b9      	ldr	r1, [r7, #24]
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff58 	bl	8000b16 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1b8      	bne.n	8000bea <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <LL_RCC_GetSysClkSource>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <LL_RCC_GetSysClkSource+0x14>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	40021000 	.word	0x40021000

08000c9c <LL_RCC_GetAHBPrescaler>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <LL_RCC_GetAHBPrescaler+0x14>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <LL_RCC_GetAPB1Prescaler>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_GetAPB2Prescaler>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <LL_RCC_PLL_GetMainSource+0x14>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000

08000cfc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <LL_RCC_PLL_GetPrediv+0x18>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	0c5b      	lsrs	r3, r3, #17
 8000d1e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000d38:	f000 f820 	bl	8000d7c <RCC_GetSystemClockFreq>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f83a 	bl	8000dc0 <RCC_GetHCLKClockFreq>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f848 	bl	8000dec <RCC_GetPCLK1ClockFreq>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f854 	bl	8000e14 <RCC_GetPCLK2ClockFreq>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60da      	str	r2, [r3, #12]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000d86:	f7ff ff7d 	bl	8000c84 <LL_RCC_GetSysClkSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d006      	beq.n	8000d9e <RCC_GetSystemClockFreq+0x22>
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d007      	beq.n	8000da4 <RCC_GetSystemClockFreq+0x28>
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <RCC_GetSystemClockFreq+0x40>)
 8000d9a:	607b      	str	r3, [r7, #4]
      break;
 8000d9c:	e009      	b.n	8000db2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <RCC_GetSystemClockFreq+0x40>)
 8000da0:	607b      	str	r3, [r7, #4]
      break;
 8000da2:	e006      	b.n	8000db2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000da4:	f000 f84a 	bl	8000e3c <RCC_PLL_GetFreqDomain_SYS>
 8000da8:	6078      	str	r0, [r7, #4]
      break;
 8000daa:	e002      	b.n	8000db2 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <RCC_GetSystemClockFreq+0x40>)
 8000dae:	607b      	str	r3, [r7, #4]
      break;
 8000db0:	bf00      	nop
  }

  return frequency;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	007a1200 	.word	0x007a1200

08000dc0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000dc8:	f7ff ff68 	bl	8000c9c <LL_RCC_GetAHBPrescaler>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <RCC_GetHCLKClockFreq+0x28>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	40d3      	lsrs	r3, r2
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	0800123c 	.word	0x0800123c

08000dec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000df4:	f7ff ff5e 	bl	8000cb4 <LL_RCC_GetAPB1Prescaler>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <RCC_GetPCLK1ClockFreq+0x24>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	461a      	mov	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	40d3      	lsrs	r3, r2
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800124c 	.word	0x0800124c

08000e14 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000e1c:	f7ff ff56 	bl	8000ccc <LL_RCC_GetAPB2Prescaler>
 8000e20:	4603      	mov	r3, r0
 8000e22:	0adb      	lsrs	r3, r3, #11
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <RCC_GetPCLK2ClockFreq+0x24>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	40d3      	lsrs	r3, r2
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800124c 	.word	0x0800124c

08000e3c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000e4a:	f7ff ff4b 	bl	8000ce4 <LL_RCC_PLL_GetMainSource>
 8000e4e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8000e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5a:	d003      	beq.n	8000e64 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8000e5c:	e00b      	b.n	8000e76 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8000e60:	607b      	str	r3, [r7, #4]
      break;
 8000e62:	e00b      	b.n	8000e7c <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000e64:	f7ff ff56 	bl	8000d14 <LL_RCC_PLL_GetPrediv>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	607b      	str	r3, [r7, #4]
      break;
 8000e74:	e002      	b.n	8000e7c <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8000e78:	607b      	str	r3, [r7, #4]
      break;
 8000e7a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000e7c:	f7ff ff3e 	bl	8000cfc <LL_RCC_PLL_GetMultiplicator>
 8000e80:	4603      	mov	r3, r0
 8000e82:	0c9b      	lsrs	r3, r3, #18
 8000e84:	3302      	adds	r3, #2
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	003d0900 	.word	0x003d0900
 8000e98:	007a1200 	.word	0x007a1200

08000e9c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eac:	2b40      	cmp	r3, #64	; 0x40
 8000eae:	d101      	bne.n	8000eb4 <LL_SPI_IsEnabled+0x18>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <LL_SPI_IsEnabled+0x1a>
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	611a      	str	r2, [r3, #16]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ffd5 	bl	8000e9c <LL_SPI_IsEnabled>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d139      	bne.n	8000f6c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f00:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	6811      	ldr	r1, [r2, #0]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	6852      	ldr	r2, [r2, #4]
 8000f0c:	4311      	orrs	r1, r2
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	6892      	ldr	r2, [r2, #8]
 8000f12:	4311      	orrs	r1, r2
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	68d2      	ldr	r2, [r2, #12]
 8000f18:	4311      	orrs	r1, r2
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	6912      	ldr	r2, [r2, #16]
 8000f1e:	4311      	orrs	r1, r2
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	6952      	ldr	r2, [r2, #20]
 8000f24:	4311      	orrs	r1, r2
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	6992      	ldr	r2, [r2, #24]
 8000f2a:	4311      	orrs	r1, r2
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	69d2      	ldr	r2, [r2, #28]
 8000f30:	4311      	orrs	r1, r2
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	6a12      	ldr	r2, [r2, #32]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f023 0204 	bic.w	r2, r3, #4
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	0c1b      	lsrs	r3, r3, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5a:	d105      	bne.n	8000f68 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffac 	bl	8000ec0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LL_USART_IsEnabled>:
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2301      	moveq	r3, #1
 8000f8e:	2300      	movne	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <LL_USART_SetStopBitsLength>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <LL_USART_SetHWFlowCtrl>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	615a      	str	r2, [r3, #20]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <LL_USART_SetBaudRate>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009a      	lsls	r2, r3, #2
 8000ffa:	441a      	add	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <LL_USART_SetBaudRate+0xb8>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	b29b      	uxth	r3, r3
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	b299      	uxth	r1, r3
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009a      	lsls	r2, r3, #2
 800101c:	441a      	add	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fbb2 f2f3 	udiv	r2, r2, r3
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <LL_USART_SetBaudRate+0xb8>)
 8001028:	fba3 0302 	umull	r0, r3, r3, r2
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	fb00 f303 	mul.w	r3, r0, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	3332      	adds	r3, #50	; 0x32
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <LL_USART_SetBaudRate+0xb8>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	095b      	lsrs	r3, r3, #5
 8001042:	b29b      	uxth	r3, r3
 8001044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001048:	b29b      	uxth	r3, r3
 800104a:	440b      	add	r3, r1
 800104c:	b299      	uxth	r1, r3
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	009a      	lsls	r2, r3, #2
 8001058:	441a      	add	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <LL_USART_SetBaudRate+0xb8>)
 8001064:	fba3 0302 	umull	r0, r3, r3, r2
 8001068:	095b      	lsrs	r3, r3, #5
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	fb00 f303 	mul.w	r3, r0, r3
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	3332      	adds	r3, #50	; 0x32
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <LL_USART_SetBaudRate+0xb8>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	b29b      	uxth	r3, r3
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	b29b      	uxth	r3, r3
 8001086:	440b      	add	r3, r1
 8001088:	b29b      	uxth	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	51eb851f 	.word	0x51eb851f

080010a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff5f 	bl	8000f76 <LL_USART_IsEnabled>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d145      	bne.n	800114a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80010c6:	f023 030c 	bic.w	r3, r3, #12
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	6851      	ldr	r1, [r2, #4]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	68d2      	ldr	r2, [r2, #12]
 80010d2:	4311      	orrs	r1, r2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	6912      	ldr	r2, [r2, #16]
 80010d8:	430a      	orrs	r2, r1
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff58 	bl	8000f9c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff64 	bl	8000fc0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe17 	bl	8000d30 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a13      	ldr	r2, [pc, #76]	; (8001154 <LL_USART_Init+0xb4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d102      	bne.n	8001110 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	e00c      	b.n	800112a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <LL_USART_Init+0xb8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d102      	bne.n	800111e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	e005      	b.n	800112a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LL_USART_Init+0xbc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00c      	beq.n	800114a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d008      	beq.n	800114a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff4d 	bl	8000fe4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800114a:	7ffb      	ldrb	r3, [r7, #31]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013800 	.word	0x40013800
 8001158:	40004400 	.word	0x40004400
 800115c:	40004800 	.word	0x40004800

08001160 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <LL_InitTick+0x30>)
 8001174:	3b01      	subs	r3, #1
 8001176:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <LL_InitTick+0x30>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <LL_InitTick+0x30>)
 8001180:	2205      	movs	r2, #5
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800119c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ffdd 	bl	8001160 <LL_InitTick>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <LL_SetSystemCoreClock+0x18>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000000 	.word	0x20000000

080011cc <__libc_init_array>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	2500      	movs	r5, #0
 80011d0:	4e0c      	ldr	r6, [pc, #48]	; (8001204 <__libc_init_array+0x38>)
 80011d2:	4c0d      	ldr	r4, [pc, #52]	; (8001208 <__libc_init_array+0x3c>)
 80011d4:	1ba4      	subs	r4, r4, r6
 80011d6:	10a4      	asrs	r4, r4, #2
 80011d8:	42a5      	cmp	r5, r4
 80011da:	d109      	bne.n	80011f0 <__libc_init_array+0x24>
 80011dc:	f000 f822 	bl	8001224 <_init>
 80011e0:	2500      	movs	r5, #0
 80011e2:	4e0a      	ldr	r6, [pc, #40]	; (800120c <__libc_init_array+0x40>)
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <__libc_init_array+0x44>)
 80011e6:	1ba4      	subs	r4, r4, r6
 80011e8:	10a4      	asrs	r4, r4, #2
 80011ea:	42a5      	cmp	r5, r4
 80011ec:	d105      	bne.n	80011fa <__libc_init_array+0x2e>
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
 80011f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f4:	4798      	blx	r3
 80011f6:	3501      	adds	r5, #1
 80011f8:	e7ee      	b.n	80011d8 <__libc_init_array+0xc>
 80011fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011fe:	4798      	blx	r3
 8001200:	3501      	adds	r5, #1
 8001202:	e7f2      	b.n	80011ea <__libc_init_array+0x1e>
 8001204:	08001254 	.word	0x08001254
 8001208:	08001254 	.word	0x08001254
 800120c:	08001254 	.word	0x08001254
 8001210:	08001258 	.word	0x08001258

08001214 <memset>:
 8001214:	4603      	mov	r3, r0
 8001216:	4402      	add	r2, r0
 8001218:	4293      	cmp	r3, r2
 800121a:	d100      	bne.n	800121e <memset+0xa>
 800121c:	4770      	bx	lr
 800121e:	f803 1b01 	strb.w	r1, [r3], #1
 8001222:	e7f9      	b.n	8001218 <memset+0x4>

08001224 <_init>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	bf00      	nop
 8001228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122a:	bc08      	pop	{r3}
 800122c:	469e      	mov	lr, r3
 800122e:	4770      	bx	lr

08001230 <_fini>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	bf00      	nop
 8001234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001236:	bc08      	pop	{r3}
 8001238:	469e      	mov	lr, r3
 800123a:	4770      	bx	lr
